#pragma once

#include <Windows.h>
#include <string>
#include <vector>
#include <map>

enum UnitStats {
	STAT_STRENGTH = 0x0,
	STAT_ENERGY = 0x1,
	STAT_DEXTERITY = 0x2,
	STAT_VITALITY = 0x3,
	STAT_STATPTS = 0x4,
	STAT_NEWSKILLS = 0x5,
	STAT_HITPOINTS = 0x6,
	STAT_MAXHP = 0x7,
	STAT_MANA = 0x8,
	STAT_MAXMANA = 0x9,
	STAT_STAMINA = 0xA,
	STAT_MAXSTAMINA = 0xB,
	STAT_LEVEL = 0xC,
	STAT_EXPERIENCE = 0xD,
	STAT_GOLD = 0xE,
	STAT_GOLDBANK = 0xF,
	STAT_ITEM_ARMOR_PERCENT = 0x10,
	STAT_ITEM_MAXDAMAGE_PERCENT = 0x11,
	STAT_ITEM_MINDAMAGE_PERCENT = 0x12,
	STAT_TOHIT = 0x13,
	STAT_TOBLOCK = 0x14,
	STAT_MINDAMAGE = 0x15,
	STAT_MAXDAMAGE = 0x16,
	STAT_SECONDARY_MINDAMAGE = 0x17,
	STAT_SECONDARY_MAXDAMAGE = 0x18,
	STAT_DAMAGEPERCENT = 0x19,
	STAT_MANARECOVERY = 0x1A,
	STAT_MANARECOVERYBONUS = 0x1B,
	STAT_STAMINARECOVERYBONUS = 0x1C,
	STAT_LASTEXP = 0x1D,
	STAT_NEXTEXP = 0x1E,
	STAT_ARMORCLASS = 0x1F,
	STAT_ARMORCLASS_VS_MISSILE = 0x20,
	STAT_ARMORCLASS_VS_HTH = 0x21,
	STAT_NORMAL_DAMAGE_REDUCTION = 0x22,
	STAT_MAGIC_DAMAGE_REDUCTION = 0x23,
	STAT_DAMAGERESIST = 0x24,
	STAT_MAGICRESIST = 0x25,
	STAT_MAXMAGICRESIST = 0x26,
	STAT_FIRERESIST = 0x27,
	STAT_MAXFIRERESIST = 0x28,
	STAT_LIGHTRESIST = 0x29,
	STAT_MAXLIGHTRESIST = 0x2A,
	STAT_COLDRESIST = 0x2B,
	STAT_MAXCOLDRESIST = 0x2C,
	STAT_POISONRESIST = 0x2D,
	STAT_MAXPOISONRESIST = 0x2E,
	STAT_DAMAGEAURA = 0x2F,
	STAT_FIREMINDAM = 0x30,
	STAT_FIREMAXDAM = 0x31,
	STAT_LIGHTMINDAM = 0x32,
	STAT_LIGHTMAXDAM = 0x33,
	STAT_MAGICMINDAM = 0x34,
	STAT_MAGICMAXDAM = 0x35,
	STAT_COLDMINDAM = 0x36,
	STAT_COLDMAXDAM = 0x37,
	STAT_COLDLENGTH = 0x38,
	STAT_POISONMINDAM = 0x39,
	STAT_POISONMAXDAM = 0x3A,
	STAT_POISONLENGTH = 0x3B,
	STAT_LIFEDRAINMINDAM = 0x3C,
	STAT_LIFEDRAINMAXDAM = 0x3D,
	STAT_MANADRAINMINDAM = 0x3E,
	STAT_MANADRAINMAXDAM = 0x3F,
	STAT_STAMDRAINMINDAM = 0x40,
	STAT_STAMDRAINMAXDAM = 0x41,
	STAT_STUNLENGTH = 0x42,
	STAT_VELOCITYPERCENT = 0x43,
	STAT_ATTACKRATE = 0x44,
	STAT_OTHER_ANIMRATE = 0x45,
	STAT_QUANTITY = 0x46,
	STAT_VALUE = 0x47,
	STAT_DURABILITY = 0x48,
	STAT_MAXDURABILITY = 0x49,
	STAT_HPREGEN = 0x4A,
	STAT_ITEM_MAXDURABILITY_PERCENT = 0x4B,
	STAT_ITEM_MAXHP_PERCENT = 0x4C,
	STAT_ITEM_MAXMANA_PERCENT = 0x4D,
	STAT_ITEM_ATTACKERTAKESDAMAGE = 0x4E,
	STAT_ITEM_GOLDBONUS = 0x4F,
	STAT_ITEM_MAGICBONUS = 0x50,
	STAT_ITEM_KNOCKBACK = 0x51,
	STAT_ITEM_TIMEDURATION = 0x52,
	STAT_ITEM_ADDCLASSSKILLS = 0x53,
	STAT_UNSENTPARAM1 = 0x54,
	STAT_ITEM_ADDEXPERIENCE = 0x55,
	STAT_ITEM_HEALAFTERKILL = 0x56,
	STAT_ITEM_REDUCEDPRICES = 0x57,
	STAT_ITEM_DOUBLEHERBDURATION = 0x58,
	STAT_ITEM_LIGHTRADIUS = 0x59,
	STAT_ITEM_LIGHTCOLOR = 0x5A,
	STAT_ITEM_REQ_PERCENT = 0x5B,
	STAT_ITEM_LEVELREQ = 0x5C,
	STAT_ITEM_FASTERATTACKRATE = 0x5D,
	STAT_ITEM_LEVELREQPCT = 0x5E,
	STAT_LASTBLOCKFRAME = 0x5F,
	STAT_ITEM_FASTERMOVEVELOCITY = 0x60,
	STAT_ITEM_NONCLASSSKILL = 0x61,
	STAT_STATE = 0x62,
	STAT_ITEM_FASTERGETHITRATE = 0x63,
	STAT_MONSTER_PLAYERCOUNT = 0x64,
	STAT_SKILL_POISON_OVERRIDE_LENGTH = 0x65,
	STAT_ITEM_FASTERBLOCKRATE = 0x66,
	STAT_SKILL_BYPASS_UNDEAD = 0x67,
	STAT_SKILL_BYPASS_DEMONS = 0x68,
	STAT_ITEM_FASTERCASTRATE = 0x69,
	STAT_SKILL_BYPASS_BEASTS = 0x6A,
	STAT_ITEM_SINGLESKILL = 0x6B,
	STAT_ITEM_RESTINPEACE = 0x6C,
	STAT_CURSE_RESISTANCE = 0x6D,
	STAT_ITEM_POISONLENGTHRESIST = 0x6E,
	STAT_ITEM_NORMALDAMAGE = 0x6F,
	STAT_ITEM_HOWL = 0x70,
	STAT_ITEM_STUPIDITY = 0x71,
	STAT_ITEM_DAMAGETOMANA = 0x72,
	STAT_ITEM_IGNORETARGETAC = 0x73,
	STAT_ITEM_FRACTIONALTARGETAC = 0x74,
	STAT_ITEM_PREVENTHEAL = 0x75,
	STAT_ITEM_HALFFREEZEDURATION = 0x76,
	STAT_ITEM_TOHIT_PERCENT = 0x77,
	STAT_ITEM_DAMAGETARGETAC = 0x78,
	STAT_ITEM_DEMONDAMAGE_PERCENT = 0x79,
	STAT_ITEM_UNDEADDAMAGE_PERCENT = 0x7A,
	STAT_ITEM_DEMON_TOHIT = 0x7B,
	STAT_ITEM_UNDEAD_TOHIT = 0x7C,
	STAT_ITEM_THROWABLE = 0x7D,
	STAT_ITEM_ELEMSKILL = 0x7E,
	STAT_ITEM_ALLSKILLS = 0x7F,
	STAT_ITEM_ATTACKERTAKESLIGHTDAMAGE = 0x80,
	STAT_IRONMAIDEN_LEVEL = 0x81,
	STAT_LIFETAP_LEVEL = 0x82,
	STAT_THORNS_PERCENT = 0x83,
	STAT_BONEARMOR = 0x84,
	STAT_BONEARMORMAX = 0x85,
	STAT_ITEM_FREEZE = 0x86,
	STAT_ITEM_OPENWOUNDS = 0x87,
	STAT_ITEM_CRUSHINGBLOW = 0x88,
	STAT_ITEM_KICKDAMAGE = 0x89,
	STAT_ITEM_MANAAFTERKILL = 0x8A,
	STAT_ITEM_HEALAFTERDEMONKILL = 0x8B,
	STAT_ITEM_EXTRABLOOD = 0x8C,
	STAT_ITEM_DEADLYSTRIKE = 0x8D,
	STAT_ITEM_ABSORBFIRE_PERCENT = 0x8E,
	STAT_ITEM_ABSORBFIRE = 0x8F,
	STAT_ITEM_ABSORBLIGHT_PERCENT = 0x90,
	STAT_ITEM_ABSORBLIGHT = 0x91,
	STAT_ITEM_ABSORBMAGIC_PERCENT = 0x92,
	STAT_ITEM_ABSORBMAGIC = 0x93,
	STAT_ITEM_ABSORBCOLD_PERCENT = 0x94,
	STAT_ITEM_ABSORBCOLD = 0x95,
	STAT_ITEM_SLOW = 0x96,
	STAT_ITEM_AURA = 0x97,
	STAT_ITEM_INDESCTRUCTIBLE = 0x98,
	STAT_ITEM_CANNOTBEFROZEN = 0x99,
	STAT_ITEM_STAMINADRAINPCT = 0x9A,
	STAT_ITEM_REANIMATE = 0x9B,
	STAT_ITEM_PIERCE = 0x9C,
	STAT_ITEM_MAGICARROW = 0x9D,
	STAT_ITEM_EXPLOSIVEARROW = 0x9E,
	STAT_ITEM_THROW_MINDAMAGE = 0x9F,
	STAT_ITEM_THROW_MAXDAMAGE = 0xA0,
	STAT_SKILL_HANDOFATHENA = 0xA1,
	STAT_SKILL_STAMINAPERCENT = 0xA2,
	STAT_SKILL_PASSIVE_STAMINAPERCENT = 0xA3,
	STAT_SKILL_CONCENTRATION = 0xA4,
	STAT_SKILL_ENCHANT = 0xA5,
	STAT_SKILL_PIERCE = 0xA6,
	STAT_SKILL_CONVICTION = 0xA7,
	STAT_SKILL_CHILLINGARMOR = 0xA8,
	STAT_SKILL_FRENZY = 0xA9,
	STAT_SKILL_DECREPIFY = 0xAA,
	STAT_SKILL_ARMOR_PERCENT = 0xAB,
	STAT_ALIGNMENT = 0xAC,
	STAT_TARGET0 = 0xAD,
	STAT_TARGET1 = 0xAE,
	STAT_GOLDLOST = 0xAF,
	STAT_CONVERSION_LEVEL = 0xB0,
	STAT_CONVERSION_MAXHP = 0xB1,
	STAT_UNIT_DOOVERLAY = 0xB2,
	STAT_ATTACK_VS_MONTYPE = 0xB3,
	STAT_DAMAGE_VS_MONTYPE = 0xB4,
	STAT_FADE = 0xB5,
	STAT_ARMOR_OVERRIDE_PERCENT = 0xB6,
	STAT_UNUSED183 = 0xB7,
	STAT_UNUSED184 = 0xB8,
	STAT_UNUSED185 = 0xB9,
	STAT_UNUSED186 = 0xBA,
	STAT_UNUSED187 = 0xBB,
	STAT_ITEM_ADDSKILL_TAB = 0xBC,
	STAT_UNUSED189 = 0xBD,
	STAT_UNUSED190 = 0xBE,
	STAT_UNUSED191 = 0xBF,
	STAT_UNUSED192 = 0xC0,
	STAT_UNUSED193 = 0xC1,
	STAT_ITEM_NUMSOCKETS = 0xC2,
	STAT_ITEM_SKILLONATTACK = 0xC3,
	STAT_ITEM_SKILLONKILL = 0xC4,
	STAT_ITEM_SKILLONDEATH = 0xC5,
	STAT_ITEM_SKILLONHIT = 0xC6,
	STAT_ITEM_SKILLONLEVELUP = 0xC7,
	STAT_UNUSED200 = 0xC8,
	STAT_ITEM_SKILLONGETHIT = 0xC9,
	STAT_UNUSED202 = 0xCA,
	STAT_UNUSED203 = 0xCB,
	STAT_ITEM_CHARGED_SKILL = 0xCC,
	STAT_UNUSED204 = 0xCD,
	STAT_UNUSED205 = 0xCE,
	STAT_UNUSED206 = 0xCF,
	STAT_UNUSED207 = 0xD0,
	STAT_UNUSED208 = 0xD1,
	STAT_UNUSED209 = 0xD2,
	STAT_UNUSED210 = 0xD3,
	STAT_UNUSED211 = 0xD4,
	STAT_UNUSED212 = 0xD5,
	STAT_ITEM_ARMOR_PERLEVEL = 0xD6,
	STAT_ITEM_ARMORPERCENT_PERLEVEL = 0xD7,
	STAT_ITEM_HP_PERLEVEL = 0xD8,
	STAT_ITEM_MANA_PERLEVEL = 0xD9,
	STAT_ITEM_MAXDAMAGE_PERLEVEL = 0xDA,
	STAT_ITEM_MAXDAMAGE_PERCENT_PERLEVEL = 0xDB,
	STAT_ITEM_STRENGTH_PERLEVEL = 0xDC,
	STAT_ITEM_DEXTERITY_PERLEVEL = 0xDD,
	STAT_ITEM_ENERGY_PERLEVEL = 0xDE,
	STAT_ITEM_VITALITY_PERLEVEL = 0xDF,
	STAT_ITEM_TOHIT_PERLEVEL = 0xE0,
	STAT_ITEM_TOHITPERCENT_PERLEVEL = 0xE1,
	STAT_ITEM_COLD_DAMAGEMAX_PERLEVEL = 0xE2,
	STAT_ITEM_FIRE_DAMAGEMAX_PERLEVEL = 0xE3,
	STAT_ITEM_LTNG_DAMAGEMAX_PERLEVEL = 0xE4,
	STAT_ITEM_POIS_DAMAGEMAX_PERLEVEL = 0xE5,
	STAT_ITEM_RESIST_COLD_PERLEVEL = 0xE6,
	STAT_ITEM_RESIST_FIRE_PERLEVEL = 0xE7,
	STAT_ITEM_RESIST_LTNG_PERLEVEL = 0xE8,
	STAT_ITEM_RESIST_POIS_PERLEVEL = 0xE9,
	STAT_ITEM_ABSORB_COLD_PERLEVEL = 0xEA,
	STAT_ITEM_ABSORB_FIRE_PERLEVEL = 0xEB,
	STAT_ITEM_ABSORB_LTNG_PERLEVEL = 0xEC,
	STAT_ITEM_ABSORB_POIS_PERLEVEL = 0xED,
	STAT_ITEM_THORNS_PERLEVEL = 0xEE,
	STAT_ITEM_FIND_GOLD_PERLEVEL = 0xEF,
	STAT_ITEM_FIND_MAGIC_PERLEVEL = 0xF0,
	STAT_ITEM_REGENSTAMINA_PERLEVEL = 0xF1,
	STAT_ITEM_STAMINA_PERLEVEL = 0xF2,
	STAT_ITEM_DAMAGE_DEMON_PERLEVEL = 0xF3,
	STAT_ITEM_DAMAGE_UNDEAD_PERLEVEL = 0xF4,
	STAT_ITEM_TOHIT_DEMON_PERLEVEL = 0xF5,
	STAT_ITEM_TOHIT_UNDEAD_PERLEVEL = 0xF6,
	STAT_ITEM_CRUSHINGBLOW_PERLEVEL = 0xF7,
	STAT_ITEM_OPENWOUNDS_PERLEVEL = 0xF8,
	STAT_ITEM_KICK_DAMAGE_PERLEVEL = 0xF9,
	STAT_ITEM_DEADLYSTRIKE_PERLEVEL = 0xFA,
	STAT_ITEM_FIND_GEMS_PERLEVEL = 0xFB,
	STAT_ITEM_REPLENISH_DURABILITY = 0xFC,
	STAT_ITEM_REPLENISH_QUANTITY = 0xFD,
	STAT_ITEM_EXTRA_STACK = 0xFE,
	STAT_ITEM_FIND_ITEM = 0xFF,
	STAT_ITEM_SLASH_DAMAGE = 0x100,
	STAT_ITEM_SLASH_DAMAGE_PERCENT = 0x101,
	STAT_ITEM_CRUSH_DAMAGE = 0x102,
	STAT_ITEM_CRUSH_DAMAGE_PERCENT = 0x103,
	STAT_ITEM_THRUST_DAMAGE = 0x104,
	STAT_ITEM_THRUST_DAMAGE_PERCENT = 0x105,
	STAT_ITEM_ABSORB_SLASH = 0x106,
	STAT_ITEM_ABSORB_CRUSH = 0x107,
	STAT_ITEM_ABSORB_THRUST = 0x108,
	STAT_ITEM_ABSORB_SLASH_PERCENT = 0x109,
	STAT_ITEM_ABSORB_CRUSH_PERCENT = 0x10A,
	STAT_ITEM_ABSORB_THRUST_PERCENT = 0x10B,
	STAT_ITEM_ARMOR_BYTIME = 0x10C,
	STAT_ITEM_ARMORPERCENT_BYTIME = 0x10D,
	STAT_ITEM_HP_BYTIME = 0x10E,
	STAT_ITEM_MANA_BYTIME = 0x10F,
	STAT_ITEM_MAXDAMAGE_BYTIME = 0x110,
	STAT_ITEM_MAXDAMAGE_PERCENT_BYTIME = 0x111,
	STAT_ITEM_STRENGTH_BYTIME = 0x112,
	STAT_ITEM_DEXTERITY_BYTIME = 0x113,
	STAT_ITEM_ENERGY_BYTIME = 0x114,
	STAT_ITEM_VITALITY_BYTIME = 0x115,
	STAT_ITEM_TOHIT_BYTIME = 0x116,
	STAT_ITEM_TOHITPERCENT_BYTIME = 0x117,
	STAT_ITEM_COLD_DAMAGEMAX_BYTIME = 0x118,
	STAT_ITEM_FIRE_DAMAGEMAX_BYTIME = 0x119,
	STAT_ITEM_LTNG_DAMAGEMAX_BYTIME = 0x11A,
	STAT_ITEM_POIS_DAMAGEMAX_BYTIME = 0x11B,
	STAT_ITEM_RESIST_COLD_BYTIME = 0x11C,
	STAT_ITEM_RESIST_FIRE_BYTIME = 0x11D,
	STAT_ITEM_RESIST_LTNG_BYTIME = 0x11E,
	STAT_ITEM_RESIST_POIS_BYTIME = 0x11F,
	STAT_ITEM_ABSORB_COLD_BYTIME = 0x120,
	STAT_ITEM_ABSORB_FIRE_BYTIME = 0x121,
	STAT_ITEM_ABSORB_LTNG_BYTIME = 0x122,
	STAT_ITEM_ABSORB_POIS_BYTIME = 0x123,
	STAT_ITEM_FIND_GOLD_BYTIME = 0x124,
	STAT_ITEM_FIND_MAGIC_BYTIME = 0x125,
	STAT_ITEM_REGENSTAMINA_BYTIME = 0x126,
	STAT_ITEM_STAMINA_BYTIME = 0x127,
	STAT_ITEM_DAMAGE_DEMON_BYTIME = 0x128,
	STAT_ITEM_DAMAGE_UNDEAD_BYTIME = 0x129,
	STAT_ITEM_TOHIT_DEMON_BYTIME = 0x12A,
	STAT_ITEM_TOHIT_UNDEAD_BYTIME = 0x12B,
	STAT_ITEM_CRUSHINGBLOW_BYTIME = 0x12C
};

class CharacterStats {
	std::map<int, std::pair<int, std::string>> stats;

	public:
	void addStat(int id, int val, std::string str) {
		stats[id] = std::make_pair(val, str);
	}
	std::string getStatText(int id) {
		return stats[id].second;
	}
	int getStat(int id) {
		return stats[id].first;
	}
	RECT getStatInvPos(int id) {
		RECT ret = {0, 0, 0, 0};
		if (id == 0) ret = {77, 83, 114, 98};
		else if (id == STAT_ENERGY) ret = {77, 293, 114, 308};
		else if (id == STAT_DEXTERITY) ret = {77, 145, 114, 160};
		else if (id == STAT_VITALITY) ret = {77, 231, 114, 246};
		else if (id == STAT_HITPOINTS) ret = {273, 256, 309, 270};
		else if (id == STAT_MAXHP) ret = {232, 256, 268, 270};
		else if (id == STAT_MANA) ret = {273, 294, 309, 308};
		else if (id == STAT_MAXMANA) ret = {232, 294, 268, 308};
		else if (id == STAT_STAMINA) ret = {273, 232, 309, 246};
		else if (id == STAT_MAXSTAMINA) ret = {232, 232, 268, 246};
		else if (id == STAT_LEVEL) ret = {12, 44, 53, 64};
		else if (id == STAT_EXPERIENCE) ret = {66, 44, 181, 64};
		else if (id == STAT_ARMORCLASS) ret = {272, 194, 309, 208};
		else if (id == STAT_FIRERESIST) ret = {272, 333, 309, 347};
		else if (id == STAT_LIGHTRESIST) ret = {272, 381, 309, 395};
		else if (id == STAT_COLDRESIST) ret = {272, 357, 309, 371};
		else if (id == STAT_POISONRESIST) ret = {272, 405, 309, 419};
		return ret;
	}
	std::string getCharacterClassStr() {
		switch (stats[-1].first) {
			case 0: return "Amazon";
			case 1: return "Sorceress";
			case 2: return "Necromancer";
			case 3: return "Paladin";
			case 4: return "Barbarian";
			case 5: return "Druid";
			case 6: return "Assassin";
		}
		return "";
	}
};
struct InvData {
	int x;
	int y;
	int w;
	int h;
	std::string inv;
	std::string invu;
	std::string invs;
};
bool operator==(const InvData& lhs, const InvData& rhs);
struct ItemCode {
	std::string basetype;//weapon, armor...
	std::string subtype;//axe, shield...
	std::string type;//battle axe, buckler...
	std::string code;//btx, buc...
	int tier;//normal, exceptional, or elite, otherwise zero
};
struct ItemData {
	std::string name;
	std::string quality;
	ItemCode icode;
	InvData invdata;
	std::vector<std::string> basestats;
	std::vector<std::string> stats;

	std::string realm;
	std::string account;
	std::string character;
	std::string store;

	int trade_depth = 3;
	bool is_trade = false;
};
bool operator==(const ItemData& lhs, const ItemData& rhs);
enum {
	CMP_ACCOUNT = 1,
	CMP_CHARACTER = 3,
	CMP_STORE = 7,
	CMP_INVPOS = 15,
};
bool itemcmp(const ItemData& lhs, const ItemData& rhs, int cmp_depth = CMP_INVPOS);

class CharacterData {
	public:
	std::string realm;
	std::string account;
	std::string character;
	CharacterStats character_stats;
	std::vector<ItemData> cube_items;
	std::vector<ItemData> body_items;
	std::vector<ItemData> stash_items;
	std::vector<ItemData> merc_items;
	std::vector<ItemData> inv_items;

	std::string wp_norm;
	std::string wp_night;
	std::string wp_hell;

	std::string quest_norm;
	std::string quest_night;
	std::string quest_hell;

	UINT getItemsCount();
	ItemData* getItem(UINT pos);
};

void getItemDataFromCode(std::string code, ItemData* item, bool gettype = false);

struct GameStructInfo {
	BYTE _1[0x1B];					//0x00
	char szGameName[0x18];			//0x1B
	char szGameServerIp[0x56];		//0x33
	char szAccountName[0x30];		//0x89
	char szCharName[0x18];			//0xB9
	char szRealmName[0x18];			//0xD1
	BYTE _2[0x158];					//0xE9
	char szGamePassword[0x18];		//0x241
};

std::vector<ItemData>* get_item_store(std::string realm, std::string account, std::string character, std::string store);
std::vector<ItemData>* get_item_store(const ItemData* item_in_store);
CharacterData* get_character(std::string realm, std::string account, std::string character);
CharacterData* get_character(const ItemData* item);
