#include <iostream>
#include <Windows.h>
#include <conio.h>
#include <iomanip>
#include <time.h>
#include <fstream>
#include <algorithm>
#include <functional>
#include <string>
#include <sstream>
#include <vector>
#include <deque>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>

#include "C:/CPPlibs/common/f/common.h"
#include "bignum.h"

typedef unsigned long long ull;
typedef long long ll;

using namespace std;

#define SOLVE(a) { \
		/*cout << "Solving " << #a << "...";*/ \
		double time = static_cast<double>(clock()); \
		unsigned long long result = a(); \
		double time2 = static_cast<double>(clock()); \
		/*for (int __a = 0; __a < 80; __a++) cout << '\r';*/ \
		cout << "Answer for " << #a << " is: " << result; \
		double finaltime = time2 - time; \
		std::string sfinaltime = ((finaltime > 1000.0) ? milliseconds_to_hms((int)finaltime) : double_to_str(finaltime) + " ms"); \
		cout << " (" << sfinaltime  << ")\n"; \
	}

#define SOLVE_SIGNED(a) { \
		/*cout << "Solving " << #a << "...";*/ \
		double time = static_cast<double>(clock()); \
		long long result = a(); \
		double time2 = static_cast<double>(clock()); \
		/*for (int __a = 0; __a < 80; __a++) cout << '\r';*/ \
		cout << "Answer for " << #a << " is: " << result; \
		double finaltime = time2 - time; \
		std::string sfinaltime = ((finaltime > 1000.0) ? milliseconds_to_hms((int)finaltime) : double_to_str(finaltime) + " ms"); \
		cout << " (" << sfinaltime  << ")\n"; \
	}

ull Problem_1() {
	ull answer = 0;
	for (UINT i = 3; i < 1000; i++) {
		if (i % 3 == 0 || i % 5 == 0)
			answer += i;
	}
	return answer;
}
ull Problem_2() {
	ull answer = 0;

	int a = 1, b = 1, c = 0;
	while (c < 4000000) {
		c = a + b;
		a = b;
		b = c;
		if (c % 2 == 0)
			answer += c;
	}

	return answer;
}
ull Problem_3() {
	ull answer = 0;

	ull max = (ull)sqrt(600851475143) + 1;
	for (ull i = max; !answer; i -= 2) {
		if (600851475143 % i == 0 && is_prime(i))
			answer = i;
	}

	return answer;
}
ull Problem_4() {
	auto is_pal = [](UINT n) -> bool{
		UINT len = (UINT)log10(n) + 1;
		int t = n;
		for (UINT i = 0; i < len / 2; i++) {
			UINT first = n / (UINT)pow(10, len - (i + 1)) % 10;
			UINT last = t % 10;
			if (first != last)
				return false;
			t /= 10;
		}
		return true;
	};

	ull answer = 0;
	
	for (UINT i = 999; i > 99; i--) {
		for (UINT j = 999; j > 99; j--) {
			int res = i * j;
			if (is_pal(res))
				answer = res > answer ? res : answer;
		}
	}

	return answer;
}
ull Problem_5() {
	for (UINT i = 20;; i += 20) {
		if (i % 20 == 0
			&& i % 19 == 0 
			&& i % 18 == 0 
			&& i % 17 == 0 
			&& i % 16 == 0
			&& i % 15 == 0 
			&& i % 14 == 0 
			&& i % 13 == 0 
			&& i % 12 == 0 
			&& i % 11 == 0 
			&& i % 9 == 0)
			return i;
	}
	return 0;
}
ull Problem_6() {
	ull ssum = 0, sum = 0;
	for (UINT i = 1; i <= 100; i++)
		sum += i;
	for (UINT i = 1; i <= 100; i++) 
		ssum += i * i;
	return sum * sum - ssum;
}
ull Problem_7() {
	ull answer = 0;

	UINT count = 1;
	for (answer = 3; count < 10001; answer += 2) {
		if (is_prime(answer))
			count++;
	}

	return answer - 2;
}
ull Problem_8() {
	ull answer = 0;

	string s = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

	for (UINT i = 0; i < s.size() - 11; i++) {
		ull prod = 1;
		for (UINT j = 0; j < 13; j++) {
			prod *= (s[i + j] - 48);
		}
		answer = prod > answer ? prod : answer;
	}

	return answer;
}
ull Problem_9() {
	for (UINT i = 1; i < 250; i++) {
		for (UINT j = i; j + i < 700; j++) {
			int k = 1000 - i - j;
			if (i * i + j * j == k * k)
				return i * j * k;
		}
	}

	return 0;
}
ull Problem_10() {
	ull answer = 0;

	for (UINT i = 3; i < 2000000; i += 2) {
		if (is_prime(i))
			answer += i;
	}

	return answer + 2;
}
ull Problem_11() {
	ull answer = 0;

	vector<vector<int>> grid = {
		{8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8},
		{49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0},
		{81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65},
		{52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91},
		{22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80},
		{24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50},
		{32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70},
		{67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21},
		{24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72},
		{21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95},
		{78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92},
		{16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57},
		{86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58},
		{19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40},
		{4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66},
		{88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69},
		{4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36},
		{20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16},
		{20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54},
		{1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48}
	};

	//across
	for (UINT i = 0; i < grid.size(); i++) {
		for (UINT j = 0; j < grid[i].size() - 3; j++) {
			int prod = grid[i][j] * grid[i][j + 1] * grid[i][j + 2] * grid[i][j + 3];
			answer = prod > answer ? prod : answer;
		}
	}
	//down
	for (UINT i = 0; i < grid.size() - 3; i++) {
		for (UINT j = 0; j < grid[i].size(); j++) {
			int prod = grid[i][j] * grid[i + 1][j] * grid[i + 2][j] * grid[i + 3][j];
			answer = prod > answer ? prod : answer;
		}
	}
	//\diag
	for (UINT i = 0; i < grid.size() - 3; i++) {
		for (UINT j = 0; j < grid[i].size() - 3; j++) {
			int prod = grid[i][j] * grid[i + 1][j + 1] * grid[i + 2][j + 2] * grid[i + 3][j + 3];
			answer = prod > answer ? prod : answer;
		}
	}
	///diag
	for (UINT i = 0; i < grid.size() - 3; i++) {
		for (UINT j = 3; j < grid[i].size(); j++) {
			int prod = grid[i][j] * grid[i + 1][j - 1] * grid[i + 2][j - 2] * grid[i + 3][j - 3];
			answer = prod > answer ? prod : answer;
		}
	}

	return answer;
}
ull Problem_12() {
	ull answer = 0;

	auto get_fact_count = [](ull n) {
		ull ub = (ull)sqrt(n);
		ull c = ub * ub == n ? 1 : 2;

		for (ull i = 2; i <= ub; i++) {
			c += n % i == 0 ? 2 : 0;
		}

		return c;
	};


	for (ull i = 10000;; i++) {
		ull n = i * (i + 1) / 2;
		
		if (get_fact_count(n) > 500)
			return n;
	}

	return answer;
}
ull Problem_13() {
	vector<double> nums = {
		37107287533902102798797998220837590246510135740250.0,
		46376937677490009712648124896970078050417018260538.0,
		74324986199524741059474233309513058123726617309629.0,
		91942213363574161572522430563301811072406154908250.0,
		23067588207539346171171980310421047513778063246676.0,
		89261670696623633820136378418383684178734361726757.0,
		28112879812849979408065481931592621691275889832738.0,
		44274228917432520321923589422876796487670272189318.0,
		47451445736001306439091167216856844588711603153276.0,
		70386486105843025439939619828917593665686757934951.0,
		62176457141856560629502157223196586755079324193331.0,
		64906352462741904929101432445813822663347944758178.0,
		92575867718337217661963751590579239728245598838407.0,
		58203565325359399008402633568948830189458628227828.0,
		80181199384826282014278194139940567587151170094390.0,
		35398664372827112653829987240784473053190104293586.0,
		86515506006295864861532075273371959191420517255829.0,
		71693888707715466499115593487603532921714970056938.0,
		54370070576826684624621495650076471787294438377604.0,
		53282654108756828443191190634694037855217779295145.0,
		36123272525000296071075082563815656710885258350721.0,
		45876576172410976447339110607218265236877223636045.0,
		17423706905851860660448207621209813287860733969412.0,
		81142660418086830619328460811191061556940512689692.0,
		51934325451728388641918047049293215058642563049483.0,
		62467221648435076201727918039944693004732956340691.0,
		15732444386908125794514089057706229429197107928209.0,
		55037687525678773091862540744969844508330393682126.0,
		18336384825330154686196124348767681297534375946515.0,
		80386287592878490201521685554828717201219257766954.0,
		78182833757993103614740356856449095527097864797581.0,
		16726320100436897842553539920931837441497806860984.0,
		48403098129077791799088218795327364475675590848030.0,
		87086987551392711854517078544161852424320693150332.0,
		59959406895756536782107074926966537676326235447210.0,
		69793950679652694742597709739166693763042633987085.0,
		41052684708299085211399427365734116182760315001271.0,
		65378607361501080857009149939512557028198746004375.0,
		35829035317434717326932123578154982629742552737307.0,
		94953759765105305946966067683156574377167401875275.0,
		88902802571733229619176668713819931811048770190271.0,
		25267680276078003013678680992525463401061632866526.0,
		36270218540497705585629946580636237993140746255962.0,
		24074486908231174977792365466257246923322810917141.0,
		91430288197103288597806669760892938638285025333403.0,
		34413065578016127815921815005561868836468420090470.0,
		23053081172816430487623791969842487255036638784583.0,
		11487696932154902810424020138335124462181441773470.0,
		63783299490636259666498587618221225225512486764533.0,
		67720186971698544312419572409913959008952310058822.0,
		95548255300263520781532296796249481641953868218774.0,
		76085327132285723110424803456124867697064507995236.0,
		37774242535411291684276865538926205024910326572967.0,
		23701913275725675285653248258265463092207058596522.0,
		29798860272258331913126375147341994889534765745501.0,
		18495701454879288984856827726077713721403798879715.0,
		38298203783031473527721580348144513491373226651381.0,
		34829543829199918180278916522431027392251122869539.0,
		40957953066405232632538044100059654939159879593635.0,
		29746152185502371307642255121183693803580388584903.0,
		41698116222072977186158236678424689157993532961922.0,
		62467957194401269043877107275048102390895523597457.0,
		23189706772547915061505504953922979530901129967519.0,
		86188088225875314529584099251203829009407770775672.0,
		11306739708304724483816533873502340845647058077308.0,
		82959174767140363198008187129011875491310547126581.0,
		97623331044818386269515456334926366572897563400500.0,
		42846280183517070527831839425882145521227251250327.0,
		55121603546981200581762165212827652751691296897789.0,
		32238195734329339946437501907836945765883352399886.0,
		75506164965184775180738168837861091527357929701337.0,
		62177842752192623401942399639168044983993173312731.0,
		32924185707147349566916674687634660915035914677504.0,
		99518671430235219628894890102423325116913619626622.0,
		73267460800591547471830798392868535206946944540724.0,
		76841822524674417161514036427982273348055556214818.0,
		97142617910342598647204516893989422179826088076852.0,
		87783646182799346313767754307809363333018982642090.0,
		10848802521674670883215120185883543223812876952786.0,
		71329612474782464538636993009049310363619763878039.0,
		62184073572399794223406235393808339651327408011116.0,
		66627891981488087797941876876144230030984490851411.0,
		60661826293682836764744779239180335110989069790714.0,
		85786944089552990653640447425576083659976645795096.0,
		66024396409905389607120198219976047599490197230297.0,
		64913982680032973156037120041377903785566085089252.0,
		16730939319872750275468906903707539413042652315011.0,
		94809377245048795150954100921645863754710598436791.0,
		78639167021187492431995700641917969777599028300699.0,
		15368713711936614952811305876380278410754449733078.0,
		40789923115535562561142322423255033685442488917353.0,
		44889911501440648020369068063960672322193204149535.0,
		41503128880339536053299340368006977710650566631954.0,
		81234880673210146739058568557934581403627822703280.0,
		82616570773948327592232845941706525094512325230608.0,
		22918802058777319719839450180888072429661980811197.0,
		77158542502016545090413245809786882778948721859617.0,
		72107838435069186155435662884062257473692284509516.0,
		20849603980134001723930671666823555245252804609722.0,
		53503534226472524250874054075591789781264330331690.0
	};

	double sum = 0;
	for (int i = 0; i < (int)nums.size(); i++) 
		sum += nums[i];

	return (ull)(sum / pow(10, floor(log10(sum)) - 9));
}
ull Problem_14() {
	ull answer = 0;

	ull N = 1000000;

	vector<ull> r;
	r.resize((UINT)N);

	ull highest = 0;
	for (ull i = 2; i < N; i++) {
		ull count = 1;
		ull t = i;
		do {
			t = t % 2 == 0 ? t / 2 : 3 * t + 1;
			
			if (t < N && r.at((UINT)t) > 0) {
				count += (ull)r.at((UINT)t);
				break;
			}			

			count++;
		} while (t > 1);

		r[(UINT)i] = count;

		if (count > highest) {
			highest = count;
			answer = (ull)i;
		}
	}

	return answer;
}
ull Problem_15() {
	auto fact = [](double n) -> double {
		for (int i = (int)n - 1; i > 1; i--) {
			n *= (double)i;
		}
		return n;
	};

	auto nCr = [&](double n, double r) {
		return fact(n) / (fact(r) * fact(n - r));
	};

	int N = 20;

	return (ull)nCr(N * 2, N);
}
ull Problem_16() {
	ull answer = 0;

	bignum bn = 2;
	for (int i = 1; i < 1000; i++) 
		bn *= 2;
	
	string sn = bn.str();
	for (int i = 0; i < (int)sn.size(); i++) 
		answer += sn[i] - 48;

	return answer;
}
ull Problem_17() {
	const vector<pair<ull, string>> x = {
		{1,"one"}, {2,"two"}, {3,"three"}, {4,"four"}, {5,"five"}, {6,"six"}, {7,"seven"}, {8,"eight"},	{9,"nine"},
		{10, "ten"}, {11, "eleven"}, {12, "twelve"}, {13, "thirteen"}, {14, "fourteen"}, {15, "fifteen"}, {16, "sixteen"}, {17, "seventeen"}, {18, "eighteen"}, {19, "nineteen"},
		{20, "twenty"}, {30, "thirty"}, {40, "forty"}, {50, "fifty"}, {60, "sixty"}, {70, "seventy"}, {80, "eighty"}, {90, "ninety"},
		{100, "hundred"},
		{1000, "thousand"},
		{1000000, "million"},
		{1000000000, "billion"},
		{1000000000000, "trillion"},
		{1000000000000000, "quadrillion"},
		{1000000000000000000, "quintillion"},
	};

	function<string(ull, bool)> num_to_eng = [&](ull n, bool spaces) -> string {
		string ret = "";

		bool can_and = false;

		for (int p = x.size() - 1; n > 0 && p >= 0; p--) {
			int c = n / x[p].first;
			if (c > 0) {
				n -= c * x[p].first;

				if (x[p].first >= 100) {
					can_and = true;
					if (c > 20)
						ret += num_to_eng(c, spaces);
					else
						ret += x[c - 1].second + (spaces ? " " : "");
				}
				else if (can_and) {
					can_and = false;
					ret += (spaces ? "and " : "and");
				}
				ret += x[p].second + (spaces ? " " : "");
			}
		}

		return ret;
	};

	ull answer = 0;

	for (int i = 1; i <= 1000; i++) 
		answer += num_to_eng(i, false).length();

	return answer;
}
ull Problem_18() {
	vector<vector<int>> tri = {
		{75},
		{95, 64},
		{17, 47, 82},
		{18, 35, 87, 10},
		{20, 4, 82, 47, 65},
		{19, 1, 23, 75, 3, 34},
		{88, 2, 77, 73, 7, 63, 67},
		{99, 65, 4, 28, 6, 16, 70, 92},
		{41, 41, 26, 56, 83, 40, 80, 70, 33},
		{41, 48, 72, 33, 47, 32, 37, 16, 94, 29},
		{53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14},
		{70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57},
		{91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48},
		{63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31},
		{04, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23}
							
	};

	vector<vector<int>> tric = tri;

	for (int i = (int)tri.size() - 2; i >= 0; i--) {
		for (UINT j = 0; j < tri[i].size(); j++) {
			tri[i][j] += tri[i + 1][j] > tri[i + 1][j + 1] ? tri[i + 1][j] : tri[i + 1][j + 1];
		}
	}
/*
	int d = 0;
	vector<int> solution = {tric[0][0]};
	for (int i = 0; i < tri.size() - 1; i++) {
		if (tri[i + 1][d] > tri[i + 1][d + 1]) {
			solution.push_back(tric[i + 1][d]);
		}
		else {
			solution.push_back(tric[i + 1][++d]);
		}
	}

	for (int i = 0; i < solution.size(); i++) {
		cout << solution[i] << " ";
	}
	cout << tri[0][0] << '\n';*/

	return tri[0][0];
}
ull Problem_19() {
	ull answer = 0;

	int d = 0;
	int wd = 1;
	int y = 1901;

	while (y < 2001) {
		bool l = (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0) ? 1 : 0;
		if (wd == 0)
			answer++;
		while (d < 365 + l) {
			if (wd == 0) {
				if (d == 31 + l ||
					d == 59 + l ||
					d == 90 + l ||
					d == 120 + l ||
					d == 151 + l ||
					d == 181 + l ||
					d == 212 + l ||
					d == 243 + l ||
					d == 273 + l ||
					d == 304 + l ||
					d == 334 + l) {
					answer++;
				}				
			}
			++wd %= 7;
			d++;
		}
		d = 0;
		y++;
	}

	return answer;
}
ull Problem_20() {
	bignum num = 1;
	
	for (int i = 2; i <= 100; i++) 
		num *= i;

	ull answer = 0;
	string snum = num.str();
	for (int i = 0; i < (int)snum.length(); i++) 
		answer += snum[i] - 48;

	return answer;
}
ull Problem_21() {
	ull answer = 0;

	map<int, int> p;

	for (int i = 1; i < 10000; i++) {
		int u = (int)sqrt(i);
		int r = 1;
		for (int j = 2; j <= u; j++) {
			if (i % j == 0) {
				int h = i / j;
				r += (j + (j == h ? 0 : h));
			}
		}
		if (i != r)
			p[i] = r;
	}

	for (auto a : p) {	
		if (a.first == p[a.second]) 
			answer += a.first;
	}

	return answer;
}
ull Problem_22() {
	ull answer = 0;

	/*vector<string> names;

	ifstream file;
	file.open("names.txt");
	string snames;
	file >> snames;
	file.close();

	names = split_str(snames, "\",\"");

	names[0].erase(0, 1);
	names[names.size() - 1].pop_back();

	sort(names.begin(), names.end());

	ofstream f2;
	f2.open("sorted_names.txt");
	for (int i = 0; i < names.size(); i++) {
		f2 << "\"" << names[i] << "\", ";
		if ((i + 1) % 10 == 0)
			f2 << '\n';
	}
	f2 << '\n';
	f2.close();*/

	vector<string> names = {
		"AARON", "ABBEY", "ABBIE", "ABBY", "ABDUL", "ABE", "ABEL", "ABIGAIL", "ABRAHAM", "ABRAM",
		"ADA", "ADAH", "ADALBERTO", "ADALINE", "ADAM", "ADAN", "ADDIE", "ADELA", "ADELAIDA", "ADELAIDE",
		"ADELE", "ADELIA", "ADELINA", "ADELINE", "ADELL", "ADELLA", "ADELLE", "ADENA", "ADINA", "ADOLFO",
		"ADOLPH", "ADRIA", "ADRIAN", "ADRIANA", "ADRIANE", "ADRIANNA", "ADRIANNE", "ADRIEN", "ADRIENE", "ADRIENNE",
		"AFTON", "AGATHA", "AGNES", "AGNUS", "AGRIPINA", "AGUEDA", "AGUSTIN", "AGUSTINA", "AHMAD", "AHMED",
		"AI", "AIDA", "AIDE", "AIKO", "AILEEN", "AILENE", "AIMEE", "AISHA", "AJA", "AKIKO",
		"AKILAH", "AL", "ALAINA", "ALAINE", "ALAN", "ALANA", "ALANE", "ALANNA", "ALAYNA", "ALBA",
		"ALBERT", "ALBERTA", "ALBERTHA", "ALBERTINA", "ALBERTINE", "ALBERTO", "ALBINA", "ALDA", "ALDEN", "ALDO",
		"ALEASE", "ALEC", "ALECIA", "ALEEN", "ALEIDA", "ALEISHA", "ALEJANDRA", "ALEJANDRINA", "ALEJANDRO", "ALENA",
		"ALENE", "ALESHA", "ALESHIA", "ALESIA", "ALESSANDRA", "ALETA", "ALETHA", "ALETHEA", "ALETHIA", "ALEX",
		"ALEXA", "ALEXANDER", "ALEXANDRA", "ALEXANDRIA", "ALEXIA", "ALEXIS", "ALFONSO", "ALFONZO", "ALFRED", "ALFREDA",
		"ALFREDIA", "ALFREDO", "ALI", "ALIA", "ALICA", "ALICE", "ALICIA", "ALIDA", "ALINA", "ALINE",
		"ALISA", "ALISE", "ALISHA", "ALISHIA", "ALISIA", "ALISON", "ALISSA", "ALITA", "ALIX", "ALIZA",
		"ALLA", "ALLAN", "ALLEEN", "ALLEGRA", "ALLEN", "ALLENA", "ALLENE", "ALLIE", "ALLINE", "ALLISON",
		"ALLYN", "ALLYSON", "ALMA", "ALMEDA", "ALMETA", "ALONA", "ALONSO", "ALONZO", "ALPHA", "ALPHONSE",
		"ALPHONSO", "ALTA", "ALTAGRACIA", "ALTHA", "ALTHEA", "ALTON", "ALVA", "ALVARO", "ALVERA", "ALVERTA",
		"ALVIN", "ALVINA", "ALYCE", "ALYCIA", "ALYSA", "ALYSE", "ALYSHA", "ALYSIA", "ALYSON", "ALYSSA",
		"AMADA", "AMADO", "AMAL", "AMALIA", "AMANDA", "AMBER", "AMBERLY", "AMBROSE", "AMEE", "AMELIA",
		"AMERICA", "AMI", "AMIE", "AMIEE", "AMINA", "AMIRA", "AMMIE", "AMOS", "AMPARO", "AMY",
		"AN", "ANA", "ANABEL", "ANALISA", "ANAMARIA", "ANASTACIA", "ANASTASIA", "ANDERA", "ANDERSON", "ANDRA",
		"ANDRE", "ANDREA", "ANDREAS", "ANDREE", "ANDRES", "ANDREW", "ANDRIA", "ANDY", "ANETTE", "ANGEL",
		"ANGELA", "ANGELE", "ANGELENA", "ANGELES", "ANGELIA", "ANGELIC", "ANGELICA", "ANGELIKA", "ANGELINA", "ANGELINE",
		"ANGELIQUE", "ANGELITA", "ANGELLA", "ANGELO", "ANGELYN", "ANGIE", "ANGILA", "ANGLA", "ANGLE", "ANGLEA",
		"ANH", "ANIBAL", "ANIKA", "ANISA", "ANISHA", "ANISSA", "ANITA", "ANITRA", "ANJA", "ANJANETTE",
		"ANJELICA", "ANN", "ANNA", "ANNABEL", "ANNABELL", "ANNABELLE", "ANNALEE", "ANNALISA", "ANNAMAE", "ANNAMARIA",
		"ANNAMARIE", "ANNE", "ANNELIESE", "ANNELLE", "ANNEMARIE", "ANNETT", "ANNETTA", "ANNETTE", "ANNICE", "ANNIE",
		"ANNIKA", "ANNIS", "ANNITA", "ANNMARIE", "ANTHONY", "ANTIONE", "ANTIONETTE", "ANTOINE", "ANTOINETTE", "ANTON",
		"ANTONE", "ANTONETTA", "ANTONETTE", "ANTONIA", "ANTONIETTA", "ANTONINA", "ANTONIO", "ANTONY", "ANTWAN", "ANYA",
		"APOLONIA", "APRIL", "APRYL", "ARA", "ARACELI", "ARACELIS", "ARACELY", "ARCELIA", "ARCHIE", "ARDATH",
		"ARDELIA", "ARDELL", "ARDELLA", "ARDELLE", "ARDEN", "ARDIS", "ARDITH", "ARETHA", "ARGELIA", "ARGENTINA",
		"ARIANA", "ARIANE", "ARIANNA", "ARIANNE", "ARICA", "ARIE", "ARIEL", "ARIELLE", "ARLA", "ARLEAN",
		"ARLEEN", "ARLEN", "ARLENA", "ARLENE", "ARLETHA", "ARLETTA", "ARLETTE", "ARLIE", "ARLINDA", "ARLINE",
		"ARLYNE", "ARMAND", "ARMANDA", "ARMANDINA", "ARMANDO", "ARMIDA", "ARMINDA", "ARNETTA", "ARNETTE", "ARNITA",
		"ARNOLD", "ARNOLDO", "ARNULFO", "ARON", "ARRON", "ART", "ARTHUR", "ARTIE", "ARTURO", "ARVILLA",
		"ASA", "ASHA", "ASHANTI", "ASHELY", "ASHLEA", "ASHLEE", "ASHLEIGH", "ASHLEY", "ASHLI", "ASHLIE",
		"ASHLY", "ASHLYN", "ASHTON", "ASIA", "ASLEY", "ASSUNTA", "ASTRID", "ASUNCION", "ATHENA", "AUBREY",
		"AUDIE", "AUDRA", "AUDREA", "AUDREY", "AUDRIA", "AUDRIE", "AUDRY", "AUGUST", "AUGUSTA", "AUGUSTINA",
		"AUGUSTINE", "AUGUSTUS", "AUNDREA", "AURA", "AUREA", "AURELIA", "AURELIO", "AURORA", "AURORE", "AUSTIN",
		"AUTUMN", "AVA", "AVELINA", "AVERY", "AVIS", "AVRIL", "AWILDA", "AYAKO", "AYANA", "AYANNA",
		"AYESHA", "AZALEE", "AZUCENA", "AZZIE", "BABARA", "BABETTE", "BAILEY", "BAMBI", "BAO", "BARABARA",
		"BARB", "BARBAR", "BARBARA", "BARBERA", "BARBIE", "BARBRA", "BARI", "BARNEY", "BARRETT", "BARRIE",
		"BARRY", "BART", "BARTON", "BASIL", "BASILIA", "BEA", "BEATA", "BEATRICE", "BEATRIS", "BEATRIZ",
		"BEAU", "BEAULAH", "BEBE", "BECKI", "BECKIE", "BECKY", "BEE", "BELEN", "BELIA", "BELINDA",
		"BELKIS", "BELL", "BELLA", "BELLE", "BELVA", "BEN", "BENEDICT", "BENITA", "BENITO", "BENJAMIN",
		"BENNETT", "BENNIE", "BENNY", "BENTON", "BERENICE", "BERNA", "BERNADETTE", "BERNADINE", "BERNARD", "BERNARDA",
		"BERNARDINA", "BERNARDINE", "BERNARDO", "BERNEICE", "BERNETTA", "BERNICE", "BERNIE", "BERNIECE", "BERNITA", "BERRY",
		"BERT", "BERTA", "BERTHA", "BERTIE", "BERTRAM", "BERYL", "BESS", "BESSIE", "BETH", "BETHANIE",
		"BETHANN", "BETHANY", "BETHEL", "BETSEY", "BETSY", "BETTE", "BETTIE", "BETTINA", "BETTY", "BETTYANN",
		"BETTYE", "BEULA", "BEULAH", "BEV", "BEVERLEE", "BEVERLEY", "BEVERLY", "BIANCA", "BIBI", "BILL",
		"BILLI", "BILLIE", "BILLY", "BILLYE", "BIRDIE", "BIRGIT", "BLAINE", "BLAIR", "BLAKE", "BLANCA",
		"BLANCH", "BLANCHE", "BLONDELL", "BLOSSOM", "BLYTHE", "BO", "BOB", "BOBBI", "BOBBIE", "BOBBY",
		"BOBBYE", "BOBETTE", "BOK", "BONG", "BONITA", "BONNIE", "BONNY", "BOOKER", "BORIS", "BOYCE",
		"BOYD", "BRAD", "BRADFORD", "BRADLEY", "BRADLY", "BRADY", "BRAIN", "BRANDA", "BRANDE", "BRANDEE",
		"BRANDEN", "BRANDI", "BRANDIE", "BRANDON", "BRANDY", "BRANT", "BREANA", "BREANN", "BREANNA", "BREANNE",
		"BREE", "BRENDA", "BRENDAN", "BRENDON", "BRENNA", "BRENT", "BRENTON", "BRET", "BRETT", "BRIAN",
		"BRIANA", "BRIANNA", "BRIANNE", "BRICE", "BRIDGET", "BRIDGETT", "BRIDGETTE", "BRIGETTE", "BRIGID", "BRIGIDA",
		"BRIGITTE", "BRINDA", "BRITANY", "BRITNEY", "BRITNI", "BRITT", "BRITTA", "BRITTANEY", "BRITTANI", "BRITTANIE",
		"BRITTANY", "BRITTENY", "BRITTNEY", "BRITTNI", "BRITTNY", "BROCK", "BRODERICK", "BRONWYN", "BROOK", "BROOKE",
		"BROOKS", "BRUCE", "BRUNA", "BRUNILDA", "BRUNO", "BRYAN", "BRYANNA", "BRYANT", "BRYCE", "BRYNN",
		"BRYON", "BUCK", "BUD", "BUDDY", "BUENA", "BUFFY", "BUFORD", "BULA", "BULAH", "BUNNY",
		"BURL", "BURMA", "BURT", "BURTON", "BUSTER", "BYRON", "CAITLIN", "CAITLYN", "CALANDRA", "CALEB",
		"CALISTA", "CALLIE", "CALVIN", "CAMELIA", "CAMELLIA", "CAMERON", "CAMI", "CAMIE", "CAMILA", "CAMILLA",
		"CAMILLE", "CAMMIE", "CAMMY", "CANDACE", "CANDANCE", "CANDELARIA", "CANDI", "CANDICE", "CANDIDA", "CANDIE",
		"CANDIS", "CANDRA", "CANDY", "CANDYCE", "CAPRICE", "CARA", "CAREN", "CAREY", "CARI", "CARIDAD",
		"CARIE", "CARIN", "CARINA", "CARISA", "CARISSA", "CARITA", "CARL", "CARLA", "CARLEE", "CARLEEN",
		"CARLENA", "CARLENE", "CARLETTA", "CARLEY", "CARLI", "CARLIE", "CARLINE", "CARLITA", "CARLO", "CARLOS",
		"CARLOTA", "CARLOTTA", "CARLTON", "CARLY", "CARLYN", "CARMA", "CARMAN", "CARMEL", "CARMELA", "CARMELIA",
		"CARMELINA", "CARMELITA", "CARMELLA", "CARMELO", "CARMEN", "CARMINA", "CARMINE", "CARMON", "CAROL", "CAROLA",
		"CAROLANN", "CAROLE", "CAROLEE", "CAROLIN", "CAROLINA", "CAROLINE", "CAROLL", "CAROLYN", "CAROLYNE", "CAROLYNN",
		"CARON", "CAROYLN", "CARRI", "CARRIE", "CARROL", "CARROLL", "CARRY", "CARSON", "CARTER", "CARY",
		"CARYL", "CARYLON", "CARYN", "CASANDRA", "CASEY", "CASIE", "CASIMIRA", "CASSANDRA", "CASSAUNDRA", "CASSEY",
		"CASSI", "CASSIDY", "CASSIE", "CASSONDRA", "CASSY", "CATALINA", "CATARINA", "CATERINA", "CATHARINE", "CATHERIN",
		"CATHERINA", "CATHERINE", "CATHERN", "CATHERYN", "CATHEY", "CATHI", "CATHIE", "CATHLEEN", "CATHRINE", "CATHRYN",
		"CATHY", "CATINA", "CATRICE", "CATRINA", "CAYLA", "CECELIA", "CECIL", "CECILA", "CECILE", "CECILIA",
		"CECILLE", "CECILY", "CEDRIC", "CEDRICK", "CELENA", "CELESTA", "CELESTE", "CELESTINA", "CELESTINE", "CELIA",
		"CELINA", "CELINDA", "CELINE", "CELSA", "CEOLA", "CESAR", "CHAD", "CHADWICK", "CHAE", "CHAN",
		"CHANA", "CHANCE", "CHANDA", "CHANDRA", "CHANEL", "CHANELL", "CHANELLE", "CHANG", "CHANTAL", "CHANTAY",
		"CHANTE", "CHANTEL", "CHANTELL", "CHANTELLE", "CHARA", "CHARIS", "CHARISE", "CHARISSA", "CHARISSE", "CHARITA",
		"CHARITY", "CHARLA", "CHARLEEN", "CHARLENA", "CHARLENE", "CHARLES", "CHARLESETTA", "CHARLETTE", "CHARLEY", "CHARLIE",
		"CHARLINE", "CHARLOTT", "CHARLOTTE", "CHARLSIE", "CHARLYN", "CHARMAIN", "CHARMAINE", "CHAROLETTE", "CHAS", "CHASE",
		"CHASIDY", "CHASITY", "CHASSIDY", "CHASTITY", "CHAU", "CHAUNCEY", "CHAYA", "CHELSEA", "CHELSEY", "CHELSIE",
		"CHER", "CHERE", "CHEREE", "CHERELLE", "CHERI", "CHERIE", "CHERILYN", "CHERISE", "CHERISH", "CHERLY",
		"CHERLYN", "CHERRI", "CHERRIE", "CHERRY", "CHERRYL", "CHERY", "CHERYL", "CHERYLE", "CHERYLL", "CHESTER",
		"CHET", "CHEYENNE", "CHI", "CHIA", "CHIEKO", "CHIN", "CHINA", "CHING", "CHIQUITA", "CHLOE",
		"CHONG", "CHRIS", "CHRISSY", "CHRISTA", "CHRISTAL", "CHRISTEEN", "CHRISTEL", "CHRISTEN", "CHRISTENA", "CHRISTENE",
		"CHRISTI", "CHRISTIA", "CHRISTIAN", "CHRISTIANA", "CHRISTIANE", "CHRISTIE", "CHRISTIN", "CHRISTINA", "CHRISTINE", "CHRISTINIA",
		"CHRISTOPER", "CHRISTOPHER", "CHRISTY", "CHRYSTAL", "CHU", "CHUCK", "CHUN", "CHUNG", "CIARA", "CICELY",
		"CIERA", "CIERRA", "CINDA", "CINDERELLA", "CINDI", "CINDIE", "CINDY", "CINTHIA", "CIRA", "CLAIR",
		"CLAIRE", "CLARA", "CLARE", "CLARENCE", "CLARETHA", "CLARETTA", "CLARIBEL", "CLARICE", "CLARINDA", "CLARINE",
		"CLARIS", "CLARISA", "CLARISSA", "CLARITA", "CLARK", "CLASSIE", "CLAUD", "CLAUDE", "CLAUDETTE", "CLAUDIA",
		"CLAUDIE", "CLAUDINE", "CLAUDIO", "CLAY", "CLAYTON", "CLELIA", "CLEMENCIA", "CLEMENT", "CLEMENTE", "CLEMENTINA",
		"CLEMENTINE", "CLEMMIE", "CLEO", "CLEOPATRA", "CLEORA", "CLEOTILDE", "CLETA", "CLETUS", "CLEVELAND", "CLIFF",
		"CLIFFORD", "CLIFTON", "CLINT", "CLINTON", "CLORA", "CLORINDA", "CLOTILDE", "CLYDE", "CODI", "CODY",
		"COLBY", "COLE", "COLEEN", "COLEMAN", "COLENE", "COLETTA", "COLETTE", "COLIN", "COLLEEN", "COLLEN",
		"COLLENE", "COLLETTE", "COLLIN", "COLTON", "COLUMBUS", "CONCEPCION", "CONCEPTION", "CONCETTA", "CONCHA", "CONCHITA",
		"CONNIE", "CONRAD", "CONSTANCE", "CONSUELA", "CONSUELO", "CONTESSA", "CORA", "CORAL", "CORALEE", "CORALIE",
		"CORAZON", "CORDELIA", "CORDELL", "CORDIA", "CORDIE", "COREEN", "CORENE", "CORETTA", "COREY", "CORI",
		"CORIE", "CORINA", "CORINE", "CORINNA", "CORINNE", "CORLISS", "CORNELIA", "CORNELIUS", "CORNELL", "CORRIE",
		"CORRIN", "CORRINA", "CORRINE", "CORRINNE", "CORTEZ", "CORTNEY", "CORY", "COURTNEY", "COY", "CRAIG",
		"CREOLA", "CRIS", "CRISELDA", "CRISSY", "CRISTA", "CRISTAL", "CRISTEN", "CRISTI", "CRISTIE", "CRISTIN",
		"CRISTINA", "CRISTINE", "CRISTOBAL", "CRISTOPHER", "CRISTY", "CRUZ", "CRYSTA", "CRYSTAL", "CRYSTLE", "CUC",
		"CURT", "CURTIS", "CYNDI", "CYNDY", "CYNTHIA", "CYRIL", "CYRSTAL", "CYRUS", "CYTHIA", "DACIA",
		"DAGMAR", "DAGNY", "DAHLIA", "DAINA", "DAINE", "DAISEY", "DAISY", "DAKOTA", "DALE", "DALENE",
		"DALIA", "DALILA", "DALLAS", "DALTON", "DAMARIS", "DAMIAN", "DAMIEN", "DAMION", "DAMON", "DAN",
		"DANA", "DANAE", "DANE", "DANELLE", "DANETTE", "DANI", "DANIA", "DANIAL", "DANICA", "DANIEL",
		"DANIELA", "DANIELE", "DANIELL", "DANIELLA", "DANIELLE", "DANIKA", "DANILLE", "DANILO", "DANITA", "DANN",
		"DANNA", "DANNETTE", "DANNIE", "DANNIELLE", "DANNY", "DANTE", "DANUTA", "DANYEL", "DANYELL", "DANYELLE",
		"DAPHINE", "DAPHNE", "DARA", "DARBY", "DARCEL", "DARCEY", "DARCI", "DARCIE", "DARCY", "DARELL",
		"DAREN", "DARIA", "DARIN", "DARIO", "DARIUS", "DARLA", "DARLEEN", "DARLENA", "DARLENE", "DARLINE",
		"DARNELL", "DARON", "DARREL", "DARRELL", "DARREN", "DARRICK", "DARRIN", "DARRON", "DARRYL", "DARWIN",
		"DARYL", "DAVE", "DAVID", "DAVIDA", "DAVINA", "DAVIS", "DAWN", "DAWNA", "DAWNE", "DAYLE",
		"DAYNA", "DAYSI", "DEADRA", "DEAN", "DEANA", "DEANDRA", "DEANDRE", "DEANDREA", "DEANE", "DEANGELO",
		"DEANN", "DEANNA", "DEANNE", "DEB", "DEBBI", "DEBBIE", "DEBBRA", "DEBBY", "DEBERA", "DEBI",
		"DEBORA", "DEBORAH", "DEBRA", "DEBRAH", "DEBROAH", "DEDE", "DEDRA", "DEE", "DEEANN", "DEEANNA",
		"DEEDEE", "DEEDRA", "DEENA", "DEETTA", "DEIDRA", "DEIDRE", "DEIRDRE", "DEJA", "DEL", "DELAINE",
		"DELANA", "DELBERT", "DELCIE", "DELENA", "DELFINA", "DELIA", "DELICIA", "DELILA", "DELILAH", "DELINDA",
		"DELISA", "DELL", "DELLA", "DELMA", "DELMAR", "DELMER", "DELMY", "DELOIS", "DELOISE", "DELORA",
		"DELORAS", "DELORES", "DELORIS", "DELORSE", "DELPHA", "DELPHIA", "DELPHINE", "DELSIE", "DELTA", "DEMARCUS",
		"DEMETRA", "DEMETRIA", "DEMETRICE", "DEMETRIUS", "DENA", "DENAE", "DENEEN", "DENESE", "DENICE", "DENIS",
		"DENISE", "DENISHA", "DENISSE", "DENITA", "DENNA", "DENNIS", "DENNISE", "DENNY", "DENVER", "DENYSE",
		"DEON", "DEONNA", "DEREK", "DERICK", "DERRICK", "DESHAWN", "DESIRAE", "DESIRE", "DESIREE", "DESMOND",
		"DESPINA", "DESSIE", "DESTINY", "DETRA", "DEVIN", "DEVON", "DEVONA", "DEVORA", "DEVORAH", "DEWAYNE",
		"DEWEY", "DEWITT", "DEXTER", "DIA", "DIAMOND", "DIAN", "DIANA", "DIANE", "DIANN", "DIANNA",
		"DIANNE", "DICK", "DIEDRA", "DIEDRE", "DIEGO", "DIERDRE", "DIGNA", "DILLON", "DIMPLE", "DINA",
		"DINAH", "DINO", "DINORAH", "DION", "DIONE", "DIONNA", "DIONNE", "DIRK", "DIVINA", "DIXIE",
		"DODIE", "DOLLIE", "DOLLY", "DOLORES", "DOLORIS", "DOMENIC", "DOMENICA", "DOMINGA", "DOMINGO", "DOMINIC",
		"DOMINICA", "DOMINICK", "DOMINIQUE", "DOMINQUE", "DOMITILA", "DOMONIQUE", "DON", "DONA", "DONALD", "DONELLA",
		"DONETTA", "DONETTE", "DONG", "DONITA", "DONN", "DONNA", "DONNELL", "DONNETTA", "DONNETTE", "DONNIE",
		"DONNY", "DONOVAN", "DONTE", "DONYA", "DORA", "DORATHY", "DORCAS", "DOREATHA", "DOREEN", "DORENE",
		"DORETHA", "DORETHEA", "DORETTA", "DORI", "DORIA", "DORIAN", "DORIE", "DORINDA", "DORINE", "DORIS",
		"DORLA", "DOROTHA", "DOROTHEA", "DOROTHY", "DORRIS", "DORSEY", "DORTHA", "DORTHEA", "DORTHEY", "DORTHY",
		"DOT", "DOTTIE", "DOTTY", "DOUG", "DOUGLAS", "DOUGLASS", "DOVIE", "DOYLE", "DREAMA", "DREMA",
		"DREW", "DRUCILLA", "DRUSILLA", "DUANE", "DUDLEY", "DULCE", "DULCIE", "DUNCAN", "DUNG", "DUSTI",
		"DUSTIN", "DUSTY", "DWAIN", "DWANA", "DWAYNE", "DWIGHT", "DYAN", "DYLAN", "EARL", "EARLE",
		"EARLEAN", "EARLEEN", "EARLENE", "EARLIE", "EARLINE", "EARNEST", "EARNESTINE", "EARTHA", "EASTER", "EBONI",
		"EBONIE", "EBONY", "ECHO", "ED", "EDA", "EDDA", "EDDIE", "EDDY", "EDELMIRA", "EDEN",
		"EDGAR", "EDGARDO", "EDIE", "EDISON", "EDITH", "EDMOND", "EDMUND", "EDMUNDO", "EDNA", "EDRA",
		"EDRIS", "EDUARDO", "EDWARD", "EDWARDO", "EDWIN", "EDWINA", "EDYTH", "EDYTHE", "EFFIE", "EFRAIN",
		"EFREN", "EHTEL", "EILEEN", "EILENE", "ELA", "ELADIA", "ELAINA", "ELAINE", "ELANA", "ELANE",
		"ELANOR", "ELAYNE", "ELBA", "ELBERT", "ELDA", "ELDEN", "ELDON", "ELDORA", "ELDRIDGE", "ELEANOR",
		"ELEANORA", "ELEANORE", "ELEASE", "ELENA", "ELENE", "ELENI", "ELENOR", "ELENORA", "ELENORE", "ELEONOR",
		"ELEONORA", "ELEONORE", "ELFREDA", "ELFRIEDA", "ELFRIEDE", "ELI", "ELIA", "ELIANA", "ELIAS", "ELICIA",
		"ELIDA", "ELIDIA", "ELIJAH", "ELIN", "ELINA", "ELINOR", "ELINORE", "ELISA", "ELISABETH", "ELISE",
		"ELISEO", "ELISHA", "ELISSA", "ELIZ", "ELIZA", "ELIZABET", "ELIZABETH", "ELIZBETH", "ELIZEBETH", "ELKE",
		"ELLA", "ELLAMAE", "ELLAN", "ELLEN", "ELLENA", "ELLI", "ELLIE", "ELLIOT", "ELLIOTT", "ELLIS",
		"ELLSWORTH", "ELLY", "ELLYN", "ELMA", "ELMER", "ELMIRA", "ELMO", "ELNA", "ELNORA", "ELODIA",
		"ELOIS", "ELOISA", "ELOISE", "ELOUISE", "ELOY", "ELROY", "ELSA", "ELSE", "ELSIE", "ELSY",
		"ELTON", "ELVA", "ELVERA", "ELVIA", "ELVIE", "ELVIN", "ELVINA", "ELVIRA", "ELVIS", "ELWANDA",
		"ELWOOD", "ELYSE", "ELZA", "EMA", "EMANUEL", "EMELDA", "EMELIA", "EMELINA", "EMELINE", "EMELY",
		"EMERALD", "EMERITA", "EMERSON", "EMERY", "EMIKO", "EMIL", "EMILE", "EMILEE", "EMILIA", "EMILIE",
		"EMILIO", "EMILY", "EMMA", "EMMALINE", "EMMANUEL", "EMMETT", "EMMIE", "EMMITT", "EMMY", "EMOGENE",
		"EMORY", "ENA", "ENDA", "ENEDINA", "ENEIDA", "ENID", "ENOCH", "ENOLA", "ENRIQUE", "ENRIQUETA",
		"EPIFANIA", "ERA", "ERASMO", "ERIC", "ERICA", "ERICH", "ERICK", "ERICKA", "ERIK", "ERIKA",
		"ERIN", "ERINN", "ERLENE", "ERLINDA", "ERLINE", "ERMA", "ERMELINDA", "ERMINIA", "ERNA", "ERNEST",
		"ERNESTINA", "ERNESTINE", "ERNESTO", "ERNIE", "ERROL", "ERVIN", "ERWIN", "ERYN", "ESMERALDA", "ESPERANZA",
		"ESSIE", "ESTA", "ESTEBAN", "ESTEFANA", "ESTELA", "ESTELL", "ESTELLA", "ESTELLE", "ESTER", "ESTHER",
		"ESTRELLA", "ETHA", "ETHAN", "ETHEL", "ETHELENE", "ETHELYN", "ETHYL", "ETSUKO", "ETTA", "ETTIE",
		"EUFEMIA", "EUGENA", "EUGENE", "EUGENIA", "EUGENIE", "EUGENIO", "EULA", "EULAH", "EULALIA", "EUN",
		"EUNA", "EUNICE", "EURA", "EUSEBIA", "EUSEBIO", "EUSTOLIA", "EVA", "EVALYN", "EVAN", "EVANGELINA",
		"EVANGELINE", "EVE", "EVELIA", "EVELIN", "EVELINA", "EVELINE", "EVELYN", "EVELYNE", "EVELYNN", "EVERETT",
		"EVERETTE", "EVETTE", "EVIA", "EVIE", "EVITA", "EVON", "EVONNE", "EWA", "EXIE", "EZEKIEL",
		"EZEQUIEL", "EZRA", "FABIAN", "FABIOLA", "FAE", "FAIRY", "FAITH", "FALLON", "FANNIE", "FANNY",
		"FARAH", "FARRAH", "FATIMA", "FATIMAH", "FAUSTINA", "FAUSTINO", "FAUSTO", "FAVIOLA", "FAWN", "FAY",
		"FAYE", "FE", "FEDERICO", "FELECIA", "FELICA", "FELICE", "FELICIA", "FELICIDAD", "FELICITA", "FELICITAS",
		"FELIPA", "FELIPE", "FELISA", "FELISHA", "FELIX", "FELTON", "FERDINAND", "FERMIN", "FERMINA", "FERN",
		"FERNANDA", "FERNANDE", "FERNANDO", "FERNE", "FIDEL", "FIDELA", "FIDELIA", "FILIBERTO", "FILOMENA", "FIONA",
		"FLAVIA", "FLETA", "FLETCHER", "FLO", "FLOR", "FLORA", "FLORANCE", "FLORENCE", "FLORENCIA", "FLORENCIO",
		"FLORENE", "FLORENTINA", "FLORENTINO", "FLORETTA", "FLORIA", "FLORIDA", "FLORINDA", "FLORINE", "FLORRIE", "FLOSSIE",
		"FLOY", "FLOYD", "FONDA", "FOREST", "FORREST", "FOSTER", "FRAN", "FRANCE", "FRANCENE", "FRANCES",
		"FRANCESCA", "FRANCESCO", "FRANCHESCA", "FRANCIE", "FRANCINA", "FRANCINE", "FRANCIS", "FRANCISCA", "FRANCISCO", "FRANCOISE",
		"FRANK", "FRANKIE", "FRANKLIN", "FRANKLYN", "FRANSISCA", "FRED", "FREDA", "FREDDA", "FREDDIE", "FREDDY",
		"FREDERIC", "FREDERICA", "FREDERICK", "FREDERICKA", "FREDIA", "FREDRIC", "FREDRICK", "FREDRICKA", "FREEDA", "FREEMAN",
		"FREIDA", "FRIDA", "FRIEDA", "FRITZ", "FUMIKO", "GABRIEL", "GABRIELA", "GABRIELE", "GABRIELLA", "GABRIELLE",
		"GAIL", "GALA", "GALE", "GALEN", "GALINA", "GARFIELD", "GARLAND", "GARNET", "GARNETT", "GARRET",
		"GARRETT", "GARRY", "GARTH", "GARY", "GASTON", "GAVIN", "GAY", "GAYE", "GAYLA", "GAYLE",
		"GAYLENE", "GAYLORD", "GAYNELL", "GAYNELLE", "GEARLDINE", "GEMA", "GEMMA", "GENA", "GENARO", "GENE",
		"GENESIS", "GENEVA", "GENEVIE", "GENEVIEVE", "GENEVIVE", "GENIA", "GENIE", "GENNA", "GENNIE", "GENNY",
		"GENOVEVA", "GEOFFREY", "GEORGANN", "GEORGE", "GEORGEANN", "GEORGEANNA", "GEORGENE", "GEORGETTA", "GEORGETTE", "GEORGIA",
		"GEORGIANA", "GEORGIANN", "GEORGIANNA", "GEORGIANNE", "GEORGIE", "GEORGINA", "GEORGINE", "GERALD", "GERALDINE", "GERALDO",
		"GERALYN", "GERARD", "GERARDO", "GERDA", "GERI", "GERMAINE", "GERMAN", "GERRI", "GERRY", "GERTHA",
		"GERTIE", "GERTRUD", "GERTRUDE", "GERTRUDIS", "GERTUDE", "GHISLAINE", "GIA", "GIANNA", "GIDGET", "GIGI",
		"GIL", "GILBERT", "GILBERTE", "GILBERTO", "GILDA", "GILLIAN", "GILMA", "GINA", "GINETTE", "GINGER",
		"GINNY", "GINO", "GIOVANNA", "GIOVANNI", "GISELA", "GISELE", "GISELLE", "GITA", "GIUSEPPE", "GIUSEPPINA",
		"GLADIS", "GLADY", "GLADYS", "GLAYDS", "GLEN", "GLENDA", "GLENDORA", "GLENN", "GLENNA", "GLENNIE",
		"GLENNIS", "GLINDA", "GLORIA", "GLORY", "GLYNDA", "GLYNIS", "GOLDA", "GOLDEN", "GOLDIE", "GONZALO",
		"GORDON", "GRACE", "GRACIA", "GRACIE", "GRACIELA", "GRADY", "GRAHAM", "GRAIG", "GRANT", "GRANVILLE",
		"GRAYCE", "GRAZYNA", "GREG", "GREGG", "GREGORIA", "GREGORIO", "GREGORY", "GRETA", "GRETCHEN", "GRETTA",
		"GRICELDA", "GRISEL", "GRISELDA", "GROVER", "GUADALUPE", "GUDRUN", "GUILLERMINA", "GUILLERMO", "GUS", "GUSSIE",
		"GUSTAVO", "GUY", "GWEN", "GWENDA", "GWENDOLYN", "GWENN", "GWYN", "GWYNETH", "HA", "HAE",
		"HAI", "HAILEY", "HAL", "HALEY", "HALINA", "HALLEY", "HALLIE", "HAN", "HANA", "HANG",
		"HANH", "HANK", "HANNA", "HANNAH", "HANNELORE", "HANS", "HARLAN", "HARLAND", "HARLEY", "HARMONY",
		"HAROLD", "HARRIET", "HARRIETT", "HARRIETTE", "HARRIS", "HARRISON", "HARRY", "HARVEY", "HASSAN", "HASSIE",
		"HATTIE", "HAYDEE", "HAYDEN", "HAYLEY", "HAYWOOD", "HAZEL", "HEATH", "HEATHER", "HECTOR", "HEDWIG",
		"HEDY", "HEE", "HEIDE", "HEIDI", "HEIDY", "HEIKE", "HELAINE", "HELEN", "HELENA", "HELENE",
		"HELGA", "HELLEN", "HENRIETTA", "HENRIETTE", "HENRY", "HERB", "HERBERT", "HERIBERTO", "HERLINDA", "HERMA",
		"HERMAN", "HERMELINDA", "HERMILA", "HERMINA", "HERMINE", "HERMINIA", "HERSCHEL", "HERSHEL", "HERTA", "HERTHA",
		"HESTER", "HETTIE", "HIEDI", "HIEN", "HILARIA", "HILARIO", "HILARY", "HILDA", "HILDE", "HILDEGARD",
		"HILDEGARDE", "HILDRED", "HILLARY", "HILMA", "HILTON", "HIPOLITO", "HIRAM", "HIROKO", "HISAKO", "HOA",
		"HOBERT", "HOLLEY", "HOLLI", "HOLLIE", "HOLLIS", "HOLLY", "HOMER", "HONEY", "HONG", "HOPE",
		"HORACE", "HORACIO", "HORTENCIA", "HORTENSE", "HORTENSIA", "HOSEA", "HOUSTON", "HOWARD", "HOYT", "HSIU",
		"HUBERT", "HUE", "HUEY", "HUGH", "HUGO", "HUI", "HULDA", "HUMBERTO", "HUNG", "HUNTER",
		"HUONG", "HWA", "HYACINTH", "HYE", "HYMAN", "HYO", "HYON", "HYUN", "IAN", "IDA",
		"IDALIA", "IDELL", "IDELLA", "IESHA", "IGNACIA", "IGNACIO", "IKE", "ILA", "ILANA", "ILDA",
		"ILEANA", "ILEEN", "ILENE", "ILIANA", "ILLA", "ILONA", "ILSE", "ILUMINADA", "IMA", "IMELDA",
		"IMOGENE", "IN", "INA", "INDIA", "INDIRA", "INELL", "INES", "INEZ", "INGA", "INGE",
		"INGEBORG", "INGER", "INGRID", "INOCENCIA", "IOLA", "IONA", "IONE", "IRA", "IRAIDA", "IRENA",
		"IRENE", "IRINA", "IRIS", "IRISH", "IRMA", "IRMGARD", "IRVIN", "IRVING", "IRWIN", "ISA",
		"ISAAC", "ISABEL", "ISABELL", "ISABELLA", "ISABELLE", "ISADORA", "ISAIAH", "ISAIAS", "ISAURA", "ISELA",
		"ISIAH", "ISIDRA", "ISIDRO", "ISIS", "ISMAEL", "ISOBEL", "ISRAEL", "ISREAL", "ISSAC", "IVA",
		"IVAN", "IVANA", "IVELISSE", "IVETTE", "IVEY", "IVONNE", "IVORY", "IVY", "IZETTA", "IZOLA",
		"JA", "JACALYN", "JACELYN", "JACINDA", "JACINTA", "JACINTO", "JACK", "JACKELINE", "JACKELYN", "JACKI",
		"JACKIE", "JACKLYN", "JACKQUELINE", "JACKSON", "JACLYN", "JACOB", "JACQUALINE", "JACQUE", "JACQUELIN", "JACQUELINE",
		"JACQUELYN", "JACQUELYNE", "JACQUELYNN", "JACQUES", "JACQUETTA", "JACQUI", "JACQUIE", "JACQUILINE", "JACQULINE", "JACQULYN",
		"JADA", "JADE", "JADWIGA", "JAE", "JAIME", "JAIMEE", "JAIMIE", "JAKE", "JALEESA", "JALISA",
		"JAMA", "JAMAAL", "JAMAL", "JAMAR", "JAME", "JAMEE", "JAMEL", "JAMES", "JAMEY", "JAMI",
		"JAMIE", "JAMIKA", "JAMILA", "JAMISON", "JAMMIE", "JAN", "JANA", "JANAE", "JANAY", "JANE",
		"JANEAN", "JANEE", "JANEEN", "JANEL", "JANELL", "JANELLA", "JANELLE", "JANENE", "JANESSA", "JANET",
		"JANETH", "JANETT", "JANETTA", "JANETTE", "JANEY", "JANI", "JANICE", "JANIE", "JANIECE", "JANINA",
		"JANINE", "JANIS", "JANISE", "JANITA", "JANN", "JANNA", "JANNET", "JANNETTE", "JANNIE", "JANUARY",
		"JANYCE", "JAQUELINE", "JAQUELYN", "JARED", "JAROD", "JARRED", "JARRETT", "JARROD", "JARVIS", "JASMIN",
		"JASMINE", "JASON", "JASPER", "JAUNITA", "JAVIER", "JAY", "JAYE", "JAYME", "JAYMIE", "JAYNA",
		"JAYNE", "JAYSON", "JAZMIN", "JAZMINE", "JC", "JEAN", "JEANA", "JEANE", "JEANELLE", "JEANENE",
		"JEANETT", "JEANETTA", "JEANETTE", "JEANICE", "JEANIE", "JEANINE", "JEANMARIE", "JEANNA", "JEANNE", "JEANNETTA",
		"JEANNETTE", "JEANNIE", "JEANNINE", "JED", "JEFF", "JEFFEREY", "JEFFERSON", "JEFFERY", "JEFFIE", "JEFFREY",
		"JEFFRY", "JEN", "JENA", "JENAE", "JENE", "JENEE", "JENELL", "JENELLE", "JENETTE", "JENEVA",
		"JENI", "JENICE", "JENIFER", "JENIFFER", "JENINE", "JENISE", "JENNA", "JENNEFER", "JENNELL", "JENNETTE",
		"JENNI", "JENNIE", "JENNIFER", "JENNIFFER", "JENNINE", "JENNY", "JERALD", "JERALDINE", "JERAMY", "JERE",
		"JEREMIAH", "JEREMY", "JERI", "JERICA", "JERILYN", "JERLENE", "JERMAINE", "JEROLD", "JEROME", "JEROMY",
		"JERRELL", "JERRI", "JERRICA", "JERRIE", "JERROD", "JERROLD", "JERRY", "JESENIA", "JESICA", "JESS",
		"JESSE", "JESSENIA", "JESSI", "JESSIA", "JESSICA", "JESSIE", "JESSIKA", "JESTINE", "JESUS", "JESUSA",
		"JESUSITA", "JETTA", "JETTIE", "JEWEL", "JEWELL", "JI", "JILL", "JILLIAN", "JIM", "JIMMIE",
		"JIMMY", "JIN", "JINA", "JINNY", "JO", "JOAN", "JOANA", "JOANE", "JOANIE", "JOANN",
		"JOANNA", "JOANNE", "JOANNIE", "JOAQUIN", "JOAQUINA", "JOCELYN", "JODEE", "JODI", "JODIE", "JODY",
		"JOE", "JOEANN", "JOEL", "JOELLA", "JOELLE", "JOELLEN", "JOESPH", "JOETTA", "JOETTE", "JOEY",
		"JOHANA", "JOHANNA", "JOHANNE", "JOHN", "JOHNA", "JOHNATHAN", "JOHNATHON", "JOHNETTA", "JOHNETTE", "JOHNIE",
		"JOHNNA", "JOHNNIE", "JOHNNY", "JOHNSIE", "JOHNSON", "JOI", "JOIE", "JOLANDA", "JOLEEN", "JOLENE",
		"JOLIE", "JOLINE", "JOLYN", "JOLYNN", "JON", "JONA", "JONAH", "JONAS", "JONATHAN", "JONATHON",
		"JONE", "JONELL", "JONELLE", "JONG", "JONI", "JONIE", "JONNA", "JONNIE", "JORDAN", "JORDON",
		"JORGE", "JOSE", "JOSEF", "JOSEFA", "JOSEFINA", "JOSEFINE", "JOSELYN", "JOSEPH", "JOSEPHINA", "JOSEPHINE",
		"JOSETTE", "JOSH", "JOSHUA", "JOSIAH", "JOSIE", "JOSLYN", "JOSPEH", "JOSPHINE", "JOSUE", "JOVAN",
		"JOVITA", "JOY", "JOYA", "JOYCE", "JOYCELYN", "JOYE", "JUAN", "JUANA", "JUANITA", "JUDE",
		"JUDI", "JUDIE", "JUDITH", "JUDSON", "JUDY", "JULE", "JULEE", "JULENE", "JULES", "JULI",
		"JULIA", "JULIAN", "JULIANA", "JULIANE", "JULIANN", "JULIANNA", "JULIANNE", "JULIE", "JULIEANN", "JULIENNE",
		"JULIET", "JULIETA", "JULIETTA", "JULIETTE", "JULIO", "JULISSA", "JULIUS", "JUNE", "JUNG", "JUNIE",
		"JUNIOR", "JUNITA", "JUNKO", "JUSTA", "JUSTIN", "JUSTINA", "JUSTINE", "JUTTA", "KA", "KACEY",
		"KACI", "KACIE", "KACY", "KAI", "KAILA", "KAITLIN", "KAITLYN", "KALA", "KALEIGH", "KALEY",
		"KALI", "KALLIE", "KALYN", "KAM", "KAMALA", "KAMI", "KAMILAH", "KANDACE", "KANDI", "KANDICE",
		"KANDIS", "KANDRA", "KANDY", "KANESHA", "KANISHA", "KARA", "KARAN", "KAREEM", "KAREEN", "KAREN",
		"KARENA", "KAREY", "KARI", "KARIE", "KARIMA", "KARIN", "KARINA", "KARINE", "KARISA", "KARISSA",
		"KARL", "KARLA", "KARLEEN", "KARLENE", "KARLY", "KARLYN", "KARMA", "KARMEN", "KAROL", "KAROLE",
		"KAROLINE", "KAROLYN", "KARON", "KARREN", "KARRI", "KARRIE", "KARRY", "KARY", "KARYL", "KARYN",
		"KASANDRA", "KASEY", "KASHA", "KASI", "KASIE", "KASSANDRA", "KASSIE", "KATE", "KATELIN", "KATELYN",
		"KATELYNN", "KATERINE", "KATHALEEN", "KATHARINA", "KATHARINE", "KATHARYN", "KATHE", "KATHELEEN", "KATHERIN", "KATHERINA",
		"KATHERINE", "KATHERN", "KATHERYN", "KATHEY", "KATHI", "KATHIE", "KATHLEEN", "KATHLENE", "KATHLINE", "KATHLYN",
		"KATHRIN", "KATHRINE", "KATHRYN", "KATHRYNE", "KATHY", "KATHYRN", "KATI", "KATIA", "KATIE", "KATINA",
		"KATLYN", "KATRICE", "KATRINA", "KATTIE", "KATY", "KAY", "KAYCE", "KAYCEE", "KAYE", "KAYLA",
		"KAYLEE", "KAYLEEN", "KAYLEIGH", "KAYLENE", "KAZUKO", "KECIA", "KEELEY", "KEELY", "KEENA", "KEENAN",
		"KEESHA", "KEIKO", "KEILA", "KEIRA", "KEISHA", "KEITH", "KEITHA", "KELI", "KELLE", "KELLEE",
		"KELLEY", "KELLI", "KELLIE", "KELLY", "KELLYE", "KELSEY", "KELSI", "KELSIE", "KELVIN", "KEMBERLY",
		"KEN", "KENA", "KENDA", "KENDAL", "KENDALL", "KENDRA", "KENDRICK", "KENETH", "KENIA", "KENISHA",
		"KENNA", "KENNETH", "KENNITH", "KENNY", "KENT", "KENTON", "KENYA", "KENYATTA", "KENYETTA", "KERA",
		"KEREN", "KERI", "KERMIT", "KERRI", "KERRIE", "KERRY", "KERSTIN", "KESHA", "KESHIA", "KETURAH",
		"KEVA", "KEVEN", "KEVIN", "KHADIJAH", "KHALILAH", "KIA", "KIANA", "KIARA", "KIERA", "KIERSTEN",
		"KIESHA", "KIETH", "KILEY", "KIM", "KIMBER", "KIMBERELY", "KIMBERLEE", "KIMBERLEY", "KIMBERLI", "KIMBERLIE",
		"KIMBERLY", "KIMBERY", "KIMBRA", "KIMI", "KIMIKO", "KINA", "KINDRA", "KING", "KIP", "KIRA",
		"KIRBY", "KIRK", "KIRSTEN", "KIRSTIE", "KIRSTIN", "KISHA", "KIT", "KITTIE", "KITTY", "KIYOKO",
		"KIZZIE", "KIZZY", "KLARA", "KOREY", "KORI", "KORTNEY", "KORY", "KOURTNEY", "KRAIG", "KRIS",
		"KRISHNA", "KRISSY", "KRISTA", "KRISTAL", "KRISTAN", "KRISTEEN", "KRISTEL", "KRISTEN", "KRISTI", "KRISTIAN",
		"KRISTIE", "KRISTIN", "KRISTINA", "KRISTINE", "KRISTLE", "KRISTOFER", "KRISTOPHER", "KRISTY", "KRISTYN", "KRYSTA",
		"KRYSTAL", "KRYSTEN", "KRYSTIN", "KRYSTINA", "KRYSTLE", "KRYSTYNA", "KUM", "KURT", "KURTIS", "KYLA",
		"KYLE", "KYLEE", "KYLIE", "KYM", "KYMBERLY", "KYOKO", "KYONG", "KYRA", "KYUNG", "LACEY",
		"LACHELLE", "LACI", "LACIE", "LACRESHA", "LACY", "LADAWN", "LADONNA", "LADY", "LAEL", "LAHOMA",
		"LAI", "LAILA", "LAINE", "LAJUANA", "LAKEESHA", "LAKEISHA", "LAKENDRA", "LAKENYA", "LAKESHA", "LAKESHIA",
		"LAKIA", "LAKIESHA", "LAKISHA", "LAKITA", "LALA", "LAMAR", "LAMONICA", "LAMONT", "LAN", "LANA",
		"LANCE", "LANDON", "LANE", "LANELL", "LANELLE", "LANETTE", "LANG", "LANI", "LANIE", "LANITA",
		"LANNIE", "LANNY", "LANORA", "LAQUANDA", "LAQUITA", "LARA", "LARAE", "LARAINE", "LAREE", "LARHONDA",
		"LARISA", "LARISSA", "LARITA", "LARONDA", "LARRAINE", "LARRY", "LARUE", "LASANDRA", "LASHANDA", "LASHANDRA",
		"LASHAUN", "LASHAUNDA", "LASHAWN", "LASHAWNA", "LASHAWNDA", "LASHAY", "LASHELL", "LASHON", "LASHONDA", "LASHUNDA",
		"LASONYA", "LATANYA", "LATARSHA", "LATASHA", "LATASHIA", "LATESHA", "LATIA", "LATICIA", "LATINA", "LATISHA",
		"LATONIA", "LATONYA", "LATORIA", "LATOSHA", "LATOYA", "LATOYIA", "LATRICE", "LATRICIA", "LATRINA", "LATRISHA",
		"LAUNA", "LAURA", "LAURALEE", "LAURAN", "LAURE", "LAUREEN", "LAUREL", "LAUREN", "LAURENA", "LAURENCE",
		"LAURENE", "LAURETTA", "LAURETTE", "LAURI", "LAURICE", "LAURIE", "LAURINDA", "LAURINE", "LAURYN", "LAVADA",
		"LAVELLE", "LAVENIA", "LAVERA", "LAVERN", "LAVERNA", "LAVERNE", "LAVETA", "LAVETTE", "LAVINA", "LAVINIA",
		"LAVON", "LAVONA", "LAVONDA", "LAVONE", "LAVONIA", "LAVONNA", "LAVONNE", "LAWANA", "LAWANDA", "LAWANNA",
		"LAWERENCE", "LAWRENCE", "LAYLA", "LAYNE", "LAZARO", "LE", "LEA", "LEAH", "LEAN", "LEANA",
		"LEANDRA", "LEANDRO", "LEANN", "LEANNA", "LEANNE", "LEANORA", "LEATHA", "LEATRICE", "LECIA", "LEDA",
		"LEE", "LEEANN", "LEEANNA", "LEEANNE", "LEENA", "LEESA", "LEIA", "LEIDA", "LEIF", "LEIGH",
		"LEIGHA", "LEIGHANN", "LEILA", "LEILANI", "LEISA", "LEISHA", "LEKISHA", "LELA", "LELAH", "LELAND",
		"LELIA", "LEMUEL", "LEN", "LENA", "LENARD", "LENITA", "LENNA", "LENNIE", "LENNY", "LENORA",
		"LENORE", "LEO", "LEOLA", "LEOMA", "LEON", "LEONA", "LEONARD", "LEONARDA", "LEONARDO", "LEONE",
		"LEONEL", "LEONIA", "LEONIDA", "LEONIE", "LEONILA", "LEONOR", "LEONORA", "LEONORE", "LEONTINE", "LEOPOLDO",
		"LEORA", "LEOTA", "LERA", "LEROY", "LES", "LESA", "LESHA", "LESIA", "LESLEE", "LESLEY",
		"LESLI", "LESLIE", "LESSIE", "LESTER", "LETA", "LETHA", "LETICIA", "LETISHA", "LETITIA", "LETTIE",
		"LETTY", "LEVI", "LEWIS", "LEXIE", "LEZLIE", "LI", "LIA", "LIANA", "LIANE", "LIANNE",
		"LIBBIE", "LIBBY", "LIBERTY", "LIBRADA", "LIDA", "LIDIA", "LIEN", "LIESELOTTE", "LIGIA", "LILA",
		"LILI", "LILIA", "LILIAN", "LILIANA", "LILLA", "LILLI", "LILLIA", "LILLIAM", "LILLIAN", "LILLIANA",
		"LILLIE", "LILLY", "LILY", "LIN", "LINA", "LINCOLN", "LINDA", "LINDSAY", "LINDSEY", "LINDSY",
		"LINDY", "LINETTE", "LING", "LINH", "LINN", "LINNEA", "LINNIE", "LINO", "LINSEY", "LINWOOD",
		"LIONEL", "LISA", "LISABETH", "LISANDRA", "LISBETH", "LISE", "LISETTE", "LISHA", "LISSA", "LISSETTE",
		"LITA", "LIVIA", "LIZ", "LIZA", "LIZABETH", "LIZBETH", "LIZETH", "LIZETTE", "LIZZETTE", "LIZZIE",
		"LLOYD", "LOAN", "LOGAN", "LOIDA", "LOIS", "LOISE", "LOLA", "LOLITA", "LOMA", "LON",
		"LONA", "LONDA", "LONG", "LONI", "LONNA", "LONNIE", "LONNY", "LORA", "LORAINE", "LORALEE",
		"LORE", "LOREAN", "LOREE", "LOREEN", "LORELEI", "LOREN", "LORENA", "LORENE", "LORENZA", "LORENZO",
		"LORETA", "LORETTA", "LORETTE", "LORI", "LORIA", "LORIANN", "LORIE", "LORILEE", "LORINA", "LORINDA",
		"LORINE", "LORIS", "LORITA", "LORNA", "LORRAINE", "LORRETTA", "LORRI", "LORRIANE", "LORRIE", "LORRINE",
		"LORY", "LOTTIE", "LOU", "LOUANN", "LOUANNE", "LOUELLA", "LOUETTA", "LOUIE", "LOUIS", "LOUISA",
		"LOUISE", "LOURA", "LOURDES", "LOURIE", "LOUVENIA", "LOVE", "LOVELLA", "LOVETTA", "LOVIE", "LOWELL",
		"LOYCE", "LOYD", "LU", "LUANA", "LUANN", "LUANNA", "LUANNE", "LUBA", "LUCAS", "LUCI",
		"LUCIA", "LUCIANA", "LUCIANO", "LUCIE", "LUCIEN", "LUCIENNE", "LUCILA", "LUCILE", "LUCILLA", "LUCILLE",
		"LUCINA", "LUCINDA", "LUCIO", "LUCIUS", "LUCRECIA", "LUCRETIA", "LUCY", "LUDIE", "LUDIVINA", "LUE",
		"LUELLA", "LUETTA", "LUIGI", "LUIS", "LUISA", "LUISE", "LUKE", "LULA", "LULU", "LUNA",
		"LUPE", "LUPITA", "LURA", "LURLENE", "LURLINE", "LUTHER", "LUVENIA", "LUZ", "LYDA", "LYDIA",
		"LYLA", "LYLE", "LYMAN", "LYN", "LYNDA", "LYNDIA", "LYNDON", "LYNDSAY", "LYNDSEY", "LYNELL",
		"LYNELLE", "LYNETTA", "LYNETTE", "LYNN", "LYNNA", "LYNNE", "LYNNETTE", "LYNSEY", "LYNWOOD", "MA",
		"MABEL", "MABELLE", "MABLE", "MAC", "MACHELLE", "MACIE", "MACK", "MACKENZIE", "MACY", "MADALENE",
		"MADALINE", "MADALYN", "MADDIE", "MADELAINE", "MADELEINE", "MADELENE", "MADELINE", "MADELYN", "MADGE", "MADIE",
		"MADISON", "MADLYN", "MADONNA", "MAE", "MAEGAN", "MAFALDA", "MAGALI", "MAGALY", "MAGAN", "MAGARET",
		"MAGDA", "MAGDALEN", "MAGDALENA", "MAGDALENE", "MAGEN", "MAGGIE", "MAGNOLIA", "MAHALIA", "MAI", "MAIA",
		"MAIDA", "MAILE", "MAIRA", "MAIRE", "MAISHA", "MAISIE", "MAJOR", "MAJORIE", "MAKEDA", "MALCOLM",
		"MALCOM", "MALENA", "MALIA", "MALIK", "MALIKA", "MALINDA", "MALISA", "MALISSA", "MALKA", "MALLIE",
		"MALLORY", "MALORIE", "MALVINA", "MAMIE", "MAMMIE", "MAN", "MANA", "MANDA", "MANDI", "MANDIE",
		"MANDY", "MANIE", "MANUAL", "MANUEL", "MANUELA", "MANY", "MAO", "MAPLE", "MARA", "MARAGARET",
		"MARAGRET", "MARANDA", "MARC", "MARCEL", "MARCELA", "MARCELENE", "MARCELINA", "MARCELINE", "MARCELINO", "MARCELL",
		"MARCELLA", "MARCELLE", "MARCELLUS", "MARCELO", "MARCENE", "MARCHELLE", "MARCI", "MARCIA", "MARCIE", "MARCO",
		"MARCOS", "MARCUS", "MARCY", "MARDELL", "MAREN", "MARG", "MARGARET", "MARGARETA", "MARGARETE", "MARGARETT",
		"MARGARETTA", "MARGARETTE", "MARGARITA", "MARGARITE", "MARGARITO", "MARGART", "MARGE", "MARGENE", "MARGERET", "MARGERT",
		"MARGERY", "MARGET", "MARGHERITA", "MARGIE", "MARGIT", "MARGO", "MARGORIE", "MARGOT", "MARGRET", "MARGRETT",
		"MARGUERITA", "MARGUERITE", "MARGURITE", "MARGY", "MARHTA", "MARI", "MARIA", "MARIAH", "MARIAM", "MARIAN",
		"MARIANA", "MARIANELA", "MARIANN", "MARIANNA", "MARIANNE", "MARIANO", "MARIBEL", "MARIBETH", "MARICA", "MARICELA",
		"MARICRUZ", "MARIE", "MARIEL", "MARIELA", "MARIELLA", "MARIELLE", "MARIETTA", "MARIETTE", "MARIKO", "MARILEE",
		"MARILOU", "MARILU", "MARILYN", "MARILYNN", "MARIN", "MARINA", "MARINDA", "MARINE", "MARIO", "MARION",
		"MARIS", "MARISA", "MARISELA", "MARISHA", "MARISOL", "MARISSA", "MARITA", "MARITZA", "MARIVEL", "MARJORIE",
		"MARJORY", "MARK", "MARKETTA", "MARKITA", "MARKUS", "MARLA", "MARLANA", "MARLEEN", "MARLEN", "MARLENA",
		"MARLENE", "MARLIN", "MARLINE", "MARLO", "MARLON", "MARLYN", "MARLYS", "MARNA", "MARNI", "MARNIE",
		"MARQUERITE", "MARQUETTA", "MARQUIS", "MARQUITA", "MARQUITTA", "MARRY", "MARSHA", "MARSHALL", "MARTA", "MARTH",
		"MARTHA", "MARTI", "MARTIN", "MARTINA", "MARTINE", "MARTY", "MARVA", "MARVEL", "MARVELLA", "MARVIN",
		"MARVIS", "MARX", "MARY", "MARYA", "MARYALICE", "MARYAM", "MARYANN", "MARYANNA", "MARYANNE", "MARYBELLE",
		"MARYBETH", "MARYELLEN", "MARYETTA", "MARYJANE", "MARYJO", "MARYLAND", "MARYLEE", "MARYLIN", "MARYLN", "MARYLOU",
		"MARYLOUISE", "MARYLYN", "MARYLYNN", "MARYROSE", "MASAKO", "MASON", "MATHA", "MATHEW", "MATHILDA", "MATHILDE",
		"MATILDA", "MATILDE", "MATT", "MATTHEW", "MATTIE", "MAUD", "MAUDE", "MAUDIE", "MAURA", "MAUREEN",
		"MAURICE", "MAURICIO", "MAURINE", "MAURITA", "MAURO", "MAVIS", "MAX", "MAXIE", "MAXIMA", "MAXIMINA",
		"MAXIMO", "MAXINE", "MAXWELL", "MAY", "MAYA", "MAYBELL", "MAYBELLE", "MAYE", "MAYME", "MAYNARD",
		"MAYOLA", "MAYRA", "MAZIE", "MCKENZIE", "MCKINLEY", "MEAGAN", "MEAGHAN", "MECHELLE", "MEDA", "MEE",
		"MEG", "MEGAN", "MEGGAN", "MEGHAN", "MEGHANN", "MEI", "MEL", "MELAINE", "MELANI", "MELANIA",
		"MELANIE", "MELANY", "MELBA", "MELDA", "MELIA", "MELIDA", "MELINA", "MELINDA", "MELISA", "MELISSA",
		"MELISSIA", "MELITA", "MELLIE", "MELLISA", "MELLISSA", "MELODEE", "MELODI", "MELODIE", "MELODY", "MELONIE",
		"MELONY", "MELVA", "MELVIN", "MELVINA", "MELYNDA", "MENDY", "MERCEDES", "MERCEDEZ", "MERCY", "MEREDITH",
		"MERI", "MERIDETH", "MERIDITH", "MERILYN", "MERISSA", "MERLE", "MERLENE", "MERLIN", "MERLYN", "MERNA",
		"MERRI", "MERRIE", "MERRILEE", "MERRILL", "MERRY", "MERTIE", "MERVIN", "MERYL", "META", "MI",
		"MIA", "MICA", "MICAELA", "MICAH", "MICHA", "MICHAEL", "MICHAELA", "MICHAELE", "MICHAL", "MICHALE",
		"MICHEAL", "MICHEL", "MICHELE", "MICHELINA", "MICHELINE", "MICHELL", "MICHELLE", "MICHIKO", "MICKEY", "MICKI",
		"MICKIE", "MIESHA", "MIGDALIA", "MIGNON", "MIGUEL", "MIGUELINA", "MIKA", "MIKAELA", "MIKE", "MIKEL",
		"MIKI", "MIKKI", "MILA", "MILAGRO", "MILAGROS", "MILAN", "MILDA", "MILDRED", "MILES", "MILFORD",
		"MILISSA", "MILLARD", "MILLICENT", "MILLIE", "MILLY", "MILO", "MILTON", "MIMI", "MIN", "MINA",
		"MINDA", "MINDI", "MINDY", "MINERVA", "MING", "MINH", "MINNA", "MINNIE", "MINTA", "MIQUEL",
		"MIRA", "MIRANDA", "MIREILLE", "MIRELLA", "MIREYA", "MIRIAM", "MIRIAN", "MIRNA", "MIRTA", "MIRTHA",
		"MISHA", "MISS", "MISSY", "MISTI", "MISTIE", "MISTY", "MITCH", "MITCHEL", "MITCHELL", "MITSUE",
		"MITSUKO", "MITTIE", "MITZI", "MITZIE", "MIYOKO", "MODESTA", "MODESTO", "MOHAMED", "MOHAMMAD", "MOHAMMED",
		"MOIRA", "MOISES", "MOLLIE", "MOLLY", "MONA", "MONET", "MONICA", "MONIKA", "MONIQUE", "MONNIE",
		"MONROE", "MONSERRATE", "MONTE", "MONTY", "MOON", "MORA", "MORGAN", "MORIAH", "MORRIS", "MORTON",
		"MOSE", "MOSES", "MOSHE", "MOZELL", "MOZELLA", "MOZELLE", "MUI", "MUOI", "MURIEL", "MURRAY",
		"MY", "MYESHA", "MYLES", "MYONG", "MYRA", "MYRIAM", "MYRL", "MYRLE", "MYRNA", "MYRON",
		"MYRTA", "MYRTICE", "MYRTIE", "MYRTIS", "MYRTLE", "MYUNG", "NA", "NADA", "NADENE", "NADIA",
		"NADINE", "NAIDA", "NAKESHA", "NAKIA", "NAKISHA", "NAKITA", "NAM", "NAN", "NANA", "NANCEE",
		"NANCEY", "NANCI", "NANCIE", "NANCY", "NANETTE", "NANNETTE", "NANNIE", "NAOMA", "NAOMI", "NAPOLEON",
		"NARCISA", "NATACHA", "NATALIA", "NATALIE", "NATALYA", "NATASHA", "NATASHIA", "NATHALIE", "NATHAN", "NATHANAEL",
		"NATHANIAL", "NATHANIEL", "NATISHA", "NATIVIDAD", "NATOSHA", "NEAL", "NECOLE", "NED", "NEDA", "NEDRA",
		"NEELY", "NEIDA", "NEIL", "NELDA", "NELIA", "NELIDA", "NELL", "NELLA", "NELLE", "NELLIE",
		"NELLY", "NELSON", "NENA", "NENITA", "NEOMA", "NEOMI", "NEREIDA", "NERISSA", "NERY", "NESTOR",
		"NETA", "NETTIE", "NEVA", "NEVADA", "NEVILLE", "NEWTON", "NGA", "NGAN", "NGOC", "NGUYET",
		"NIA", "NICHELLE", "NICHOL", "NICHOLAS", "NICHOLE", "NICHOLLE", "NICK", "NICKI", "NICKIE", "NICKOLAS",
		"NICKOLE", "NICKY", "NICOL", "NICOLA", "NICOLAS", "NICOLASA", "NICOLE", "NICOLETTE", "NICOLLE", "NIDA",
		"NIDIA", "NIESHA", "NIEVES", "NIGEL", "NIKI", "NIKIA", "NIKITA", "NIKKI", "NIKOLE", "NILA",
		"NILDA", "NILSA", "NINA", "NINFA", "NISHA", "NITA", "NOAH", "NOBLE", "NOBUKO", "NOE",
		"NOEL", "NOELIA", "NOELLA", "NOELLE", "NOEMI", "NOHEMI", "NOLA", "NOLAN", "NOMA", "NONA",
		"NORA", "NORAH", "NORBERT", "NORBERTO", "NOREEN", "NORENE", "NORIKO", "NORINE", "NORMA", "NORMAN",
		"NORMAND", "NORRIS", "NOVA", "NOVELLA", "NU", "NUBIA", "NUMBERS", "NYDIA", "NYLA", "OBDULIA",
		"OCIE", "OCTAVIA", "OCTAVIO", "ODA", "ODELIA", "ODELL", "ODESSA", "ODETTE", "ODILIA", "ODIS",
		"OFELIA", "OK", "OLA", "OLEN", "OLENE", "OLETA", "OLEVIA", "OLGA", "OLIMPIA", "OLIN",
		"OLINDA", "OLIVA", "OLIVE", "OLIVER", "OLIVIA", "OLLIE", "OLYMPIA", "OMA", "OMAR", "OMEGA",
		"OMER", "ONA", "ONEIDA", "ONIE", "ONITA", "OPAL", "OPHELIA", "ORA", "ORALEE", "ORALIA",
		"OREN", "ORETHA", "ORLANDO", "ORPHA", "ORVAL", "ORVILLE", "OSCAR", "OSSIE", "OSVALDO", "OSWALDO",
		"OTELIA", "OTHA", "OTILIA", "OTIS", "OTTO", "OUIDA", "OWEN", "OZELL", "OZELLA", "OZIE",
		"PA", "PABLO", "PAGE", "PAIGE", "PALMA", "PALMER", "PALMIRA", "PAM", "PAMALA", "PAMELA",
		"PAMELIA", "PAMELLA", "PAMILA", "PAMULA", "PANDORA", "PANSY", "PAOLA", "PARIS", "PARKER", "PARTHENIA",
		"PARTICIA", "PASQUALE", "PASTY", "PAT", "PATIENCE", "PATRIA", "PATRICA", "PATRICE", "PATRICIA", "PATRICK",
		"PATRINA", "PATSY", "PATTI", "PATTIE", "PATTY", "PAUL", "PAULA", "PAULENE", "PAULETTA", "PAULETTE",
		"PAULINA", "PAULINE", "PAULITA", "PAZ", "PEARL", "PEARLE", "PEARLENE", "PEARLIE", "PEARLINE", "PEARLY",
		"PEDRO", "PEG", "PEGGIE", "PEGGY", "PEI", "PENELOPE", "PENNEY", "PENNI", "PENNIE", "PENNY",
		"PERCY", "PERLA", "PERRY", "PETE", "PETER", "PETRA", "PETRINA", "PETRONILA", "PHEBE", "PHIL",
		"PHILIP", "PHILLIP", "PHILLIS", "PHILOMENA", "PHOEBE", "PHUNG", "PHUONG", "PHYLICIA", "PHYLIS", "PHYLISS",
		"PHYLLIS", "PIA", "PIEDAD", "PIERRE", "PILAR", "PING", "PINKIE", "PIPER", "POK", "POLLY",
		"PORFIRIO", "PORSCHE", "PORSHA", "PORTER", "PORTIA", "PRECIOUS", "PRESTON", "PRICILLA", "PRINCE", "PRINCESS",
		"PRISCILA", "PRISCILLA", "PROVIDENCIA", "PRUDENCE", "PURA", "QIANA", "QUEEN", "QUEENIE", "QUENTIN", "QUIANA",
		"QUINCY", "QUINN", "QUINTIN", "QUINTON", "QUYEN", "RACHAEL", "RACHAL", "RACHEAL", "RACHEL", "RACHELE",
		"RACHELL", "RACHELLE", "RACQUEL", "RAE", "RAEANN", "RAELENE", "RAFAEL", "RAFAELA", "RAGUEL", "RAINA",
		"RAISA", "RALEIGH", "RALPH", "RAMIRO", "RAMON", "RAMONA", "RAMONITA", "RANA", "RANAE", "RANDA",
		"RANDAL", "RANDALL", "RANDEE", "RANDELL", "RANDI", "RANDOLPH", "RANDY", "RANEE", "RAPHAEL", "RAQUEL",
		"RASHAD", "RASHEEDA", "RASHIDA", "RAUL", "RAVEN", "RAY", "RAYE", "RAYFORD", "RAYLENE", "RAYMON",
		"RAYMOND", "RAYMONDE", "RAYMUNDO", "RAYNA", "REA", "REAGAN", "REANNA", "REATHA", "REBA", "REBBECA",
		"REBBECCA", "REBECA", "REBECCA", "REBECKA", "REBEKAH", "REDA", "REED", "REENA", "REFUGIA", "REFUGIO",
		"REGAN", "REGENA", "REGENIA", "REGGIE", "REGINA", "REGINALD", "REGINE", "REGINIA", "REID", "REIKO",
		"REINA", "REINALDO", "REITA", "REMA", "REMEDIOS", "REMONA", "RENA", "RENAE", "RENALDO", "RENATA",
		"RENATE", "RENATO", "RENAY", "RENDA", "RENE", "RENEA", "RENEE", "RENETTA", "RENITA", "RENNA",
		"RESSIE", "RETA", "RETHA", "RETTA", "REUBEN", "REVA", "REX", "REY", "REYES", "REYNA",
		"REYNALDA", "REYNALDO", "RHEA", "RHEBA", "RHETT", "RHIANNON", "RHODA", "RHONA", "RHONDA", "RIA",
		"RICARDA", "RICARDO", "RICH", "RICHARD", "RICHELLE", "RICHIE", "RICK", "RICKEY", "RICKI", "RICKIE",
		"RICKY", "RICO", "RIGOBERTO", "RIKKI", "RILEY", "RIMA", "RINA", "RISA", "RITA", "RIVA",
		"RIVKA", "ROB", "ROBBI", "ROBBIE", "ROBBIN", "ROBBY", "ROBBYN", "ROBENA", "ROBERT", "ROBERTA",
		"ROBERTO", "ROBIN", "ROBT", "ROBYN", "ROCCO", "ROCHEL", "ROCHELL", "ROCHELLE", "ROCIO", "ROCKY",
		"ROD", "RODERICK", "RODGER", "RODNEY", "RODOLFO", "RODRICK", "RODRIGO", "ROGELIO", "ROGER", "ROLAND",
		"ROLANDA", "ROLANDE", "ROLANDO", "ROLF", "ROLLAND", "ROMA", "ROMAINE", "ROMAN", "ROMANA", "ROMELIA",
		"ROMEO", "ROMONA", "RON", "RONA", "RONALD", "RONDA", "RONI", "RONNA", "RONNI", "RONNIE",
		"RONNY", "ROOSEVELT", "RORY", "ROSA", "ROSALBA", "ROSALEE", "ROSALIA", "ROSALIE", "ROSALINA", "ROSALIND",
		"ROSALINDA", "ROSALINE", "ROSALVA", "ROSALYN", "ROSAMARIA", "ROSAMOND", "ROSANA", "ROSANN", "ROSANNA", "ROSANNE",
		"ROSARIA", "ROSARIO", "ROSAURA", "ROSCOE", "ROSE", "ROSEANN", "ROSEANNA", "ROSEANNE", "ROSELEE", "ROSELIA",
		"ROSELINE", "ROSELLA", "ROSELLE", "ROSELYN", "ROSEMARIE", "ROSEMARY", "ROSENA", "ROSENDA", "ROSENDO", "ROSETTA",
		"ROSETTE", "ROSIA", "ROSIE", "ROSINA", "ROSIO", "ROSITA", "ROSLYN", "ROSS", "ROSSANA", "ROSSIE",
		"ROSY", "ROWENA", "ROXANA", "ROXANE", "ROXANN", "ROXANNA", "ROXANNE", "ROXIE", "ROXY", "ROY",
		"ROYAL", "ROYCE", "ROZANNE", "ROZELLA", "RUBEN", "RUBI", "RUBIE", "RUBIN", "RUBY", "RUBYE",
		"RUDOLF", "RUDOLPH", "RUDY", "RUEBEN", "RUFINA", "RUFUS", "RUPERT", "RUSS", "RUSSEL", "RUSSELL",
		"RUSTY", "RUTH", "RUTHA", "RUTHANN", "RUTHANNE", "RUTHE", "RUTHIE", "RYAN", "RYANN", "SABINA",
		"SABINE", "SABRA", "SABRINA", "SACHA", "SACHIKO", "SADE", "SADIE", "SADYE", "SAGE", "SAL",
		"SALENA", "SALINA", "SALLEY", "SALLIE", "SALLY", "SALOME", "SALVADOR", "SALVATORE", "SAM", "SAMANTHA",
		"SAMARA", "SAMATHA", "SAMELLA", "SAMIRA", "SAMMIE", "SAMMY", "SAMUAL", "SAMUEL", "SANA", "SANDA",
		"SANDEE", "SANDI", "SANDIE", "SANDRA", "SANDY", "SANFORD", "SANG", "SANJUANA", "SANJUANITA", "SANORA",
		"SANTA", "SANTANA", "SANTIAGO", "SANTINA", "SANTO", "SANTOS", "SARA", "SARAH", "SARAI", "SARAN",
		"SARI", "SARINA", "SARITA", "SASHA", "SATURNINA", "SAU", "SAUL", "SAUNDRA", "SAVANNA", "SAVANNAH",
		"SCARLET", "SCARLETT", "SCOT", "SCOTT", "SCOTTIE", "SCOTTY", "SEAN", "SEASON", "SEBASTIAN", "SEBRINA",
		"SEE", "SEEMA", "SELENA", "SELENE", "SELINA", "SELMA", "SENA", "SENAIDA", "SEPTEMBER", "SERAFINA",
		"SERENA", "SERGIO", "SERINA", "SERITA", "SETH", "SETSUKO", "SEYMOUR", "SHA", "SHAD", "SHAE",
		"SHAINA", "SHAKIA", "SHAKIRA", "SHAKITA", "SHALA", "SHALANDA", "SHALON", "SHALONDA", "SHAMEKA", "SHAMIKA",
		"SHAN", "SHANA", "SHANAE", "SHANDA", "SHANDI", "SHANDRA", "SHANE", "SHANEKA", "SHANEL", "SHANELL",
		"SHANELLE", "SHANI", "SHANICE", "SHANIKA", "SHANIQUA", "SHANITA", "SHANNA", "SHANNAN", "SHANNON", "SHANON",
		"SHANTA", "SHANTAE", "SHANTAY", "SHANTE", "SHANTEL", "SHANTELL", "SHANTELLE", "SHANTI", "SHAQUANA", "SHAQUITA",
		"SHARA", "SHARAN", "SHARDA", "SHAREE", "SHARELL", "SHAREN", "SHARI", "SHARICE", "SHARIE", "SHARIKA",
		"SHARILYN", "SHARITA", "SHARLA", "SHARLEEN", "SHARLENE", "SHARMAINE", "SHAROLYN", "SHARON", "SHARONDA", "SHARRI",
		"SHARRON", "SHARYL", "SHARYN", "SHASTA", "SHAUN", "SHAUNA", "SHAUNDA", "SHAUNNA", "SHAUNTA", "SHAUNTE",
		"SHAVON", "SHAVONDA", "SHAVONNE", "SHAWANA", "SHAWANDA", "SHAWANNA", "SHAWN", "SHAWNA", "SHAWNDA", "SHAWNEE",
		"SHAWNNA", "SHAWNTA", "SHAY", "SHAYLA", "SHAYNA", "SHAYNE", "SHEA", "SHEBA", "SHEENA", "SHEILA",
		"SHEILAH", "SHELA", "SHELBA", "SHELBY", "SHELDON", "SHELIA", "SHELLA", "SHELLEY", "SHELLI", "SHELLIE",
		"SHELLY", "SHELTON", "SHEMEKA", "SHEMIKA", "SHENA", "SHENIKA", "SHENITA", "SHENNA", "SHERA", "SHEREE",
		"SHERELL", "SHERI", "SHERICE", "SHERIDAN", "SHERIE", "SHERIKA", "SHERILL", "SHERILYN", "SHERISE", "SHERITA",
		"SHERLENE", "SHERLEY", "SHERLY", "SHERLYN", "SHERMAN", "SHERON", "SHERRELL", "SHERRI", "SHERRIE", "SHERRIL",
		"SHERRILL", "SHERRON", "SHERRY", "SHERRYL", "SHERWOOD", "SHERY", "SHERYL", "SHERYLL", "SHIELA", "SHILA",
		"SHILOH", "SHIN", "SHIRA", "SHIRELY", "SHIRL", "SHIRLEE", "SHIRLEEN", "SHIRLENE", "SHIRLEY", "SHIRLY",
		"SHIZUE", "SHIZUKO", "SHON", "SHONA", "SHONDA", "SHONDRA", "SHONNA", "SHONTA", "SHOSHANA", "SHU",
		"SHYLA", "SIBYL", "SID", "SIDNEY", "SIERRA", "SIGNE", "SIGRID", "SILAS", "SILVA", "SILVANA",
		"SILVIA", "SIMA", "SIMON", "SIMONA", "SIMONE", "SIMONNE", "SINA", "SINDY", "SIOBHAN", "SIRENA",
		"SIU", "SIXTA", "SKYE", "SLYVIA", "SO", "SOCORRO", "SOFIA", "SOILA", "SOL", "SOLANGE",
		"SOLEDAD", "SOLOMON", "SOMER", "SOMMER", "SON", "SONA", "SONDRA", "SONG", "SONIA", "SONJA",
		"SONNY", "SONYA", "SOO", "SOOK", "SOON", "SOPHIA", "SOPHIE", "SORAYA", "SPARKLE", "SPENCER",
		"SPRING", "STACEE", "STACEY", "STACI", "STACIA", "STACIE", "STACY", "STAN", "STANFORD", "STANLEY",
		"STANTON", "STAR", "STARLA", "STARR", "STASIA", "STEFAN", "STEFANI", "STEFANIA", "STEFANIE", "STEFANY",
		"STEFFANIE", "STELLA", "STEPANIE", "STEPHAINE", "STEPHAN", "STEPHANE", "STEPHANI", "STEPHANIA", "STEPHANIE", "STEPHANY",
		"STEPHEN", "STEPHENIE", "STEPHINE", "STEPHNIE", "STERLING", "STEVE", "STEVEN", "STEVIE", "STEWART", "STORMY",
		"STUART", "SU", "SUANNE", "SUDIE", "SUE", "SUEANN", "SUELLEN", "SUK", "SULEMA", "SUMIKO",
		"SUMMER", "SUN", "SUNDAY", "SUNG", "SUNNI", "SUNNY", "SUNSHINE", "SUSAN", "SUSANA", "SUSANN",
		"SUSANNA", "SUSANNAH", "SUSANNE", "SUSIE", "SUSY", "SUZAN", "SUZANN", "SUZANNA", "SUZANNE", "SUZETTE",
		"SUZI", "SUZIE", "SUZY", "SVETLANA", "SYBIL", "SYBLE", "SYDNEY", "SYLVESTER", "SYLVIA", "SYLVIE",
		"SYNTHIA", "SYREETA", "TA", "TABATHA", "TABETHA", "TABITHA", "TAD", "TAI", "TAINA", "TAISHA",
		"TAJUANA", "TAKAKO", "TAKISHA", "TALIA", "TALISHA", "TALITHA", "TAM", "TAMA", "TAMALA", "TAMAR",
		"TAMARA", "TAMATHA", "TAMBRA", "TAMEIKA", "TAMEKA", "TAMEKIA", "TAMELA", "TAMERA", "TAMESHA", "TAMI",
		"TAMICA", "TAMIE", "TAMIKA", "TAMIKO", "TAMISHA", "TAMMARA", "TAMMERA", "TAMMI", "TAMMIE", "TAMMY",
		"TAMRA", "TANA", "TANDRA", "TANDY", "TANEKA", "TANESHA", "TANGELA", "TANIA", "TANIKA", "TANISHA",
		"TANJA", "TANNA", "TANNER", "TANYA", "TARA", "TARAH", "TAREN", "TARI", "TARRA", "TARSHA",
		"TARYN", "TASHA", "TASHIA", "TASHINA", "TASIA", "TATIANA", "TATUM", "TATYANA", "TAUNYA", "TAWANA",
		"TAWANDA", "TAWANNA", "TAWNA", "TAWNY", "TAWNYA", "TAYLOR", "TAYNA", "TED", "TEDDY", "TEENA",
		"TEGAN", "TEISHA", "TELMA", "TEMEKA", "TEMIKA", "TEMPIE", "TEMPLE", "TENA", "TENESHA", "TENISHA",
		"TENNIE", "TENNILLE", "TEODORA", "TEODORO", "TEOFILA", "TEQUILA", "TERA", "TEREASA", "TERENCE", "TERESA",
		"TERESE", "TERESIA", "TERESITA", "TERESSA", "TERI", "TERICA", "TERINA", "TERISA", "TERRA", "TERRANCE",
		"TERRELL", "TERRENCE", "TERRESA", "TERRI", "TERRIE", "TERRILYN", "TERRY", "TESHA", "TESS", "TESSA",
		"TESSIE", "THAD", "THADDEUS", "THALIA", "THANH", "THAO", "THEA", "THEDA", "THELMA", "THEO",
		"THEODORA", "THEODORE", "THEOLA", "THERESA", "THERESE", "THERESIA", "THERESSA", "THERON", "THERSA", "THI",
		"THOMAS", "THOMASENA", "THOMASINA", "THOMASINE", "THORA", "THRESA", "THU", "THURMAN", "THUY", "TIA",
		"TIANA", "TIANNA", "TIARA", "TIEN", "TIERA", "TIERRA", "TIESHA", "TIFANY", "TIFFANEY", "TIFFANI",
		"TIFFANIE", "TIFFANY", "TIFFINY", "TIJUANA", "TILDA", "TILLIE", "TIM", "TIMIKA", "TIMMY", "TIMOTHY",
		"TINA", "TINISHA", "TINY", "TISA", "TISH", "TISHA", "TITUS", "TOBI", "TOBIAS", "TOBIE",
		"TOBY", "TOCCARA", "TOD", "TODD", "TOI", "TOM", "TOMAS", "TOMASA", "TOMEKA", "TOMI",
		"TOMIKA", "TOMIKO", "TOMMIE", "TOMMY", "TOMMYE", "TOMOKO", "TONA", "TONDA", "TONETTE", "TONEY",
		"TONI", "TONIA", "TONIE", "TONISHA", "TONITA", "TONJA", "TONY", "TONYA", "TORA", "TORI",
		"TORIE", "TORRI", "TORRIE", "TORY", "TOSHA", "TOSHIA", "TOSHIKO", "TOVA", "TOWANDA", "TOYA",
		"TRACEE", "TRACEY", "TRACI", "TRACIE", "TRACY", "TRAN", "TRANG", "TRAVIS", "TREASA", "TREENA",
		"TRENA", "TRENT", "TRENTON", "TRESA", "TRESSA", "TRESSIE", "TREVA", "TREVOR", "TREY", "TRICIA",
		"TRINA", "TRINH", "TRINIDAD", "TRINITY", "TRISH", "TRISHA", "TRISTA", "TRISTAN", "TROY", "TRUDI",
		"TRUDIE", "TRUDY", "TRULA", "TRUMAN", "TU", "TUAN", "TULA", "TUYET", "TWANA", "TWANDA",
		"TWANNA", "TWILA", "TWYLA", "TY", "TYESHA", "TYISHA", "TYLER", "TYNISHA", "TYRA", "TYREE",
		"TYRELL", "TYRON", "TYRONE", "TYSON", "ULA", "ULRIKE", "ULYSSES", "UN", "UNA", "URSULA",
		"USHA", "UTE", "VADA", "VAL", "VALARIE", "VALDA", "VALENCIA", "VALENE", "VALENTIN", "VALENTINA",
		"VALENTINE", "VALERI", "VALERIA", "VALERIE", "VALERY", "VALLIE", "VALORIE", "VALRIE", "VAN", "VANCE",
		"VANDA", "VANESA", "VANESSA", "VANETTA", "VANIA", "VANITA", "VANNA", "VANNESA", "VANNESSA", "VASHTI",
		"VASILIKI", "VAUGHN", "VEDA", "VELDA", "VELIA", "VELLA", "VELMA", "VELVA", "VELVET", "VENA",
		"VENESSA", "VENETTA", "VENICE", "VENITA", "VENNIE", "VENUS", "VEOLA", "VERA", "VERDA", "VERDELL",
		"VERDIE", "VERENA", "VERGIE", "VERLA", "VERLENE", "VERLIE", "VERLINE", "VERN", "VERNA", "VERNELL",
		"VERNETTA", "VERNIA", "VERNICE", "VERNIE", "VERNITA", "VERNON", "VERONA", "VERONICA", "VERONIKA", "VERONIQUE",
		"VERSIE", "VERTIE", "VESTA", "VETA", "VI", "VICENTA", "VICENTE", "VICKEY", "VICKI", "VICKIE",
		"VICKY", "VICTOR", "VICTORIA", "VICTORINA", "VIDA", "VIKI", "VIKKI", "VILMA", "VINA", "VINCE",
		"VINCENT", "VINCENZA", "VINCENZO", "VINITA", "VINNIE", "VIOLA", "VIOLET", "VIOLETA", "VIOLETTE", "VIRGEN",
		"VIRGIE", "VIRGIL", "VIRGILIO", "VIRGINA", "VIRGINIA", "VITA", "VITO", "VIVA", "VIVAN", "VIVIAN",
		"VIVIANA", "VIVIEN", "VIVIENNE", "VON", "VONCILE", "VONDA", "VONNIE", "WADE", "WAI", "WALDO",
		"WALKER", "WALLACE", "WALLY", "WALTER", "WALTON", "WALTRAUD", "WAN", "WANDA", "WANETA", "WANETTA",
		"WANITA", "WARD", "WARNER", "WARREN", "WAVA", "WAYLON", "WAYNE", "WEI", "WELDON", "WEN",
		"WENDELL", "WENDI", "WENDIE", "WENDOLYN", "WENDY", "WENONA", "WERNER", "WES", "WESLEY", "WESTON",
		"WHITLEY", "WHITNEY", "WILBER", "WILBERT", "WILBUR", "WILBURN", "WILDA", "WILEY", "WILFORD", "WILFRED",
		"WILFREDO", "WILHELMINA", "WILHEMINA", "WILL", "WILLA", "WILLARD", "WILLENA", "WILLENE", "WILLETTA", "WILLETTE",
		"WILLIA", "WILLIAM", "WILLIAMS", "WILLIAN", "WILLIE", "WILLIEMAE", "WILLIS", "WILLODEAN", "WILLOW", "WILLY",
		"WILMA", "WILMER", "WILSON", "WILTON", "WINDY", "WINFORD", "WINFRED", "WINIFRED", "WINNIE", "WINNIFRED",
		"WINONA", "WINSTON", "WINTER", "WM", "WONDA", "WOODROW", "WYATT", "WYNELL", "WYNONA", "XAVIER",
		"XENIA", "XIAO", "XIOMARA", "XOCHITL", "XUAN", "YADIRA", "YAEKO", "YAEL", "YAHAIRA", "YAJAIRA",
		"YAN", "YANG", "YANIRA", "YASMIN", "YASMINE", "YASUKO", "YEE", "YELENA", "YEN", "YER",
		"YESENIA", "YESSENIA", "YETTA", "YEVETTE", "YI", "YING", "YOKO", "YOLANDA", "YOLANDE", "YOLANDO",
		"YOLONDA", "YON", "YONG", "YOSHIE", "YOSHIKO", "YOULANDA", "YOUNG", "YU", "YUETTE", "YUK",
		"YUKI", "YUKIKO", "YUKO", "YULANDA", "YUN", "YUNG", "YUONNE", "YURI", "YURIKO", "YVETTE",
		"YVONE", "YVONNE", "ZACHARIAH", "ZACHARY", "ZACHERY", "ZACK", "ZACKARY", "ZADA", "ZAIDA", "ZANA",
		"ZANDRA", "ZANE", "ZELDA", "ZELLA", "ZELMA", "ZENA", "ZENAIDA", "ZENIA", "ZENOBIA", "ZETTA",
		"ZINA", "ZITA", "ZOE", "ZOFIA", "ZOILA", "ZOLA", "ZONA", "ZONIA", "ZORA", "ZORAIDA",
		"ZULA", "ZULEMA", "ZULMA"
	};

	for (int i = 0; i < (int)names.size(); i++) {
		int res = 0;
		for (int j = 0; j < (int)names[i].size(); j++) {
			res += ((int)names[i][j] - 64);
		}
		answer += (res * (i + 1));
	}

	return answer;
}
ull Problem_23() {
	ull answer = 0;

	auto get_fact_sum = [](int n) {
		ull ub = (ull)sqrt(n);
		ull ret = 1;

		for (ull i = 2; i <= ub; i++) 
			ret += n % i == 0 ? (i + n / i) : 0;

		return ret - (ub * ub == n ? ub : 0);
	};
	
	vector<int> a;
	unordered_set<int> n;
	for (int i = 1; i < 28123; i++) {
		n.insert(i);
		if (get_fact_sum(i) > i)
			a.push_back(i);
	}

	for (int i = 0; i < (int)a.size(); i++) {
		for (int j = 0; j < (int)a.size(); j++) {
			int s = a[i] + a[j];
			if (s > 28123)
				break;
			if (n.find(s) != n.end())
				n.erase(s);
		}
	}

	for (auto a : n) {
		answer += a;
	}

	return answer;
}
ull Problem_24() {
	vector<int> n = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

	for (int i = 1; i < 1000000; i++) {
		next_permutation(n.begin(), n.end());
	}

	string res = "";
	for (int i = 0; i < (int)n.size(); i++) {
		res += int_to_str(n[i]);
	}

	return str_to_ull(res);
}
ull Problem_25() {
	ull answer = 2;

	bignum a = 1, b = 1, c = 0;

	do {
		c = a + b;
		a = b;
		b = c;
		answer++;
	} while (c.str().length() != 1000);

	return answer;
}
ll Problem_27() {
	ll answer = 0;

	ll max = 0;
	for (int a = -999; a < 1000; a++) {
		for (int b = -1000; b <= 1000; b++) {
			int n = 0;
			while (is_prime(abs(n * n + a * n++ + b)));
			if (n - 1 > max) {
				max = n - 1;
				answer = a * b;
			}
		}
	}	

	return answer;
}
ull Problem_28() {
	ull answer = 0;

	for (int i = 1; i <= 500; i++) {
		int k = (int)pow((2 * i + 1), 2);
		answer += (k + (k - 2 * i) + (k - 4 * i) + (k - 6 * i));
	}

	return answer + 1;
}
ull Problem_29() {
	ull answer = 0;

	vector<bignum> n;
	n.reserve(100 * 100);
	for (int i = 2; i <= 100; i++) {
		for (int j = 2; j <= 100; j++) {
			bignum ret = i;
			for (int k = 1; k < j; k++)
				ret *= i;
			n.push_back(ret);
		}
	}

	sort(n.begin(), n.end());
	n.erase(unique(n.begin(), n.end()), n.end());
	
	return (ull)n.size();
}
ull Problem_30() {
	ull answer = 0;

	auto g = [](int n) {
		int ret = 0;
		int len = (int)log10(n) + 1;

		for (int i = 0; i < len; i++, n /= 10) {
			ret += (int)pow(n % 10, 5);
		}

		return ret;
	};

	for (int i = 2; i < 250000; i++) {
		answer += g(i) == i ? i : 0;
	}

	return answer;
}
ull Problem_31() {
	vector<int> c = {1, 2, 5, 10, 20, 50, 100};
	vector<int> m = {200, 100, 40, 20, 10, 4, 2};

	ull count = 0;
	for (int p1 = 0; p1 <= m[0]; p1++) {
		for (int p2 = 0; p2 <= m[1]; p2++) {
			for (int p5 = 0; p5 <= m[2]; p5++) {
				for (int p10 = 0; p10 <= m[3]; p10++) {
					for (int p20 = 0; p20 <= m[4]; p20++) {
						for (int p50 = 0; p50 <= m[5]; p50++) {
							for (int e1 = 0; e1 <= m[6]; e1++) {
								if (c[0] * p1 + c[1] * p2 + c[2] * p5 + c[3] * p10 + c[4] * p20 + c[5] * p50 + c[6] * e1 == 200) {
									count++;
								}
							}
						}
					}
				}
			}
		}
	}

	return count + 1;
}
ull Problem_32() {
	ull answer = 0;

	auto is_pan = [](int a, int b) {	
		vector<int> f = {1, 2, 3, 4, 5, 6, 7, 8, 9};
		vector<int> n = {a, b, a * b};
		for (int i = 0; i < (int)n.size(); i++) {
			while (n[i] > 0) {
				int l = n[i] % 10;
				if (l == 0) return false;
				f[l - 1] -= l;
				if (f[l - 1] < 0) return false;
				n[i] /= 10;
			}
		}

		for (int i = 0; i < (int)f.size(); i++) {
			if (f[i] != 0)
				return false;
		}

		return true;
	};

	is_pan(39, 186);

	map<int, int> res;
	for (int i = 1; i <= 99; i++) {
		for (int j = 1; j <= 1999; j++) {
			if (is_pan(i, j)) {
				//cout << i << " " << j << " " << i * j << '\n';
				res[i*j]++;
			}

		}
	}

	for (auto a : res) {
		answer += a.first;
	}

	return answer;
}
ull Problem_34() {
	ull answer = 0;

	vector<int> facts = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};

	auto f = [&](int n) {
		ull ret = 0;
		while (n > 0) {
			ret += facts[n % 10];
			n /= 10;
		}
		return ret;
	};

	for (int i = 3; i < 1000000; i++) {
		if (f(i) == i) {
			answer += i;
		}
	}

	return answer;
}
ull Problem_35() {
	ull answer = 0;

	vector<int> pows = {1, 10, 100, 1000, 10000, 100000};

	auto f = [&](int n) -> bool {
		int len = (int)log10(n) + 1;

		for (int i = 0; i < len; i++) {
			if (!is_prime(n))
				return false;
			int l = n % 10;
			n /= 10;
			n += (l * pows[len - 1]);
		}

		return true;
	};

	for (int i = 3; i < 1000000; i += 2) {
		if (f(i)) {
			answer++;
		}
	}

	return answer + 1;
}
ull Problem_36() {
	ull answer = 0;

	auto to_bin = [](int n) {
		static vector<int> pows = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288};

		string bin = "";

		int start = (int)log2(n);
		for (int i = start; i >= 0; i--) {
			if (n - pows[i] >= 0) {
				bin += "1";
				n -= pows[i];
			}
			else {
				bin += "0";
			}
		}

		return bin;
	};

	auto is_pal = [](const string &s) {
		int l = s.size() / 2;
		int l1 = s.length() - 1;
		for (int i = 0; i < l; i++) {
			if (s[i] != s[l1 - i])
				return false;
		}
		return true;
	};

	for (int i = 1; i < 1000000; i += 2) {
		if (is_pal(to_bin(i)) && is_pal(int_to_str(i))) {
			answer += i;
		}
	}

	return answer;
}
ull Problem_37() {
	ull answer = 0;

	static unordered_set<int> primes = {2, 3, 5, 7};

	auto trl = [&](int n) -> bool {
		n /= 10;
		while (n > 0) {
			if (primes.find(n) == primes.end())
				return false;	
			n /= 10;
		}
		return true;
	};

	auto tlr = [&](int n) -> bool {
		int l = (int)log10(n);
		int x = (int)pow(10, l);

		while (l > 0) {			
			n -= ((n / x) * x);
			l--;
			x /= 10;
			if (primes.find(n) == primes.end())
				return false;
		}
		
		return true;
	};

	for (int c = 0, i = 11; c < 11; i += 2) {
		if (is_prime(i)) {
			primes.insert(i);
			if (trl(i) && tlr(i)) {
				c++;
				answer += i;
			}
		}
	}

	return answer;
}
ull Problem_38() {
	ull answer = 0;

	auto is_pan = [](string s) {
		for (int i = 1; i <= 9; i++) 
			if (s.find((char)(i + 48)) == string::npos) 
				return false;
		return true;
	};

	for (int i = 1; i < 10000; i++) {
		string n = int_to_str(i);
		for (int j = 2;; j++) {
			n += int_to_str(i * j);
			if (n.size() >= 9)
				break;
		}
		if (n.size() == 9 && is_pan(n)) {
			ull a = str_to_ull(n);
			answer = a > answer ? a : answer;
		}
	}

	return answer;
}

ull Problem_40() {
	string d = "";
	//d.reserve(1000000);

	for (int i = 1; d.length() < 1000000; i++) {
		d += int_to_str(i);
	}

	return (d[0] - 48) * (d[9] - 48)* (d[99] - 48)* (d[999] - 48)* (d[9999] - 48) * (d[99999] - 48)* (d[999999] - 48);
}
ull Problem_41() {
	ull answer = 0;	

	string s = "123456789";
	for (int i = 0; i < 9; i++) {
		string t = s;			
		do {
			int n = str_to_int(t);
			answer = ((is_prime(n) && n > answer) ? n : answer);
		} while (next_permutation(t.begin(), t.end()));
		s.pop_back();
	}

	return answer;
}
ull Problem_42() {
	ull answer = 0;

	vector<string> w = {
		"A","ABILITY","ABLE","ABOUT","ABOVE","ABSENCE","ABSOLUTELY","ACADEMIC","ACCEPT",
		"ACCESS","ACCIDENT","ACCOMPANY","ACCORDING","ACCOUNT","ACHIEVE","ACHIEVEMENT","ACID","ACQUIRE",
		"ACROSS","ACT","ACTION","ACTIVE","ACTIVITY","ACTUAL","ACTUALLY","ADD","ADDITION",
		"ADDITIONAL","ADDRESS","ADMINISTRATION","ADMIT","ADOPT","ADULT","ADVANCE","ADVANTAGE","ADVICE",
		"ADVISE","AFFAIR","AFFECT","AFFORD","AFRAID","AFTER","AFTERNOON","AFTERWARDS","AGAIN",
		"AGAINST","AGE","AGENCY","AGENT","AGO","AGREE","AGREEMENT","AHEAD","AID",
		"AIM","AIR","AIRCRAFT","ALL","ALLOW","ALMOST","ALONE","ALONG","ALREADY",
		"ALRIGHT","ALSO","ALTERNATIVE","ALTHOUGH","ALWAYS","AMONG","AMONGST","AMOUNT","AN",
		"ANALYSIS","ANCIENT","AND","ANIMAL","ANNOUNCE","ANNUAL","ANOTHER","ANSWER","ANY",
		"ANYBODY","ANYONE","ANYTHING","ANYWAY","APART","APPARENT","APPARENTLY","APPEAL","APPEAR",
		"APPEARANCE","APPLICATION","APPLY","APPOINT","APPOINTMENT","APPROACH","APPROPRIATE","APPROVE","AREA",
		"ARGUE","ARGUMENT","ARISE","ARM","ARMY","AROUND","ARRANGE","ARRANGEMENT","ARRIVE",
		"ART","ARTICLE","ARTIST","AS","ASK","ASPECT","ASSEMBLY","ASSESS","ASSESSMENT",
		"ASSET","ASSOCIATE","ASSOCIATION","ASSUME","ASSUMPTION","AT","ATMOSPHERE","ATTACH","ATTACK",
		"ATTEMPT","ATTEND","ATTENTION","ATTITUDE","ATTRACT","ATTRACTIVE","AUDIENCE","AUTHOR","AUTHORITY",
		"AVAILABLE","AVERAGE","AVOID","AWARD","AWARE","AWAY","AYE","BABY","BACK",
		"BACKGROUND","BAD","BAG","BALANCE","BALL","BAND","BANK","BAR","BASE",
		"BASIC","BASIS","BATTLE","BE","BEAR","BEAT","BEAUTIFUL","BECAUSE","BECOME",
		"BED","BEDROOM","BEFORE","BEGIN","BEGINNING","BEHAVIOUR","BEHIND","BELIEF","BELIEVE",
		"BELONG","BELOW","BENEATH","BENEFIT","BESIDE","BEST","BETTER","BETWEEN","BEYOND",
		"BIG","BILL","BIND","BIRD","BIRTH","BIT","BLACK","BLOCK","BLOOD",
		"BLOODY","BLOW","BLUE","BOARD","BOAT","BODY","BONE","BOOK","BORDER",
		"BOTH","BOTTLE","BOTTOM","BOX","BOY","BRAIN","BRANCH","BREAK","BREATH",
		"BRIDGE","BRIEF","BRIGHT","BRING","BROAD","BROTHER","BUDGET","BUILD","BUILDING",
		"BURN","BUS","BUSINESS","BUSY","BUT","BUY","BY","CABINET","CALL",
		"CAMPAIGN","CAN","CANDIDATE","CAPABLE","CAPACITY","CAPITAL","CAR","CARD","CARE",
		"CAREER","CAREFUL","CAREFULLY","CARRY","CASE","CASH","CAT","CATCH","CATEGORY",
		"CAUSE","CELL","CENTRAL","CENTRE","CENTURY","CERTAIN","CERTAINLY","CHAIN","CHAIR",
		"CHAIRMAN","CHALLENGE","CHANCE","CHANGE","CHANNEL","CHAPTER","CHARACTER","CHARACTERISTIC","CHARGE",
		"CHEAP","CHECK","CHEMICAL","CHIEF","CHILD","CHOICE","CHOOSE","CHURCH","CIRCLE",
		"CIRCUMSTANCE","CITIZEN","CITY","CIVIL","CLAIM","CLASS","CLEAN","CLEAR","CLEARLY",
		"CLIENT","CLIMB","CLOSE","CLOSELY","CLOTHES","CLUB","COAL","CODE","COFFEE",
		"COLD","COLLEAGUE","COLLECT","COLLECTION","COLLEGE","COLOUR","COMBINATION","COMBINE","COME",
		"COMMENT","COMMERCIAL","COMMISSION","COMMIT","COMMITMENT","COMMITTEE","COMMON","COMMUNICATION","COMMUNITY",
		"COMPANY","COMPARE","COMPARISON","COMPETITION","COMPLETE","COMPLETELY","COMPLEX","COMPONENT","COMPUTER",
		"CONCENTRATE","CONCENTRATION","CONCEPT","CONCERN","CONCERNED","CONCLUDE","CONCLUSION","CONDITION","CONDUCT",
		"CONFERENCE","CONFIDENCE","CONFIRM","CONFLICT","CONGRESS","CONNECT","CONNECTION","CONSEQUENCE","CONSERVATIVE",
		"CONSIDER","CONSIDERABLE","CONSIDERATION","CONSIST","CONSTANT","CONSTRUCTION","CONSUMER","CONTACT","CONTAIN",
		"CONTENT","CONTEXT","CONTINUE","CONTRACT","CONTRAST","CONTRIBUTE","CONTRIBUTION","CONTROL","CONVENTION",
		"CONVERSATION","COPY","CORNER","CORPORATE","CORRECT","COS","COST","COULD","COUNCIL",
		"COUNT","COUNTRY","COUNTY","COUPLE","COURSE","COURT","COVER","CREATE","CREATION",
		"CREDIT","CRIME","CRIMINAL","CRISIS","CRITERION","CRITICAL","CRITICISM","CROSS","CROWD",
		"CRY","CULTURAL","CULTURE","CUP","CURRENT","CURRENTLY","CURRICULUM","CUSTOMER","CUT",
		"DAMAGE","DANGER","DANGEROUS","DARK","DATA","DATE","DAUGHTER","DAY","DEAD",
		"DEAL","DEATH","DEBATE","DEBT","DECADE","DECIDE","DECISION","DECLARE","DEEP",
		"DEFENCE","DEFENDANT","DEFINE","DEFINITION","DEGREE","DELIVER","DEMAND","DEMOCRATIC","DEMONSTRATE",
		"DENY","DEPARTMENT","DEPEND","DEPUTY","DERIVE","DESCRIBE","DESCRIPTION","DESIGN","DESIRE",
		"DESK","DESPITE","DESTROY","DETAIL","DETAILED","DETERMINE","DEVELOP","DEVELOPMENT","DEVICE",
		"DIE","DIFFERENCE","DIFFERENT","DIFFICULT","DIFFICULTY","DINNER","DIRECT","DIRECTION","DIRECTLY",
		"DIRECTOR","DISAPPEAR","DISCIPLINE","DISCOVER","DISCUSS","DISCUSSION","DISEASE","DISPLAY","DISTANCE",
		"DISTINCTION","DISTRIBUTION","DISTRICT","DIVIDE","DIVISION","DO","DOCTOR","DOCUMENT","DOG",
		"DOMESTIC","DOOR","DOUBLE","DOUBT","DOWN","DRAW","DRAWING","DREAM","DRESS",
		"DRINK","DRIVE","DRIVER","DROP","DRUG","DRY","DUE","DURING","DUTY",
		"EACH","EAR","EARLY","EARN","EARTH","EASILY","EAST","EASY","EAT",
		"ECONOMIC","ECONOMY","EDGE","EDITOR","EDUCATION","EDUCATIONAL","EFFECT","EFFECTIVE","EFFECTIVELY",
		"EFFORT","EGG","EITHER","ELDERLY","ELECTION","ELEMENT","ELSE","ELSEWHERE","EMERGE",
		"EMPHASIS","EMPLOY","EMPLOYEE","EMPLOYER","EMPLOYMENT","EMPTY","ENABLE","ENCOURAGE","END",
		"ENEMY","ENERGY","ENGINE","ENGINEERING","ENJOY","ENOUGH","ENSURE","ENTER","ENTERPRISE",
		"ENTIRE","ENTIRELY","ENTITLE","ENTRY","ENVIRONMENT","ENVIRONMENTAL","EQUAL","EQUALLY","EQUIPMENT",
		"ERROR","ESCAPE","ESPECIALLY","ESSENTIAL","ESTABLISH","ESTABLISHMENT","ESTATE","ESTIMATE","EVEN",
		"EVENING","EVENT","EVENTUALLY","EVER","EVERY","EVERYBODY","EVERYONE","EVERYTHING","EVIDENCE",
		"EXACTLY","EXAMINATION","EXAMINE","EXAMPLE","EXCELLENT","EXCEPT","EXCHANGE","EXECUTIVE","EXERCISE",
		"EXHIBITION","EXIST","EXISTENCE","EXISTING","EXPECT","EXPECTATION","EXPENDITURE","EXPENSE","EXPENSIVE",
		"EXPERIENCE","EXPERIMENT","EXPERT","EXPLAIN","EXPLANATION","EXPLORE","EXPRESS","EXPRESSION","EXTEND",
		"EXTENT","EXTERNAL","EXTRA","EXTREMELY","EYE","FACE","FACILITY","FACT","FACTOR",
		"FACTORY","FAIL","FAILURE","FAIR","FAIRLY","FAITH","FALL","FAMILIAR","FAMILY",
		"FAMOUS","FAR","FARM","FARMER","FASHION","FAST","FATHER","FAVOUR","FEAR",
		"FEATURE","FEE","FEEL","FEELING","FEMALE","FEW","FIELD","FIGHT","FIGURE",
		"FILE","FILL","FILM","FINAL","FINALLY","FINANCE","FINANCIAL","FIND","FINDING",
		"FINE","FINGER","FINISH","FIRE","FIRM","FIRST","FISH","FIT","FIX",
		"FLAT","FLIGHT","FLOOR","FLOW","FLOWER","FLY","FOCUS","FOLLOW","FOLLOWING",
		"FOOD","FOOT","FOOTBALL","FOR","FORCE","FOREIGN","FOREST","FORGET","FORM",
		"FORMAL","FORMER","FORWARD","FOUNDATION","FREE","FREEDOM","FREQUENTLY","FRESH","FRIEND",
		"FROM","FRONT","FRUIT","FUEL","FULL","FULLY","FUNCTION","FUND","FUNNY",
		"FURTHER","FUTURE","GAIN","GAME","GARDEN","GAS","GATE","GATHER","GENERAL",
		"GENERALLY","GENERATE","GENERATION","GENTLEMAN","GET","GIRL","GIVE","GLASS","GO",
		"GOAL","GOD","GOLD","GOOD","GOVERNMENT","GRANT","GREAT","GREEN","GREY",
		"GROUND","GROUP","GROW","GROWING","GROWTH","GUEST","GUIDE","GUN","HAIR",
		"HALF","HALL","HAND","HANDLE","HANG","HAPPEN","HAPPY","HARD","HARDLY",
		"HATE","HAVE","HE","HEAD","HEALTH","HEAR","HEART","HEAT","HEAVY",
		"HELL","HELP","HENCE","HER","HERE","HERSELF","HIDE","HIGH","HIGHLY",
		"HILL","HIM","HIMSELF","HIS","HISTORICAL","HISTORY","HIT","HOLD","HOLE",
		"HOLIDAY","HOME","HOPE","HORSE","HOSPITAL","HOT","HOTEL","HOUR","HOUSE",
		"HOUSEHOLD","HOUSING","HOW","HOWEVER","HUGE","HUMAN","HURT","HUSBAND","I",
		"IDEA","IDENTIFY","IF","IGNORE","ILLUSTRATE","IMAGE","IMAGINE","IMMEDIATE","IMMEDIATELY",
		"IMPACT","IMPLICATION","IMPLY","IMPORTANCE","IMPORTANT","IMPOSE","IMPOSSIBLE","IMPRESSION","IMPROVE",
		"IMPROVEMENT","IN","INCIDENT","INCLUDE","INCLUDING","INCOME","INCREASE","INCREASED","INCREASINGLY",
		"INDEED","INDEPENDENT","INDEX","INDICATE","INDIVIDUAL","INDUSTRIAL","INDUSTRY","INFLUENCE","INFORM",
		"INFORMATION","INITIAL","INITIATIVE","INJURY","INSIDE","INSIST","INSTANCE","INSTEAD","INSTITUTE",
		"INSTITUTION","INSTRUCTION","INSTRUMENT","INSURANCE","INTEND","INTENTION","INTEREST","INTERESTED","INTERESTING",
		"INTERNAL","INTERNATIONAL","INTERPRETATION","INTERVIEW","INTO","INTRODUCE","INTRODUCTION","INVESTIGATE","INVESTIGATION",
		"INVESTMENT","INVITE","INVOLVE","IRON","IS","ISLAND","ISSUE","IT","ITEM",
		"ITS","ITSELF","JOB","JOIN","JOINT","JOURNEY","JUDGE","JUMP","JUST",
		"JUSTICE","KEEP","KEY","KID","KILL","KIND","KING","KITCHEN","KNEE",
		"KNOW","KNOWLEDGE","LABOUR","LACK","LADY","LAND","LANGUAGE","LARGE","LARGELY",
		"LAST","LATE","LATER","LATTER","LAUGH","LAUNCH","LAW","LAWYER","LAY",
		"LEAD","LEADER","LEADERSHIP","LEADING","LEAF","LEAGUE","LEAN","LEARN","LEAST",
		"LEAVE","LEFT","LEG","LEGAL","LEGISLATION","LENGTH","LESS","LET","LETTER",
		"LEVEL","LIABILITY","LIBERAL","LIBRARY","LIE","LIFE","LIFT","LIGHT","LIKE",
		"LIKELY","LIMIT","LIMITED","LINE","LINK","LIP","LIST","LISTEN","LITERATURE",
		"LITTLE","LIVE","LIVING","LOAN","LOCAL","LOCATION","LONG","LOOK","LORD",
		"LOSE","LOSS","LOT","LOVE","LOVELY","LOW","LUNCH","MACHINE","MAGAZINE",
		"MAIN","MAINLY","MAINTAIN","MAJOR","MAJORITY","MAKE","MALE","MAN","MANAGE",
		"MANAGEMENT","MANAGER","MANNER","MANY","MAP","MARK","MARKET","MARRIAGE","MARRIED",
		"MARRY","MASS","MASTER","MATCH","MATERIAL","MATTER","MAY","MAYBE","ME",
		"MEAL","MEAN","MEANING","MEANS","MEANWHILE","MEASURE","MECHANISM","MEDIA","MEDICAL",
		"MEET","MEETING","MEMBER","MEMBERSHIP","MEMORY","MENTAL","MENTION","MERELY","MESSAGE",
		"METAL","METHOD","MIDDLE","MIGHT","MILE","MILITARY","MILK","MIND","MINE",
		"MINISTER","MINISTRY","MINUTE","MISS","MISTAKE","MODEL","MODERN","MODULE","MOMENT",
		"MONEY","MONTH","MORE","MORNING","MOST","MOTHER","MOTION","MOTOR","MOUNTAIN",
		"MOUTH","MOVE","MOVEMENT","MUCH","MURDER","MUSEUM","MUSIC","MUST","MY",
		"MYSELF","NAME","NARROW","NATION","NATIONAL","NATURAL","NATURE","NEAR","NEARLY",
		"NECESSARILY","NECESSARY","NECK","NEED","NEGOTIATION","NEIGHBOUR","NEITHER","NETWORK","NEVER",
		"NEVERTHELESS","NEW","NEWS","NEWSPAPER","NEXT","NICE","NIGHT","NO","NOBODY",
		"NOD","NOISE","NONE","NOR","NORMAL","NORMALLY","NORTH","NORTHERN","NOSE",
		"NOT","NOTE","NOTHING","NOTICE","NOTION","NOW","NUCLEAR","NUMBER","NURSE",
		"OBJECT","OBJECTIVE","OBSERVATION","OBSERVE","OBTAIN","OBVIOUS","OBVIOUSLY","OCCASION","OCCUR",
		"ODD","OF","OFF","OFFENCE","OFFER","OFFICE","OFFICER","OFFICIAL","OFTEN",
		"OIL","OKAY","OLD","ON","ONCE","ONE","ONLY","ONTO","OPEN",
		"OPERATE","OPERATION","OPINION","OPPORTUNITY","OPPOSITION","OPTION","OR","ORDER","ORDINARY",
		"ORGANISATION","ORGANISE","ORGANIZATION","ORIGIN","ORIGINAL","OTHER","OTHERWISE","OUGHT","OUR",
		"OURSELVES","OUT","OUTCOME","OUTPUT","OUTSIDE","OVER","OVERALL","OWN","OWNER",
		"PACKAGE","PAGE","PAIN","PAINT","PAINTING","PAIR","PANEL","PAPER","PARENT",
		"PARK","PARLIAMENT","PART","PARTICULAR","PARTICULARLY","PARTLY","PARTNER","PARTY","PASS",
		"PASSAGE","PAST","PATH","PATIENT","PATTERN","PAY","PAYMENT","PEACE","PENSION",
		"PEOPLE","PER","PERCENT","PERFECT","PERFORM","PERFORMANCE","PERHAPS","PERIOD","PERMANENT",
		"PERSON","PERSONAL","PERSUADE","PHASE","PHONE","PHOTOGRAPH","PHYSICAL","PICK","PICTURE",
		"PIECE","PLACE","PLAN","PLANNING","PLANT","PLASTIC","PLATE","PLAY","PLAYER",
		"PLEASE","PLEASURE","PLENTY","PLUS","POCKET","POINT","POLICE","POLICY","POLITICAL",
		"POLITICS","POOL","POOR","POPULAR","POPULATION","POSITION","POSITIVE","POSSIBILITY","POSSIBLE",
		"POSSIBLY","POST","POTENTIAL","POUND","POWER","POWERFUL","PRACTICAL","PRACTICE","PREFER",
		"PREPARE","PRESENCE","PRESENT","PRESIDENT","PRESS","PRESSURE","PRETTY","PREVENT","PREVIOUS",
		"PREVIOUSLY","PRICE","PRIMARY","PRIME","PRINCIPLE","PRIORITY","PRISON","PRISONER","PRIVATE",
		"PROBABLY","PROBLEM","PROCEDURE","PROCESS","PRODUCE","PRODUCT","PRODUCTION","PROFESSIONAL","PROFIT",
		"PROGRAM","PROGRAMME","PROGRESS","PROJECT","PROMISE","PROMOTE","PROPER","PROPERLY","PROPERTY",
		"PROPORTION","PROPOSE","PROPOSAL","PROSPECT","PROTECT","PROTECTION","PROVE","PROVIDE","PROVIDED",
		"PROVISION","PUB","PUBLIC","PUBLICATION","PUBLISH","PULL","PUPIL","PURPOSE","PUSH",
		"PUT","QUALITY","QUARTER","QUESTION","QUICK","QUICKLY","QUIET","QUITE","RACE",
		"RADIO","RAILWAY","RAIN","RAISE","RANGE","RAPIDLY","RARE","RATE","RATHER",
		"REACH","REACTION","READ","READER","READING","READY","REAL","REALISE","REALITY",
		"REALIZE","REALLY","REASON","REASONABLE","RECALL","RECEIVE","RECENT","RECENTLY","RECOGNISE",
		"RECOGNITION","RECOGNIZE","RECOMMEND","RECORD","RECOVER","RED","REDUCE","REDUCTION","REFER",
		"REFERENCE","REFLECT","REFORM","REFUSE","REGARD","REGION","REGIONAL","REGULAR","REGULATION",
		"REJECT","RELATE","RELATION","RELATIONSHIP","RELATIVE","RELATIVELY","RELEASE","RELEVANT","RELIEF",
		"RELIGION","RELIGIOUS","RELY","REMAIN","REMEMBER","REMIND","REMOVE","REPEAT","REPLACE",
		"REPLY","REPORT","REPRESENT","REPRESENTATION","REPRESENTATIVE","REQUEST","REQUIRE","REQUIREMENT","RESEARCH",
		"RESOURCE","RESPECT","RESPOND","RESPONSE","RESPONSIBILITY","RESPONSIBLE","REST","RESTAURANT","RESULT",
		"RETAIN","RETURN","REVEAL","REVENUE","REVIEW","REVOLUTION","RICH","RIDE","RIGHT",
		"RING","RISE","RISK","RIVER","ROAD","ROCK","ROLE","ROLL","ROOF",
		"ROOM","ROUND","ROUTE","ROW","ROYAL","RULE","RUN","RURAL","SAFE",
		"SAFETY","SALE","SAME","SAMPLE","SATISFY","SAVE","SAY","SCALE","SCENE",
		"SCHEME","SCHOOL","SCIENCE","SCIENTIFIC","SCIENTIST","SCORE","SCREEN","SEA","SEARCH",
		"SEASON","SEAT","SECOND","SECONDARY","SECRETARY","SECTION","SECTOR","SECURE","SECURITY",
		"SEE","SEEK","SEEM","SELECT","SELECTION","SELL","SEND","SENIOR","SENSE",
		"SENTENCE","SEPARATE","SEQUENCE","SERIES","SERIOUS","SERIOUSLY","SERVANT","SERVE","SERVICE",
		"SESSION","SET","SETTLE","SETTLEMENT","SEVERAL","SEVERE","SEX","SEXUAL","SHAKE",
		"SHALL","SHAPE","SHARE","SHE","SHEET","SHIP","SHOE","SHOOT","SHOP",
		"SHORT","SHOT","SHOULD","SHOULDER","SHOUT","SHOW","SHUT","SIDE","SIGHT",
		"SIGN","SIGNAL","SIGNIFICANCE","SIGNIFICANT","SILENCE","SIMILAR","SIMPLE","SIMPLY","SINCE",
		"SING","SINGLE","SIR","SISTER","SIT","SITE","SITUATION","SIZE","SKILL",
		"SKIN","SKY","SLEEP","SLIGHTLY","SLIP","SLOW","SLOWLY","SMALL","SMILE",
		"SO","SOCIAL","SOCIETY","SOFT","SOFTWARE","SOIL","SOLDIER","SOLICITOR","SOLUTION",
		"SOME","SOMEBODY","SOMEONE","SOMETHING","SOMETIMES","SOMEWHAT","SOMEWHERE","SON","SONG",
		"SOON","SORRY","SORT","SOUND","SOURCE","SOUTH","SOUTHERN","SPACE","SPEAK",
		"SPEAKER","SPECIAL","SPECIES","SPECIFIC","SPEECH","SPEED","SPEND","SPIRIT","SPORT",
		"SPOT","SPREAD","SPRING","STAFF","STAGE","STAND","STANDARD","STAR","START",
		"STATE","STATEMENT","STATION","STATUS","STAY","STEAL","STEP","STICK","STILL",
		"STOCK","STONE","STOP","STORE","STORY","STRAIGHT","STRANGE","STRATEGY","STREET",
		"STRENGTH","STRIKE","STRONG","STRONGLY","STRUCTURE","STUDENT","STUDIO","STUDY","STUFF",
		"STYLE","SUBJECT","SUBSTANTIAL","SUCCEED","SUCCESS","SUCCESSFUL","SUCH","SUDDENLY","SUFFER",
		"SUFFICIENT","SUGGEST","SUGGESTION","SUITABLE","SUM","SUMMER","SUN","SUPPLY","SUPPORT",
		"SUPPOSE","SURE","SURELY","SURFACE","SURPRISE","SURROUND","SURVEY","SURVIVE","SWITCH",
		"SYSTEM","TABLE","TAKE","TALK","TALL","TAPE","TARGET","TASK","TAX",
		"TEA","TEACH","TEACHER","TEACHING","TEAM","TEAR","TECHNICAL","TECHNIQUE","TECHNOLOGY",
		"TELEPHONE","TELEVISION","TELL","TEMPERATURE","TEND","TERM","TERMS","TERRIBLE","TEST",
		"TEXT","THAN","THANK","THANKS","THAT","THE","THEATRE","THEIR","THEM",
		"THEME","THEMSELVES","THEN","THEORY","THERE","THEREFORE","THESE","THEY","THIN",
		"THING","THINK","THIS","THOSE","THOUGH","THOUGHT","THREAT","THREATEN","THROUGH",
		"THROUGHOUT","THROW","THUS","TICKET","TIME","TINY","TITLE","TO","TODAY",
		"TOGETHER","TOMORROW","TONE","TONIGHT","TOO","TOOL","TOOTH","TOP","TOTAL",
		"TOTALLY","TOUCH","TOUR","TOWARDS","TOWN","TRACK","TRADE","TRADITION","TRADITIONAL",
		"TRAFFIC","TRAIN","TRAINING","TRANSFER","TRANSPORT","TRAVEL","TREAT","TREATMENT","TREATY",
		"TREE","TREND","TRIAL","TRIP","TROOP","TROUBLE","TRUE","TRUST","TRUTH",
		"TRY","TURN","TWICE","TYPE","TYPICAL","UNABLE","UNDER","UNDERSTAND","UNDERSTANDING",
		"UNDERTAKE","UNEMPLOYMENT","UNFORTUNATELY","UNION","UNIT","UNITED","UNIVERSITY","UNLESS","UNLIKELY",
		"UNTIL","UP","UPON","UPPER","URBAN","US","USE","USED","USEFUL",
		"USER","USUAL","USUALLY","VALUE","VARIATION","VARIETY","VARIOUS","VARY","VAST",
		"VEHICLE","VERSION","VERY","VIA","VICTIM","VICTORY","VIDEO","VIEW","VILLAGE",
		"VIOLENCE","VISION","VISIT","VISITOR","VITAL","VOICE","VOLUME","VOTE","WAGE",
		"WAIT","WALK","WALL","WANT","WAR","WARM","WARN","WASH","WATCH",
		"WATER","WAVE","WAY","WE","WEAK","WEAPON","WEAR","WEATHER","WEEK",
		"WEEKEND","WEIGHT","WELCOME","WELFARE","WELL","WEST","WESTERN","WHAT","WHATEVER",
		"WHEN","WHERE","WHEREAS","WHETHER","WHICH","WHILE","WHILST","WHITE","WHO",
		"WHOLE","WHOM","WHOSE","WHY","WIDE","WIDELY","WIFE","WILD","WILL",
		"WIN","WIND","WINDOW","WINE","WING","WINNER","WINTER","WISH","WITH",
		"WITHDRAW","WITHIN","WITHOUT","WOMAN","WONDER","WONDERFUL","WOOD","WORD","WORK",
		"WORKER","WORKING","WORKS","WORLD","WORRY","WORTH","WOULD","WRITE","WRITER",
		"WRITING","WRONG","YARD","YEAH","YEAR","YES","YESTERDAY","YET","YOU",
		"YOUNG","YOUR","YOURSELF","YOUTH"
	};

	for (int i = 0; i < w.size(); i++) {
		int n = 0;
		for (int j = 0; j < w[i].size(); j++)
			n += (w[i][j] - 64);
		double res = sqrt(2.0 * (double)n + .25) - .5;
		if ((int)res == res)
			answer++;
	}

	return answer;
}
ull Problem_43() {
	ull answer = 0;

	string s = "0123456789";
	vector<int> p = {17, 13, 11, 7, 5, 3, 2};
	
	do {
		int i = 0;
		for (i = 0; i < p.size(); i++) {
			if (str_to_int(s.substr(s.size() - 3 - i, 3)) % p[i] != 0)
				break;					
		}
		if (i == 7) 
			answer += str_to_ull(s);
	} while (next_permutation(s.begin(), s.end()));

	return answer;
}

ull Problem_54() {
	//TODO Problem_54
	unsigned long long answer = 0;	

	const vector<string> hands = {
		"8CTSKC9H4S7D2S5D3SAC",
		"5CAD5DAC9C7C5H8DTDKS",
		"3H7H6SKCJSQHTDJC2D8S",
		"TH8H5CQSTC9H4DJCKSJS",
		"7C5HKCQHJDASKH4CAD4S",
		"5HKS9C7D9H8D3S5D5CAH",
		"6H4H5C3H2H3SQH5S6SAS",
		"TD8C4H7CTCKC4C3H7SKS",
		"7C9C6DKD3H4CQSQCACKH",
		"JC6S5H2H2DKD9D7CASJS",
		"ADQHTH9D8HTS6D3SASAC",
		"2H4S5C5STCKCJD6CTS3C",
		"QDAS6HJS2C3D9HKC4H8S",
		"KD8S9S7C2S3S6D6S4HKC",
		"3C8C2D7D4D9S4SQH4HJD",
		"8CKC7STC2DTS8HQDAC5C",
		"3DKHQD6C6SADAS8H2HQS",
		"6S8D4C8S6CQHTC6D7D9D",
		"2S8D8C4CTS9S9D9CAC3D",
		"3CQS2S4HJH3D2DTD8S9H",
		"5HQS8S6D3C8CJDAS7H7D",
		"6HTD9DASJH6CQC9SKDJC",
		"AH8SQS4DTHACTS3C3D5C",
		"5S4DJS3D8H6CTS3SAD8C",
		"6D7C5D5H3S5CJC2H5S3D",
		"5H6H2SKS3D5DJD7HJS8H",
		"KH4HASJSQSQCTC6D7CKS",
		"3DQSTS2HJS4DAS9SJCKD",
		"QD5H4D5DKH7H3DJSKD4H",
		"2C9H6H5C9D6CJC2DTH9S",
		"7D6DASQDJH4DJS7CQS5C",
		"3HKHQDAD8C8H3STH9D5S",
		"AH9S4D9D8S4HJS3CTC8D",
		"2CKS5HQD3STS9HAHAD8S",
		"5C7H5DKD9H4D3D2DKSAD",
		"KSKC9S6D2CQH9D9HTSTC",
		"9C6H5DQH4DAD6DQCJSKH",
		"9S3H9DJD5C4D9HASTCQH",
		"2C6DJC9C3CAD9SKH9D7D",
		"KC9C7CJCJSKD3HAS3C7D",
		"QDKHQS2C3S8S8H9H9CJC",
		"QH8D3CKC4C4H6DAD9H9D",
		"3SKSQS7HKH7D5H5DJDAD",
		"2H2C6HTHTC7D8D4H8CAS",
		"4S2HACQC3S6DTH4D4CKH",
		"4DTCKSAS7C3C6D2D9H6C",
		"8CTD5DQS2C7H4C9C3H9H",
		"5HJHTS7STD6HADQD8H8S",
		"5SAD9C8C7C8D5H9D8S2S",
		"4HKHKS9S2SKC5SAD4S7D",
		"QS9CQD6HJS5DAC8D2SAS",
		"KHACJC3S9D9S3C9C5SJS",
		"AD3C3DKS3S5C9C8CTS4S",
		"JH8D5D6HKDQSQD3D6CKC",
		"8SJD6C3S8CTCQC3CQHJS",
		"KCJC8H2S9H9CJH8S8C9S",
		"8S2HQH4DQC9DKCASTH3C",
		"8S6HTH7C2H6S3C3HAS7S",
		"QH5SJS4H5HTS8HAHACJC",
		"9D8H2S4STCJC3C7H3H5C",
		"3DAD3C3S4CQCAS5DTH8C",
		"6S9D4CJSKHAHTSJD8HAD",
		"4C6S9D7SAC4D3D3STCJD",
		"AD7H6H4HJHKCTDTS7D6S",
		"8HJHTC3S8D8C9S2C5C4D",
		"2C9DKCQHTHQSJC9C4HTS",
		"QS3CQD8HKH4H8DTD8SAC",
		"7C3CTH5S8H8C9CJDTCKD",
		"QCTCJDTS8C3H6HKD7CTD",
		"JHQSKS9C6D6SAS9HKH6H",
		"2H4DAH2DJH6HTD5D4HJD",
		"KD8C9SJHQDJS2CQS5C7C",
		"4STC7H8D2S6H7S9C7CKC",
		"8C5D7H4STDQC8SJS4HKS",
		"AD8SJH6DTDKD7C6C2D7D",
		"JC6H6SJS4HQH9HAH4C3C",
		"6H5HAS7C7S3DKHKC5D5C",
		"JC3DTDAS4D6D6SQHJDKS",
		"8C7S8SQH2SJD5C7HAHQD",
		"8S3C6H6C2C8DTD7D4C4D",
		"5DQHKH7C2S7HJS6DQCQD",
		"AD6C6S7DTH6H2H8HKH4H",
		"KSJSKD5D2DKH7D9C8C3D",
		"9C6DQD3CKS3S7SAHJD2D",
		"AHQHASJC8S8H4CKCTH7D",
		"JC5HTD7C5DKD4CAD8HJS",
		"KC2HACAH7DJHKH5D7S6D",
		"9S5S9C6H8STDJD9H6CAC",
		"7D8S6DTSKD7HAC5S7C5D",
		"AHQCJC4CTC8C2HTS2C7D",
		"KDKC6S3D7D2S8S3H5S5C",
		"8S5D8H4C6HKC3H7C5SKD",
		"JH8C3D3C6CKCTD7H7C4C",
		"JCKC6HTSQSTDKS8H8C9S",
		"6C5S9CQH7DAHKSKC9S2C",
		"4D4S8HTD9C3S7D9DASTH",
		"6S7D3C6H5DKD2C5C9D9C",
		"2HKC3DAD3HQDQS8DJC4S",
		"8C3H9C7CAD5DJC9DJSAS",
		"5D9H5C7H6S6CQCJCQD9S",
		"JCQSJH2C6S9CQC3D4STC",
		"4H5S8D3D4D2SKC2HJS2C",
		"TD3STHKD4D7HJHJSKSAC",
		"7S8C9S2D8S7D5CAD9DAS",
		"8C7H2S6CTH3H4C3S8HAC",
		"KD5HJC8HJD2D4HTDJH5C",
		"3DASQHKS7HJD8S5S6D5H",
		"9S6STCQSJC5C5D9CTH8C",
		"5H3SJH9H2S2C6S7SASKS",
		"8CQDJCQSTCQC4HACKH6C",
		"TC5H7DJH4H2H8DJCKS4D",
		"5S9CKHKD9H5CTS3D7D2D",
		"5HASTC4D8C2CTS9D3H8D",
		"6H8D2D9HJD6C4S5H5S6D",
		"AD9CJC7D6H9S6DJS9H3C",
		"ADJHTCQS4C5D9S7C9CAH",
		"KD6H2HTH8SQDKS9D9HAS",
		"4H8H8D5H6CAH5SASAD8S",
		"QS5D4S2HTDKS5HAC3HJC",
		"9C7DQDKDAC6D5HQH6H5S",
		"KCAHQH2H7DQS3HKS7SJD",
		"6C8S3H6DKSQD5D5C8HTC",
		"9H4D4S6S9DKHQC4H6CJD",
		"TD2DQH4S6HJHKD3CQD8C",
		"4S6H7CQD9DASAH6SAD3C",
		"2CKCTH6H8DAH5C6D8S5D",
		"TDTS7CADJCQD9H3CKC7H",
		"5D4D5S8H4H7D3HJDKD2D",
		"JHTD6HQS4SKD5C8S7D8H",
		"AC3DAS8CTD7HKH5D6CJD",
		"9DKS7C6DQHTCJDKDASKC",
		"JH8S5S7S7DAS2D3DAD2H",
		"2H5DAS3CQDKC6H9H9S2C",
		"9D5DTH4CJH3H8DTC8H9H",
		"6HKD2CTD2H6C9D2DJS8C",
		"KD7S3C7CASQHTSAD8C2S",
		"QS8H6CJS4C9SQCADTDTS",
		"2H7CTSTC8C3C9H2D6DJC",
		"TC2H8DJHKS6D3HTDTH8H",
		"9DTD9HQC5D6C8H8CKCTS",
		"2H8C3DAH4DTHTC7D8HKC",
		"TS5C2D8C6SKHAH5H6HKC",
		"5S5DAHTC4CJD8D6H8C6C",
		"KCQD3D8H2DJC9H4HAD2S",
		"TD6S7DJSKD4HQS2S3S8C",
		"4C9HJHTS3S4HQC5S9S9C",
		"2CKD9HJS9S3HJCTS5DAC",
		"AS2H5DAD5HJC7STDJS4C",
		"2D4S8H3D7D2CADKD9CTS",
		"7HQDJH5HJSAC3DTH4C8H",
		"6DKHKCQD5CAD7C2D4HAC",
		"3D9DTC8SQD2CJC4HJDAH",
		"6CTD5STC8SAH2C5DASAC",
		"TH7S3DAS6C4C7H7D4HAH",
		"5C2HKS6H7S4H5H3D3C7H",
		"3C9SAC7SQH2H3D6S3S3H",
		"2D3HAS2C6HTCJS6S9C6C",
		"QHKDQD6DAC6HKH2CTS8C",
		"8H7D3S9H5D3H4SQC9S5H",
		"2D9D7H6H3C8S5H4D3S4S",
		"KD9S4STC7SQC3S8S2H7H",
		"TC3D8C3H6C2H6HKSKD4D",
		"KC3D9S3HJS4S8H2D6C8S",
		"6HQS6CTCQD9H7D7C5H4D",
		"TD9D8D6S6CTC5DTSJS8H",
		"4HKCJD9HTC2C6S5H8HAS",
		"JS9C5C6S9DJD8HKC4C6D",
		"4D8D8S6C7C6H7H8H5CKC",
		"TC3DJC6DKS9S6H7S9C2C",
		"6C3SKD5HTS7D9H9S6HKH",
		"3DQD4C6HTSAC3S5C2HKD",
		"4CASJS9S7CTS7H9HJCKS",
		"4H8CJD3H6HAD9S4S5SKS",
		"4C2C7D3DAS9C2SQSKC6C",
		"8S5H3D2SAC9D6S3S4DTD",
		"QDTH7STS3DAC7H6C5DQC",
		"TCQDAD9CQS5C8DKD3D3C",
		"9D8HAS3S7C8SJD2D8DKC",
		"4CTHACQHJS8D7D7S9CKH",
		"9D8D4CJH2C2SQDKDTS4H",
		"4D6D5D2DJH3S8S3HTCKH",
		"AD4D2CQS8CKDJHJDAH5C",
		"5C6C5H2HJH4HKS7CTC3H",
		"3C4CQC5DJH9CQDKH8DTC",
		"3H9CJS7HQHAS7C9H5HJC",
		"2D5SQD4S3CKC6S6C5C4C",
		"5DKH2DTS8S9CAS9S7C4C",
		"7CAH8C8D5SKDQHQSJH2C",
		"8C9DAH2HACQC5S8H7H2C",
		"QD9H5SQSQC9C5HJCTH4H",
		"6C6S3H5H3S6HKS8DAC7S",
		"ACQH7H8C4SKC6C3D3STC",
		"9D3DJSTHAC5H3H8S3STC",
		"QDKHJSKS9SQC8DAH3CAC",
		"5H6CKH3S9SJH2DQDAS8C",
		"6C4D7S7H5SJC6S9H4HJH",
		"AH5S6H9SAD3STH2H9D8C",
		"4C8D9H7CQCAD4S9CKC5S",
		"9D6H4DTC4CJH2S5D3SAS",
		"2H6C7CKH5CADQSTHJD8S",
		"3S4S7SAHASKCJS2SADTH",
		"JSKC2S7D8C5C9CTS5H9D",
		"7S9S4DTDJHJSKH6H5D2C",
		"JDJSJCTH2D3DQD8CAC5H",
		"7SKH5S9D5DTD4S6H3C2D",
		"4S5DAC8D4D7CADASAH9C",
		"6STHTSKS2CQCAHAS3C4S",
		"2H8C3SJC5C7C3H3CKHJH",
		"7S3HJC5S6H4C2S4DKC7H",
		"4D7C4H9S8S6SADTC6CJC",
		"KHQS3STC4C8H8SAC3CTS",
		"QDQSTH3CTS7H7DAHTDJC",
		"TDJDQC4D9S7STSAD7DAC",
		"AH7H4S6D7C2H9DKSJCTD",
		"7CAHJD4H6DQSTS2H2C5C",
		"TCKC8C9S4CJS3CJC6SAH",
		"AS7DQC3D5SJCJD9DTDKH",
		"TH3C2S6HAHAC5H5C7S8H",
		"QC2DACQD2S3SJDQS6S8H",
		"KC4H3C9DJS6H3S8SAS8C",
		"7HKC7DJD2HJCQH5S3HQS",
		"9HTD3S8H7SAC5C6CAH7C",
		"8D9HAHJDTDQS7D3S9C8S",
		"AHQH3CJDKC4S5S5DTDKS",
		"9H7H6SJHTH4C7CAD5C2D",
		"7CKD5STC9D6S6C5D2STH",
		"KC9H8D5H7H4HQC3D7CAS",
		"6S8SQCTD4S5CTHQSQD2S",
		"8S5HTHQC9H6SKC7D7C5C",
		"7HKDAH4DKH5C4S2DKCQH",
		"6S2CTDJCAS4D6C8C4H5S",
		"JCTCJD5S6S8DAS9DAD3S",
		"6D6H5D5STC3D7DQS9DQD",
		"4S6C8S3S7SADKS2D7D7C",
		"KCQHJCACQD5D8DQS7H7D",
		"JSAH8S5H3DTD3H4S6CJH",
		"4SQS7DAS9HJSKS6DTC5C",
		"2D5C6HTC4DQH3D9H8S6C",
		"6D7HTCTH5SJD5C9CKSKD",
		"8DTDQH6S4S6C8SKC5CTC",
		"5S3DKSAC4S7DQD4CTH2S",
		"TS8H9S6S7SQH3CAH7H8C",
		"4C8CTSJSQC3D7D5D7SJH",
		"8S7S9DQCAC7C6D2HJHKC",
		"JSKD3C6S4S7CAHQCKS5H",
		"KS6S4HJDQSTC8HKC6HAS",
		"KH7CTC6STDJC5C7DAH3S",
		"3H4C4HTCTH6S7H6D9CQH",
		"7D5H4S8CJS4D3D8SQHKC",
		"3H6SAD7H3SQC8S4S7SJS",
		"3SJDKHTH6HQS9C6C2DQD",
		"4SQH4D5HKC7D6D8DTH5S",
		"TDAD6S7HKDKH9H5SKCJC",
		"3HQCASTS4SQDKS9C7SKC",
		"TS6SQC6CTHTC9D5C5DKD",
		"JS3S4HKD4CQD6D9SJC9D",
		"8SJS6D4HJH6H6S6CKSKH",
		"AC7D5DTC9SKH6SQD6HAS",
		"AS7H6DQH8DTH2SKH5C5H",
		"4C7C3DQCTC4SKH8C2DJS",
		"6H5D7S5H9C9HJH8STH7H",
		"ASJS2SQDKH8H4SAC8D8S",
		"3H4CTDKD8CJC5CQS2DJD",
		"TS7D5D6C2CQS2H3CAHKS",
		"4S7C9C7DJH6C5C8H9DQD",
		"2STD7S6D9C9SQSKHQH5C",
		"JC6S9CQHJH8D7SJSKH2H",
		"8D5HTHKC4D4S3S6S3DQS",
		"2DJD4CTD7C6DTH7SJCAH",
		"QS7S4CTH9DTSAD4D3H6H",
		"2D3H7DJD3DAS2S9CQC8S",
		"4H9H9C2C7SJHKD5C5D6H",
		"TC9H8HJC3C9S8DKSADKC",
		"TS5HJDQSQHQC8D5DKHAH",
		"5DAS8S6S4CAHQCQDTH7H",
		"3H4H7D6S4S9HAS8HJS9D",
		"JD8C2C9D7D5H5S9SJCKD",
		"KD9C4SQDAH7CAD9DACTD",
		"6S4H4S9C8DKSTC9DJH7C",
		"5SJC5H4SQHAC2CJS2S9S",
		"8C5HASQDAD5C7D8SQCTD",
		"JC4C8D5CKHQS4D6H2H2C",
		"TH4S2DKC3HQDAC7HAD9D",
		"KHQDAS8HTHKC8D7SQH8C",
		"JC6C7D8CKHADQS2H6S2D",
		"JCKH2D7DJSQC5H4C5DAD",
		"TS3SAD4STD2DTH6S9HJH",
		"9H2DQS2C4S3DKHASAC9D",
		"KH6S8H4SKD7D9DTSQDQC",
		"JH5HAHKSASADJCQC5SKH",
		"5D7D6DKSKD3D7C4DJD3S",
		"ACJS8D5H9C3H4H4DTS2C",
		"6HKSKH9D7C2S6S8S2H3D",
		"6HACJS7S3STD8H3H4HTH",
		"9HTCQCKC5CKS6H4HAC8S",
		"TC7DQH4SJCTS6D6CACKH",
		"QH7D7CJHQSQDTH3H5DKS",
		"3D5S8DJS4C2CKS7H9C4H",
		"5H8S4HTD2C3SQDQC3HKC",
		"QCJSKD9CAD5S9D7D7HTS",
		"8CJCKH7C7S6CTS2CQDTH",
		"5S9DTH3C7SQH8S9C2H5H",
		"5D9H6H2SJSKH3H7C2H5S",
		"JD5D5S2CTC2S6S6C3C8S",
		"4DKH8H4H2DKS3H5C2S9H",
		"3S2DTD7H8S6HJDKC9C8D",
		"6SQDJH7C9H5H8S8HTHTD",
		"QS7STD7DTSJCKD7C3C2C",
		"3CJD8S4H2D2STDAS4DAC",
		"AHKS6C4C4S7D8C9H6HAS",
		"5S3C9S2CQSKD4D4SAC5D",
		"2DTS2CJSKHQH5D8CASKC",
		"KD3H6CTH8S7SKH6H9SAC",
		"6H7S6CQSAH2S2H4H5D5H",
		"5HJCQD2C2SJDASQC6S7D",
		"6CTCASKD8H9D2C7DJH9S",
		"2H4C6CAH8STD3HTH7CTS",
		"KD4STS6CQH8D9D9CAH7D",
		"6DJS5CQDQC9C5D8C2HKD",
		"3CQHJHAD6SAHKC8S6D6H",
		"3D7C4C7S5S3S6S5HJC3C",
		"QH7C5H3C3S8CTS4CKD9C",
		"QD3S7S5H7HQHJC7C8CKD",
		"3CKDKH2S4CTSAC6S2C7C",
		"2CKH3C4C6H4D5H5S7SQD",
		"4D7C8SQDTS9DKS6HKD3C",
		"QS4DTS7S4C3HQD8D9STC",
		"TSQHAC6S3C9H9DQS8S6H",
		"3S7S5D4SJS2D6CQH6STH",
		"4C4HASJS5D3DTS9CAC8S",
		"6S9C7C3S5CQSADAS6H3C",
		"9S8C7H3H6S7CAS9HJDKH",
		"3D3H7S4D6C7CAC2H9CTH",
		"4H5S3HACTCTH9C9H9S8D",
		"8D9H5H4D6C2HQD6S5D3S",
		"4C5CJDQS4D3HTHACQH8C",
		"QC5S3C7HAD4CKS4HJD6D",
		"QSAH3HKS9H2SJSJH5H2H",
		"2H5STH6STS3SKS3C5HJS",
		"2D9S7H3DKCJH6D7DJSTD",
		"ACJS8H2C8CJHJC2DTH7S",
		"5D9S8H2H3DTCAHJCKD9C",
		"9DQDJC2H6DKHTS9SQHTH",
		"2C8D4SJD5H3HTHTC9CKC",
		"AS3D9H7D4DTHKH2H7S3H",
		"4H7SKS2SJSTS8S2HQD8D",
		"5S6HJHKS8H2SQCAC6S3S",
		"JCASADQS8H6CKH4C4DQD",
		"2S3DTSTD9SKS6SQS5C8D",
		"3C6D4SQCKCJHQDTHKHAD",
		"9HAH4DKS2S8DJHJC7CQS",
		"2D6CTH3C8HQDQH2S3SKS",
		"6H5D9S4CTSTDJSQD9DJD",
		"5H8HKH8SKS7CTDAD4SKD",
		"2C7CJC5SAS6C7D8S5H9C",
		"6SQD9STSKHQS5SQH3CKC",
		"7D3H3CKD5CASJH7H6HJD",
		"9D5C9HKC8HKS4SAD4D2S",
		"3SJDQD8D2S7C5S6S5HTS",
		"6D9SKCTD3S6HQDJD5C8D",
		"5H9DTSKD8D6HTDQC4C7D",
		"6D4SJD9DAH9SASTD9HQD",
		"2D5S2H9C6H9STDQC7DTC",
		"3S2HKSTS2C9C8SJS9D7D",
		"3CKC6D5D6C6H8SAS7SQS",
		"JH9S2H8D4C8H9HADTHKH",
		"QCAS2SJS5C6HKD3H7H2C",
		"QD8H2S8D3S6DAH2CTC5C",
		"JDJSTS8S3H5DTDKCJC6H",
		"6SQSTC3H5DAHJC7C7D4H",
		"7C5D8H9C2H9HJHKH5S2C",
		"9C7H6STH3SQCQD4CACJD",
		"2H5D9S7DKC3SQS2DASKH",
		"2S4S2H7D5CTDTHQH9S4D",
		"6D3STS6H4HKS9D8H5S2D",
		"9HKS4H3S5C5DKH6H6SJS",
		"KCAS8C4CJCKHQCTHQDAH",
		"6SKH9S2C5HTC3C7HJC4D",
		"JD4S6S5S8D7H7S4D4C2H",
		"7H9H5DKH9C7CTSTC7S5H",
		"4C8DQCTS4S9H3DADJS7C",
		"8CQS5C5D3HJSAHKC4S9D",
		"TSJD8SQSTHJHKH2DQDJS",
		"JDQC5D6S9H3S2C8H9STS",
		"2S4CAD7HJC5C2D6D4H3D",
		"7SJS2C4H8CADQD9C3STD",
		"JDTS4C6H9H7DQD6D3CAS",
		"AS7C4C6S5D5S5CJSQC4S",
		"KD6S9S7C3C5S7DJHQDJS",
		"4S7SJH2C8S5D7H3DQHAD",
		"TD6H2H8D4H2D7CADKH5D",
		"TS3S5H2CQDAH2S5CKHTD",
		"KC4D8C5DAS6C2H2S9H7C",
		"KDJSQCTSQSKHJH2C5DAD",
		"3S5HKC6C9H3H2HAD7D7S",
		"7SJSJHKD8S7D2S9H7C2H",
		"9H2D8DQC6SADAS8H5H6C",
		"2S7H6C6D7D8C5D9DJC3C",
		"7C9C7HJD2HKD3SKHAD4S",
		"QHAS9H4DJDKSKDTSKH5H",
		"4C8H5S3S3D7DTDAD7SKC",
		"JS8S5SJC8HTH9C4D5DKC",
		"7C5S9CQD2CQHJS5H8DKH",
		"TD2SKS3DADKC7STC3C5D",
		"4C2SADQS6C9SQDTHQH5C",
		"8CADQS2D2SKCJDKS6CJC",
		"8D4DJS2H5DQD7S7DQHTS",
		"6S7H3S8C8S9DQS8H6C9S",
		"4STC2S5CQD4DQS6DTH6S",
		"3S5C9D6H8D4C7DTC7CTD",
		"AH6SAS7H5SKD3H5HAC4C",
		"8D8SAHKSQS2CAD6H7D5D",
		"6H9H9S2HQS8S9C5D2DKD",
		"TSQC5SJH7D7STH9S9HAC",
		"7H3H6SKC4D6D5C4SQDTS",
		"TD2S7CQD3HJH9D4H7S7H",
		"KS3D4H5HTC2SAS2D6D7D",
		"8H3C7HTD3HADKCTH9CKH",
		"TC4C2C9S9D9C5C2HJD3C",
		"3HACTS5DAD8D6HQC6S8C",
		"2STS3SJD7H8SQH4C5S8D",
		"AC4S6C3CKH3D7C2D8S2H",
		"4H6C8STH2H4S8H9S3H7S",
		"7C4C9C2C5CAS5DKD4DQH",
		"9H4HTSAS7D8D5D9S8C2H",
		"QCKDACAD2H7SAS3S2D9S",
		"2HQC8HTC6DQDQS5DKH3C",
		"THJDQS4C2S5SAD7H3SAS",
		"7HJS3D6C3S6DAS9SACQS",
		"9CTSAS8CTC8S6H9D8D6C",
		"4DJD9CKC7C6DKS3S8CAS",
		"3H6STC8DTS3SKC9S7CAS",
		"8CQC4H4S8S6C3STCAHAC",
		"4D7D5CAS2H6STSQCADTC",
		"QDQC8S4STH3DAHTSJH4H",
		"5C2D9S2C3H3C9DQDQH7D",
		"KC9H6CKD7S3C4DASTC2D",
		"3DJS4D9DKS7DTHQC3H3C",
		"8D5S2H9D3H8C4C4H3CTH",
		"JCTH4S6SJD2D4D6C3D4C",
		"TS3S2D4HAC2C6S2HJH6H",
		"TD8SADTCAHACJH9S6S7S",
		"6CKC4SJD8D9H5S7HQHAH",
		"KD8DTSJH5C5H3HADASJS",
		"2D4H3D6C8C7SAD5D5C8S",
		"TD5D7S9C4S5H6C8C4C8S",
		"JSQH9CAS5CQSJC3DQC7C",
		"JC9CKHJHQSQC2CTS3DAD",
		"5DJHAC5C9STS4CJD8CKS",
		"KCAS2DKH9H2C5S4D3D6H",
		"THAH2D8SJC3D8CQH7S3S",
		"8HQD4HJCASKHKS3C9S6D",
		"9SQH7D9C4SAC7HKH4DKD",
		"AHADTH6D9C9SKDKSQH4H",
		"QD6H9C7CQS6D6S9D5SJH",
		"AH8D5HQD2HJCKS4HKH5S",
		"5C2SJS8D9C8C3DASKCAH",
		"JD9S2HQS8H5S8CTH5C4C",
		"QCQS8C2S2C3S9C4CKSKH",
		"2D5D8SAHADTD2CJSKS8C",
		"TC5S5H8HQC9H6HJD4H9S",
		"3CJH4H9HAH4S2H4C8DAC",
		"8STH4D7D6DQDQS7STC7C",
		"KH6D2DJD5HJSQDJH4H4S",
		"9C7SJH4S3STSQC8CTC4H",
		"QH9D4DJHQS3S2C7C6C2D",
		"4H9SJD5C5HAH9DTS2D4C",
		"KSJHTS5D2DAHJS7HAS8D",
		"JSAH8CADKS5S8H2C6CTH",
		"2H5DADACKS3D8HTS6HQC",
		"6D4HTS9C5HJSJH6SJD4C",
		"JHQH4H2C6D3C5D4CQSKC",
		"6H4H6C7H6S2S8SKHQC8C",
		"3H3D5DKS4HTDAD3S4DTS",
		"5S7C8S7D2CKS7S6C8CJS",
		"5D2H3S7C5CQD5H6D9C9H",
		"JS2SKD9S8DTDTSAC8C9D",
		"5HQD2SAC8C9HKS7C4S3C",
		"KHAS3H8S9CJSQS4SAD4D",
		"AS2STDAD4D9HJC4C5HQS",
		"5D7C4HTC2D6CJS4SKC3S",
		"4C2C5DAC9H3DJD8SQSQH",
		"2C8S6H3CQH6DTCKDACAH",
		"QC6C3SQS4SAC8D5CADKH",
		"5S4CACKHASQC2C5C8D9C",
		"8HJD3CKH8D5C9CQDQH9D",
		"7HTS2C8C4STDJC9C5HQH",
		"JS4S2C7CTH6CASKS7SJD",
		"JH7C9H7HTC5H3D6D5D4D",
		"2CQDJH2H9D5S3DTDADKS",
		"JDQH3S4DTH7D6SQSKS4H",
		"TCKS5S8D8HAD2S2D4CJH",
		"5SJHTC3S2DQS9D4CKD9S",
		"ACKH3HAS9DKC9HQD6C6S",
		"9H7S3D5C7DKCTD8H4H6S",
		"3C7H8HTCQD4D7S6SQH6C",
		"6DAD4CQD6C5D7D9DKSTS",
		"JH2HJD9S7STSKH8D5D8H",
		"2D9S4C7D9D5HQD6DAC6S",
		"7S6DJCQDJH4C6SQS2H7D",
		"8CTDJHKD2H5CQS2CJS7S",
		"TC5H4HJHQD3S5S5D8SKH",
		"KSKH7C2C5DJH6S9C6DJC",
		"5HAHJD9CJSKC2H6H4D5S",
		"AS3CTHQC6H9C8S8CTD7C",
		"KC2CQD9CKH4D7S3CTS9H",
		"9CQC2STS8CTD9SQD3S3C",
		"4D9DTHJHAH6S2SJDQHJS",
		"QD9H6CKD7D7H5D6S8HAH",
		"8H3C4S2H5HQSQH7S4HAC",
		"QS3C7S9S4H3SAHKS9D7C",
		"AD5S6S2H2D5HTC4S3C8C",
		"QHTS6S4DJSKSJHAS8S6D",
		"2C8S2STD5HASTCTS6CKC",
		"KCTS8H2H3H7C4C5STHTD",
		"KDADKH7H7S5D5H5S2D9C",
		"AD9S3D7S8CQC7C9CKDKS",
		"3CQC9S8C4D5CASQD6C2C",
		"2HKC8SJD7SAC8D5C2S4D",
		"9DQH3D2STC3SKS3C9HTD",
		"KD6SAC2C7H5H3S6C6H8C",
		"QHTC8S6SKHTH4H5DTS4D",
		"8CJS4H6H2C2H7DACQD3D",
		"QSKC6S2D5S4HTD3HJH4C",
		"7S5H7H8HKH6HQSTHKD7D",
		"5HADKD7CKH5STD6D3C6C",
		"8C9C5HJD7CKCKH7H2H3S",
		"7S4HAD4D8SQSTH3D7H5S",
		"8DTCKSKD9S6DADJD5C2S",
		"7H8H6CQD2H6H9DTC9S7C",
		"8D6D4C7C6C3CTHKHJSJH",
		"5S3S8SJS9HASAD8H7SKD",
		"JH7C2CKC5HASAD9C9SJS",
		"ADAC2C6SQD7C3HTHKSKD",
		"9DJD4H8H4CKH7STS8CKC",
		"3S5S2H7S6H7DKS5C6DAD",
		"5S8C9HQS7H7S2H6C7DTD",
		"QS5STDAC9DKC3DTC2D4D",
		"TD2H7DJDQD4C7H5DKC3D",
		"4C3H8SKDQH5SQC9HTC5H",
		"9CQDTH5HTS5C9HAHQH2C",
		"4D6S3CAC6C3D2C2HTDTH",
		"AC9C5DQC4DAD8D6D8CKC",
		"AD3C4HAC8D8H7S9STDJC",
		"4H9HQHJS2DTHTDTCKDKS",
		"5S6S9S8DTHASKH5H5C8S",
		"JD2S9S6S5S8S5D7S7H9D",
		"5D8C4C9DADTS2C7DKDTC",
		"8SQS4DKC5C8D4SKHJDKD",
		"AS5CADQH7D2H9S7H7CTC",
		"2S8SJDKH7S6C6DAD5DQC",
		"9H6H3S8C8HAHTC4HJSTD",
		"2CTS4D7H2DQC9C5DTH7C",
		"6C8HQC5DTSJH5C5H9H4S",
		"2DQC7HASJS8S2H4C4H8D",
		"JS6SACKD3D3C4S7HTHKC",
		"QHKH6SQS5S4H3CQD3S3H",
		"7HASKH8C4H9C5S3D6STS",
		"9C7C3H5SQD2C3DADAC5H",
		"JHTD2D4CTS3HKHAD3S7S",
		"AS4C5H4D6SKDJC3C6H2D",
		"3H6S8C2DTH4SAHQHAD5H",
		"7C2S9H7HKC5C6D5S3HJC",
		"3CTC9C4HQDTDJH6D9H5S",
		"7C6S5C5D6C4S7H9H6HAH",
		"AD2H7DKC2C4C2S9S7H3S",
		"TH4C8S6S3SADKSASJHTD",
		"5CTD4S4DAD6S5DTC9C7D",
		"8H3S4D4S5S6H5CAC3H3D",
		"9H3CAC4SQS8S9DQH5H4D",
		"JC6C5HTSAC9CJD8C7CQD",
		"8S8H9CJD2DQCQH6H3C8D",
		"KSJS2H6H5HQHQS3H7C6D",
		"TC3H4S7HQC2H3S8CJSKH",
		"AH8H5S4C9HJD3H7SJCAC",
		"3C2D4C5S6C4SQS3SJD3D",
		"5H2DTCAHKS6D7HAD8C6H",
		"6C7S3CJD7C8HKSKHAH6D",
		"AH7D3H8H8S7HQS5H9D2D",
		"JDAC4H7S8S9SKSAS9DQH",
		"7S2C8S5SJHQSJCAHKD4C",
		"AH2S9H4H8DTSTD6HQHJD",
		"4HJC3HQS6D7S9C8S9D8D",
		"5HTD4S9S4C8C8D7H3H3D",
		"QSKH3S2C2S3C7STD4SQD",
		"7CTD4D5SKHACAS7H4C6C",
		"2S5H6DJD9HQS8S2C2HTD",
		"2STS6H9H7S4HJC4C5D5S",
		"2C5H7D4H3SQHJCJS6D8H",
		"4CQH7CQD3SADTH8S5STS",
		"9HTC2STDJC7D3S3DTHQH",
		"7D4C8S5CJH8H6S3SKC3H",
		"JC3HKHTCQHTH6H2CAC5H",
		"QS2H9D2CAS6S6C2S8C8S",
		"9H7DQCTH4HKDQSAC7S3C",
		"4DJH6S5S8HKS9SQC3SAS",
		"JD2D6S7STC9HKC3H7DKD",
		"2HKH7C4D4S3HJSQD7DKC",
		"4CJCAS9D3CJS6C8HQD4D",
		"AHJS3S6C4C3DJH6D9C9H",
		"9H2D8C7H5SKS6H9C2STC",
		"6C8CAD7H6H3DKHAS5DTH",
		"KS8C3STS8S4D5S9S6C4H",
		"9H4S4H5C7DKC2D2H9DJH",
		"5CJSTC9D9H5H7SKHJC6S",
		"7C9H8H4DJCKHJD2HTDTC",
		"8H6C2H2CKH6H9DQSQH5H",
		"AC7D2S3DQDJC2D8DJDJH",
		"2HJC2D7H2C3C8DKDTD4H",
		"3S4H6D8DTS3HTD3D6HTH",
		"JHJC3SACQH9H7H8SQC2C",
		"7HTDQS4S8S9C2S5D4D2H",
		"3DTS3H2SQC8H6HKCJCKS",
		"5DJD7DTC8C6C9S3D8DAC",
		"8H6HJH6C5D8D8S4HAD2C",
		"9D4H2D2C3STSASTC3C5D",
		"4DTH5HKSQS6C4S2H3DAD",
		"5CKC6H2C5S3C4D2D9H9S",
		"JD4C3HTHQH9H5SAH8SAC",
		"7D9S6S2HTD9C4H8HQS4C",
		"3C6H5D4H8C9CKC6SQDQS",
		"3S9HKDTC2DJS8C6S4H4S",
		"2S4C8SQS6HKH3HTH8C5D",
		"2CKH5S3S7S7H6C9DQD8D",
		"8HKSAC2DKHTS6CJSKC7H",
		"9CKS5CTDQCAH6C5H9S7C",
		"5D4D3H4H6S7C7SAHQDTD",
		"2H7DQC6STCTSAH7S9D3H",
		"TH5HQD9SKS7S7C6H8CTD",
		"TH2D4DQC5C7DJDAH9C4H",
		"4H3HAH8D6HQCQH9H2H2C",
		"2DAD4CTS6H7STH4HQSTD",
		"3CKD2H3HQSJDTCQC5D8H",
		"KSJCQDTH9SKD8D8C2D9C",
		"3CQDKD6D4D8DAHADQC8S",
		"8H3S9D2S3HKS6H4C7CKC",
		"TH9S5C3D7D6HAC7S4D2C",
		"5C3DJD4D2D6D5H9H4CKH",
		"AS7HTD6C2H3DQDKS4C4S",
		"JC3CAC7CJDJS8H9SQC5D",
		"JD6S5S2HAS8C7D5HJH3D",
		"8DTC5S9S8S3HJC5H7SAS",
		"5CTD3D7D4H8D7H4D5DJS",
		"QS9CKSTD2S8S5C2H4HAS",
		"TH7S4H7D3HJDKD5D2SKC",
		"JD7H4S8H4CJS6HQH5S4H",
		"2CQS8C5S3HQC2S6CQDAD",
		"8C3DJDTC4H2HAD5SAC2S",
		"5D2CJS2DAD9D3D4C4SJH",
		"8D5H5D6H7S4DKS9DTDJD",
		"3D6D9C2SAS7D5S5C8HJD",
		"7C8S3S6S5HJDTCAD7H7S",
		"2S9DTS4DAC8D6CQDJD3H",
		"9SKH2C3CAC3D5H6H8D5D",
		"KS3D2D6SAS4C2S7C7HKH",
		"AC2H3SJC5CQH4D2D5H7S",
		"TSASJD8C6HJC8S5S2C5D",
		"7SQH7H6CQC8H2D7CJD2S",
		"2CQD2S2HJC9C5D2DJDJH",
		"7C5C9C8S7D6D8D6C9SJH",
		"2CAD6S5H3SKS7S9DKH4C",
		"7H6C2C5CTH9D8D3SQCAH",
		"5SKC6HTC5H8STH6D3CAH",
		"9CKD4HADTD9S4S7D6H5D",
		"7H5C5H6DAS4CKDKH4H9D",
		"3C2S5C6CJDQS2H9D7D3H",
		"AC2S6S7SJSQD5CQS6HAD",
		"5HTHQC7HTC3S7C6DKC3D",
		"4H3DQC9S8H2C3SJCKS5C",
		"4S6S2C6H8S3S3D9H3HJS",
		"4S8C4D2D8H9H7D9DAHTS",
		"9S2C9H4C8DAS7D3D6D5S",
		"6S4C7H8C3H5HJCAH9D9C",
		"2S7C5SJD8C3S3D4D7D6S",
		"3CKC4S5D7D3DJD7H3H4H",
		"9C9H4H4DTH6DQD8S9S7S",
		"2HAC8S4SAD8C2CAH7DTC",
		"TS9H3CADKSTC3D8C8HJD",
		"QC8D2C3C7D7CJD9H9C6C",
		"AH6SJSJH5DASQC2CJDTD",
		"9HKD2H5D2D3S7DTCAHTS",
		"TD8HAS5DAHQCAC6STC5H",
		"KS4S7H4D8D9CTC2H6H3H",
		"3HKD4SQDQH3D8H8CTD7S",
		"8SJDTCAHJSQS2DKHKS4D",
		"3CADJCKDJSKH4STH9H2C",
		"QC5SJS9SKSAS7CQD2SJD",
		"KC5SQS3S2DAC5D9H8HKS",
		"6H9CTCAD2C6D5SJD6C7C",
		"QSKHTDQD2C3H8S2SQCAH",
		"9D9HJHTCQH3C2SJS5C7H",
		"6C3S3D2S4SQD2DTH5D2C",
		"2D6H6D2SJCQHAS7H4HKH",
		"5H6SKSADTCTS7CAC4S4H",
		"AD3C4HQS8C9DKS2H2D4D",
		"4S9D6C6D9CAC8D3H7HKD",
		"JCAH6CTSJD6DAD3S5DQD",
		"JCJHJD3S7S8SJSQC3H4S",
		"JDTH5C2CADJS7H9S2H7S",
		"8D3SJH4DQCASJD2CKC6H",
		"2CAC5HKD5S7HQDJHAH2D",
		"JCQH8D8STC5H5CAH8C6C",
		"3HJS8SQDJH3C4H6D5C3S",
		"6D4S4CAH5H5S3HJD7C8D",
		"8HAH2H3HJS3C7DQC4HKD",
		"6S2HKD5H8H2D3C8S7SQD",
		"2S7SKCQCAHTCQS6D4C8D",
		"5S9H2C3SQD7S6C2H7C9D",
		"3C6C5C5SJDJCKS3S5DTS",
		"7CKS6S5S2S2DTC2H5HQS",
		"AS7H6STS5H9S9D3CKD2H",
		"4SJSQS3S4H7C2SAC6S9D",
		"8CJH2H5H7C5DQHQSKHQC",
		"3STD3H7CKC8D5H8SKH8C",
		"4HKHJDTS3C7HASQCJS5S",
		"AH9D2C8D4D2D6H6CKC6S",
		"2S6H9D3S7H4DKH8HKD3D",
		"9CTCACJHKH4DJD5HTD3S",
		"7S4H9DAS4C7DQS9S2SKH",
		"3S8D8SKS8CJC5CKH2H5D",
		"8SQH2C4DKCJSQC9DAC6H",
		"8S8C7CJSJD6S4C9CAC4S",
		"QH5D2C7DJC8S2DJSJH4C",
		"JS4C7STSJHKCKH5HQD4S",
		"QD8C8D2D6STD9DACQH5S",
		"QHQCJS3D3C5C4HKH8S7H",
		"7C2C5SJC8S3HQC5D2HKC",
		"5S8DKD6H4HQDQH6DAH3D",
		"7SKS6C2S4DACQS5HTSJD",
		"7C2DTC5DQSACJSQC6CKC",
		"2CKS4D3HTS8SAD4H7S9S",
		"QD9HQH5H4H4DKH3SJCAD",
		"4DACKC8D6D4C2DKH2CJD",
		"2C9H2DAH3H6D9C7DTCKS",
		"8C3HKD7C5C2S4S5HASAH",
		"THJD4HKD3HTC5C3SACKH",
		"6D7HAH7SQC6H2DTDJDAS",
		"JH5D7HTC9S7DJCAS5SKH",
		"2H8CADTH6HQDKD9H6S6C",
		"QHKC9D4D3SJSJH4H2C9H",
		"TC7HKH4HJC7D9S3HQS7S",
		"AD7DJH6C7H4H3S3H4DQH",
		"JD2H5CAS6CQC4D3CTCJH",
		"ACJD3H6H4CJCAD7D7H9H",
		"4HTCTS2C8C6SKS2HJD9S",
		"4C3HQSQC9S9H6DKC9D9C",
		"5CAD8C2CQHTHQDJC8D8H",
		"QC2C2SQD9C4D3S8DJHQS",
		"9D3S2C7S7CJCTD3CTC9H",
		"3CTS8H5C4C2C6S8D7C4H",
		"KS7H2HTC4H2C3SASAHQS",
		"8C2D2H2C4S4C6S7D5S3S",
		"THQC5DTD3CQSKDKCKSAS",
		"4DAHKD9HKS5C4C6HJC7S",
		"KC4H5CQSTC2HJC9SAHQH",
		"4S9H3H5H3CQD2HQCJH8H",
		"5DAS7H2C3DJH6H4C6S7D",
		"9CJD9HAHJS8SQH3HKS8H",
		"3SACQCTS4DAD3DAH8S9H",
		"7H3HQS9C9S5HJHJSAHAC",
		"8D3CJD2HAC9C7H5S4D8H",
		"7CJH9H6CJS9S7H8C9D4H",
		"2DAS9S6H4DJSJH9HADQD",
		"6H7SJHKHAH7HTD5S6S2C",
		"8HJH6S5H5S9DTC4CQC9S",
		"7D2CKD3H5HASQD7HJS4D",
		"TSQH6C8HTH5H3C3H9C9D",
		"ADKHJS5D3HASAC9S5CKC",
		"2CKH8CJCQS6DAH2DKCTC",
		"9D3H2S7C4D6DKHKS8D7D",
		"9H2STCJHACQC3H5S3S8H",
		"3SASKD8H4C3H7CJHQHTS",
		"7S6D7H9DJH4C3D3S6CAS",
		"4S2H2C4C8S5HKC8CQCQD",
		"3H3S6CQSQC2D6S5D2C9D",
		"2H8DJH2S3H2D6C5C7SAD",
		"9HJS5DQH8STS2H7S6SAD",
		"6DQC9S7H5H5C7DKCJD4H",
		"QC5S9H9C4D6SKS2S4C7C",
		"9H7C4H8D3S6H5C8HJS7S",
		"2D6HJSTD4H4DJCTH5HKC",
		"AC7C8DTH3H9S2D4CKC4D",
		"KDQS9C7S3DKSADTS4C4H",
		"QH9C8H2S7DKS7H5DKD4C",
		"9C2S2HJC6S6CTCQCJH5C",
		"7SAC8HKC8S6HQSJC3D6S",
		"JS2DJH8C4S6H8H6D5DAD",
		"6H7D2S4H9H7CASAC8H5S",
		"3CJS4S6D5H2SQH6S9C2C",
		"3D5S6S9S4CQS8DQD8STC",
		"9C3DAH9H5S2C7DADJC3S",
		"7HTCAS3C6S6D7SKHKC9H",
		"3STC8H6S5HJH8C7DAC2S",
		"QD9D9C3SJC8CKS8H5D4D",
		"JSAHJD6D9D8C9H9S8H3H",
		"2D6S4C4D8SAD4STCAH9H",
		"TSACQCTHKC6D4H7S8C2H",
		"3CQDJS9D5SJCAH2HTS9H",
		"3H4DQH5D9C5H7D4SJC3S",
		"8STH3H7C2HJDJSTSAC8D",
		"9C2HTDKCJD2S8C5SAD2C",
		"3DKD7C5H4DQHQDTC6H7D",
		"7H2CKC5SKD6HAHQC7SQH",
		"6H5CAC5H2C9C2D7CTD2S",
		"4D9DAH3D7CJD4H8C4CKS",
		"TH3CJSQH8H4CAS3DQSQC",
		"4D7S5HJH6D7D6HJSKH3C",
		"QD8S7D2H2C7CJC2S5H8C",
		"QH8S9DTC2HAD7C8DQD6S",
		"3S7CAD9H2H9SJDTS4C2D",
		"3SAS4HQC2C8H8S7STDTC",
		"JHTHTD3S4D4H5S5DQS2C",
		"8CQDQHTC6D4S9S9D4HQC",
		"8CJS9D6HJD3HAD6STDQC",
		"KC8S3D7CTD7D8D9H4S3S",
		"6C4S3D9DKDTCKCKSAC5S",
		"7C6SQH3DJSKD6H6D2D8C",
		"JD2S5S4H8SAC2D6STS5C",
		"5H8C5S3C4S3D7C8DAS3H",
		"ASTS7C3HAD7DJCQS6C6H",
		"3S9S4CACQH5H5D9HTS4H",
		"6C5C7H7STDADJD5S2H2S",
		"7D6CKC3SJD8D8STSQSKH",
		"8SQS8D6CTHACAH2C8H9S",
		"7HTDKHQH8S3D4DAHJDAS",
		"TS3D2HJC2SJHKH6CQCJS",
		"KCTH2D6H7S2STC8C9DQS",
		"3C9D6SKH8H6D5DTH2C2H",
		"6HTC7DAD4D8STS9HTD7S",
		"JS6DJDJC2HAC6C3DKH8D",
		"KHJD9S5D4H4C3H7SQS5C",
		"4HJD5D3S3C4DKHQHQS7S",
		"JDTS8SQDAH4C6H3S5S2C",
		"QS3DJDAS8DTH7C6SQCKS",
		"7S2H8CQC7HAC6D2DTHKH",
		"5S6C7HKH7DAH8C5C7S3D",
		"3CKDAD7D6C4DKS2D8C4S",
		"7C8D5S2D2SAHAD2C9DTD",
		"3CAD4SKSJH7C5C8C9CTH",
		"ASTD4D7CJD8CQH3C5H9S",
		"3H9C8S9S6SQDKSAH5HJH",
		"QC9C5S4H2HTD7DAS8C9D",
		"8C2C9DKDTC7S3DKHQC3C",
		"4DAS4CQS5S9D6SJDQHKS",
		"6DAH6C4C5HTS9H7D3D5S",
		"QSJD7C8D9CAC3S6S6CKH",
		"8HJH5D9S6DAS6S3SQC7H",
		"QDAD5CJH2HAH4HASKC2C",
		"JH9C2C6H2DJS5D9HKC6D",
		"7D9DKDTH3HAS6SQC6HAD",
		"JD4H7DKC3HJS3CTH3DQS",
		"4C3H8CQD5H6HAS8HADJD",
		"TH8SKD5DQC7DJS5S5HTS",
		"7DKC9DQS3H3C6DTS7SAH",
		"7C4H7HAHQCAC4D5D6DTH",
		"3C4H2SKD8H5HJHTC6CJD",
		"4S8C3D4HJSTD7SJHQSKD",
		"7CQCKD4D7H6SADTDTCKH",
		"5H9HKC3H4D3DAD6SQD6H",
		"TH7C6HTSQH5S2CKCTD6S",
		"7C4D5SJDJH7DACKDKH4H",
		"7D6C8D8H5CJH8SQDTHJD",
		"8D7D6C7C9DKDAS5CQHJH",
		"9S2C8C3C4CKSJH2D8D4H",
		"7S6CJHKH8H3H9D2DAH6D",
		"4DTC9C8D7HTDKSTHKD3C",
		"JD9H8DQDASKD9D2C2S9C",
		"8D3H5C7HKS5HQH2D8C9H",
		"2DTH6DQD6CKC3H3SAD4C",
		"4H3HJS9D3CTC5HQHQCJC",
		"3D5C6H3S3CJC5S7S2SQH",
		"AC5C8C4D5D4H2SQD3C3H",
		"2CTDAH9CKDJS6SQD4CQC",
		"QS8C3S4HTCJS3H7CJCAD",
		"5H4D9CKSJCTD9STS8S9H",
		"QDTS7DASAC2CTD6H8HAH",
		"6SAD8C4S9H8D9DKH8S3C",
		"QS4D2D7SKHJSJCAD4C3C",
		"QS9S7HKCTDTH5HJSACJH",
		"6DAC2SQS7CASKS6SKH5S",
		"6D8HKH3CQS2H5C9C9D6C",
		"JS2C4C6H7DJCACQDTD3H",
		"4HQC8HJD4CKDKS5CKC7S",
		"6D2D3H2SQD5S7HASTH6S",
		"AS6D8D2C8STD8HQDJCAH",
		"9C9H2DTDQH2H5CTC3D8H",
		"KC8S3DKH2STSTC6S4DJH",
		"9H9DQSACKC6H5D4D8DAH",
		"9S5CQS4H7C7D2H8SADJS",
		"3DAC9SAS2C2D2H3HJCKH",
		"7HQHKHJDTCKS5S8H4C8D",
		"2H7H3S2S5HQS3CAS9HKD",
		"AD3DJD6H5S9C6DAC9S3S",
		"3D5D9C2DAC4S2SAD6C6S",
		"QC4C2D3H6SKCQHQD2HJH",
		"QC3C8S4D9S2H5C8HQSQD",
		"6DKD6S7H3SKH2H5CJC6C",
		"3S9STC6S8H2DAD7S8STS",
		"3C6H9C3H5CJC8HQHTDQD",
		"3CJSQD5DTD2CKH9HTHAS",
		"9STCJD3D5C5HADQH9HKC",
		"TC7H4H8H3HTD6SAC7C2S",
		"QS9D5D3CJCKS4D6CJH2S",
		"9S6S3C7HTS4CKD6D3D9C",
		"2D9HAHAC7H2SJH3S7CQC",
		"QD9H3C2HACAS8SKD8CKH",
		"2D7STDTH6DJD8D4D2H5S",
		"8SQHKDJDQSJH4DKC5H3S",
		"3CKHQC6D8H3SAH7DTD2D",
		"5S9HQH4S6S6C6DTSTH7S",
		"6C4C6DQSJS9CTS3H8D8S",
		"JS5C7SAS2CAH2HAD5STC",
		"KD6C9C9DTS2SJC4H2CQD",
		"QS9HTC3HKCKS4H3CADTH",
		"KH9C2HKD9DTC7SKCJH2D",
		"7C3SKCAS8C5D9C9SQH3H",
		"2D8CTD4C2HQC5DTC2C7D",
		"KS4D6CQHTDKH5D7CAD8D",
		"2S9S8S4C8C3D6HQD7C7H",
		"6C8SQH5HTS5C3C4S2S2H",
		"8S6S2HJC3S3H9D8C2S7H",
		"QC2C8H9CACJD4C4H6S3S",
		"3H3S7D4C9S5H8HJC3DTC",
		"QH2S2D9SKDQD9HAD6D9C",
		"8D2DKS9SJC4CJDKC4STH",
		"KHTS6D4D5CKD5HAS9HAD",
		"QDJS7C6D5D5CTH5HQHQS",
		"9DQHKH5HJH4C4DTCTH6C",
		"KHASTS9DKD9C7S4D8H5S",
		"KHAS2S7D9D4CTSTHAH7C",
		"KS4DAC8S9S8DTHQH9D5C",
		"5D5C8CQSTC4C3D3S2C8D",
		"9DKS2D3CKC4S8CKH6CJC",
		"8HAH6H7D7SQD3C4C6CKC",
		"3H2CQH8HAS7D4C8C4HKC",
		"QD5S4H2CTDAHJHQH4C8S",
		"3HQS5SJS8H2S9H9C3S2C",
		"6HTS7SJCQDACTDKC5S3H",
		"QHASQS7DJCKC2C4C5C5S",
		"QH3DASJS4H8D7HJC2S9C",
		"5D4D2S4S9D9C2DQS8H7H",
		"6D7H3HJSTSAC2DJH7C8S",
		"JH5HKC3CTC5S9H4C8H9D",
		"8SKC5H9HADKS9DKH8DAH",
		"JC2H9HKS6S3HQC5HAH9C",
		"5CKH5SAD6CJC9HQC9CTD",
		"5S5DJCQH2DKS8HQS2HTS",
		"JH5H5SAH7H3C8SASTDKH",
		"6H3DJD2C4CKC7SAH6CJH",
		"4CKS9DAD7SKC7D8H3S9C",
		"7H5C5H3C8HQC3DKH6DJC",
		"2D4H5D7DQCADAH9HQH8H",
		"KD8CJS9D3S3C2H5D6D2S",
		"8S6STS3C6H8D5S3HTD6C",
		"KS3DJH9C7C9SQS5S4H6H",
		"7S6STH4SKCKD3SJCJHKS",
		"7C3C2S6DQH2C7S5H8HAH",
		"KC8DQD6DKH5C7H9D3D9C",
		"6H2D8SJS9S2S6DKC7CTC",
		"KD9CJH7HKC8S2S7S3D6H",
		"4H9H2D4C8H7H5S8S2H8D",
		"AD7C3C7S5S4D9H3DJCKH",
		"5DAS7D6D9CJC4CQHQSKH",
		"KDJD7D3DQSQC8S6DJSQD",
		"6S8C5SQHTH9HASAC2CJD",
		"QCKSQH7S3C4C5CKC5DAH",
		"6C4H9DAH2C3HKD3DTS5C",
		"TD8SQSASJS3HKDAC4HKS",
		"7D5DTS9H4H4C9C2H8CQC",
		"2C7D9H4DKS4CQHADKDJS",
		"QDADAHKH9DJS9HJCKDJD",
		"8S3C4STS7S4D5C2S6H7C",
		"JS7S5CKD6DQH8STD2H6S",
		"QH6CTC6HTD4C9D2HQC8H",
		"3DTS4D2H6H6S2C7H8S6C",
		"9H9DJDJH3SAH2C6S3H8S",
		"2CQS8C5S3H2S7D3CAD4S",
		"5CQCQHASTS4S6S4C5HJS",
		"JH5CTD4C6HJSKDKHQS4H",
		"TCKHJC4D9H9D8DKC3C8H",
		"2HTC8SAD9S4HTS7H2C5C",
		"4H2S6C5SKSAH9C7C8HKD",
		"TSQHTDQS3CJHAH2C8D7D",
		"5DKC3H5SAC4S7HQS4C2H",
		"3D7DQCKHJH6D6CTDTHKD",
		"5S8DTH6C9D7DKH8C9S6D",
		"JDQS7SQC2SQHJC4SKS8D",
		"7S5S9SJDKD9CJCAD2D7C",
		"4S5HAHJH9C5DTD7C2D6S",
		"KC6C7H6S9CQD5S4HKSTD",
		"6S8DKS2DTHTD9HJDTS3S",
		"KHJS4H5D9DTCTDQCJDTS",
		"QSQDACAD4C6S2DAS3HKC",
		"4C7C3CTDQS9CKCAS8DAD",
		"KC7HQC6D8H6S5SAH7S8C",
		"3SAD9HJC6DJDASKH6SJH",
		"AD3DTSKS7HJH2DJSQDAC",
		"9CJD7C6DTC6H6CJC3D3S",
		"QCKC3SJCKD2C8DAHQSTS",
		"ASKD3DJD8H7C8C5CQD6C"
	};

	class PokerHand {
		public:

		enum suits {
			spade = 0,
			diamond = 1,
			heart = 2,
			club = 3
		};
		enum handvalues {
			high_card = 1,
			one_pair,
			two_pair,
			three_of_a_kind,
			straight,
			flush,
			full_house,
			four_of_a_kind,
			straigh_flush,
			royal_flush
		};

		struct card {
			int val;
			int suit;
		};

		vector<card> cards;
		vector<vector<card>> pairs;
		//string scards;

		virtual int getcardval(char a) {
			if (a == 'A') return 14;
			else if (a == 'K') return 13;
			else if (a == 'Q') return 12;
			else if (a == 'J') return 11;
			else if (a == 'T') return 10;
			else return a - 48;
		};
		virtual int getcardsuit(char s) {
			if (s == 'S') return spade;
			else if (s == 'D') return diamond;
			else if (s == 'H') return heart;
			else return club;
		}

		PokerHand(string s) {
			cards.reserve(5);
			for (UINT i = 0; i < s.size(); i += 2) 
				cards.push_back({getcardval(s[i]), getcardsuit(s[i + 1])});
			sort(cards.begin(), cards.end(),
				[&](const card &left, const card &right)->bool {
				return getcardval(left.val) > getcardval(right.val);
			});
		/*	for (UINT i = 0; i < cards.size(); i++) {
				scards += cards[i].val == 14 ? 'A' : cards[i].val == 13 ? 'K' : cards[i].val == 12 ? 'Q' : cards[i].val == 11 ? 'J' : cards[i].val == 10 ? 'T' : static_cast<char>(cards[i].val + 48);
				scards += cards[i].suit == 0 ? 'S' : cards[i].suit == 1 ? 'D' : cards[i].suit == 2 ? 'H' : 'C';
				scards += " ";
			}*/
		}
		
		UINT getHandValue() {
			UINT points = 0;
			if (cards[1].suit == cards[0].suit && cards[2].suit == cards[0].suit && cards[3].suit == cards[0].suit && cards[4].suit == cards[0].suit) {//same suit
				if (cards[0].val == 14 && cards[1].val == 13 && cards[2].val == 12 && cards[3].val == 11 && cards[4].val == 10)
					return royal_flush;
				else if ((cards[0].val - 1 == cards[1].val && cards[1].val - 1 == cards[2].val && cards[2].val - 1 == cards[3].val && cards[3].val - 1 == cards[4].val)
					|| (cards[0].val == 14 && cards[1].val == 5 && cards[2].val == 4 && cards[3].val == 3 && cards[4].val == 2))
					return straigh_flush;
				else
					return flush;
			}
			else if ((cards[0].val - 1 == cards[1].val && cards[1].val - 1 == cards[2].val && cards[2].val - 1 == cards[3].val && cards[3].val - 1 == cards[4].val)
				|| (cards[0].val == 14 && cards[1].val == 5 && cards[2].val == 4 && cards[3].val == 3 && cards[4].val == 2))
				return straight;

			auto split_pairs = [](const vector<card> &c) -> vector<vector<card>> {
				vector<vector<card>> ret;
				vector<card> temp;
				for (UINT i = 0; i < c.size() - 1; i++) {
					if (c[i].val == c[i + 1].val) {
						temp.push_back(c[i]);
						if (i + 1 == c.size() - 1) {
							temp.push_back(c[i + 1]);
							ret.push_back(temp);
						}
					}
					else {
						if (temp.size()) {							
							temp.push_back(c[i]);
							ret.push_back(temp);
						}
						temp.clear();
					}
				}
				return ret;
			};

			pairs = split_pairs(cards);		

			if (pairs.size() == 1) {
				if (pairs[0].size() == 2) 
					return one_pair;
				else if (pairs[0].size() == 3) 
					return three_of_a_kind;
				else if (pairs[0].size() == 4) 
					return four_of_a_kind;
			}
			else if (pairs.size() == 2) {
				if ((pairs[0].size() == 3 && pairs[1].size() == 2) || (pairs[0].size() == 2 && pairs[1].size() == 3)) 
					return full_house;
				else if (pairs[0].size() == 2 && pairs[1].size() == 2)
					return two_pair;
			}

			return high_card;
		}

		bool compareHand(PokerHand &hand2) {
			int val1 = this->getHandValue();
			int val2 = hand2.getHandValue();
		//	cout << this->scards << "(" << val1 << ")" << " | " << hand2.scards << "(" << val2  << ")";
			if (val1 == val2) {				
				if (val1 == high_card) {
					for (UINT i = 0; i < 5; i++) {
						if (this->cards[i].val == hand2.cards[i].val) 						
							continue;
						return this->cards[i].val > hand2.cards[i].val;
					}
				}
				if (val1 == one_pair) {
					if (this->pairs[0][0].val == hand2.pairs[0][0].val) {
						for (UINT i = 0; i < 5; i++) {
							if (this->cards[i].val == hand2.cards[i].val)	
								continue;
							return this->cards[i].val > hand2.cards[i].val;
						}
					}
					else
						return this->pairs[0][0].val > hand2.pairs[0][0].val;
				}
			}
				
			return val1 > val2;
		}
	};

	for (UINT i = 0; i < hands.size(); i++) {
		PokerHand player1(hands[i].substr(0, hands[i].size() / 2));
		PokerHand player2(hands[i].substr(hands[i].size() / 2, hands.size() - 1));
		//cout << "hand #" << i << ": " << hands[i] << '\n';
		if (player1.compareHand(player2)) {
			//cout << " Player 1 won\n";
			answer++;
		}
		else {
			//cout << " Player 2 won\n";
		}
	}

	return answer;
}

ull Problem_60() {
	int n = 2500;

	vector<UINT> p;//list of first n primes
	p.push_back(2);
	p.reserve(n);
	for (UINT i = 3; p.size() != n; i += 2) {
		if (is_prime(i))
			p.push_back(i);
	}

	auto isconcatprime = [](int a, int b) -> bool {
		return (is_prime((ull)(a * pow(10, (double)(int)log10(b) + 1) + b))
			&& is_prime((ull)(b * pow(10, (double)(int)log10(a) + 1) + a)));
	};

	UINT answer = -1;
	for (UINT i = 0; i < p.size(); i++) {
		if (p[i] * 6 > answer) break;
		for (UINT j = i + 1; j < p.size(); j++) {
			if (p[j] * 5 + p[i] > answer) break;
			if (isconcatprime(p[i], p[j])) {
				for (UINT k = j + 1; k < p.size(); k++) {
					if (p[k] * 4 + p[i] + p[j] > answer) break;
					if (isconcatprime(p[k], p[i])
						&& isconcatprime(p[k], p[j])) {
						for (UINT l = k + 1; l < p.size(); l++) {
							if (p[l] * 3 + p[i] + p[j] + p[k] > answer) break;
							if (isconcatprime(p[l], p[i])
								&& isconcatprime(p[l], p[j])
								&& isconcatprime(p[l], p[k])) {
								for (UINT m = l + 1; m < p.size(); m++) {
									if (p[i] * 2 + p[j] + p[k] + p[l] + p[m] >= answer) break;
									if (isconcatprime(p[m], p[i])
										&& isconcatprime(p[m], p[j])
										&& isconcatprime(p[m], p[k])
										&& isconcatprime(p[m], p[l])) {
										UINT sum = p[i] + p[j] + p[k] + p[l] + p[m];
								//		cout << p[i] << " " << p[j] << " " << p[k] << " " << p[l] << " " << p[m] << " " << sum << " (" << LAP() << "ms)\n";
										answer = sum < answer ? sum : answer;
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return (ull)answer;
}
ull Problem_61() {
	//TODO Problem_61
	ull answer = 0;

	vector<vector<int>> v(6);

	auto f = [](int c, int n) {
		switch (c) {
			case 3: return n * (n + 1) / 2;
			case 4: return n * n;
			case 5: return n * (3 * n - 1) / 2;
			case 6: return n * (2 * n - 1);
			case 7: return n * (5 * n - 3) / 2;
			case 8: return n * (3 * n - 2);
		}
	};

	for (int i = 0, c = 3; c < 9; i++) {
		int n = f(c, i);
		if (n > 999 && n < 10000)
			v[c - 3].push_back(n);
		else if (n > 9999) {
			c++;
			i = 0;
		}
	}
	
	for (int i = 0; i < v[0].size(); i++) {
		vector<int> c = {0};
		int r = v[0][i] % 100;


	}

	return answer;
}

ull Problem_67() {
	vector<vector<int>> tri = {
		{59},
		{73, 41},
		{52, 40, 9},
		{26, 53, 6, 34},
		{10, 51, 87, 86, 81},
		{61, 95, 66, 57, 25, 68},
		{90, 81, 80, 38, 92, 67, 73},
		{30, 28, 51, 76, 81, 18, 75, 44},
		{84, 14, 95, 87, 62, 81, 17, 78, 58},
		{21, 46, 71, 58, 2, 79, 62, 39, 31, 9},
		{56, 34, 35, 53, 78, 31, 81, 18, 90, 93, 15},
		{78, 53, 4, 21, 84, 93, 32, 13, 97, 11, 37, 51},
		{45, 3, 81, 79, 5, 18, 78, 86, 13, 30, 63, 99, 95},
		{39, 87, 96, 28, 3, 38, 42, 17, 82, 87, 58, 7, 22, 57},
		{6, 17, 51, 17, 7, 93, 9, 7, 75, 97, 95, 78, 87, 8, 53},
		{67, 66, 59, 60, 88, 99, 94, 65, 55, 77, 55, 34, 27, 53, 78, 28},
		{76, 40, 41, 4, 87, 16, 9, 42, 75, 69, 23, 97, 30, 60, 10, 79, 87},
		{12, 10, 44, 26, 21, 36, 32, 84, 98, 60, 13, 12, 36, 16, 63, 31, 91, 35},
		{70, 39, 6, 5, 55, 27, 38, 48, 28, 22, 34, 35, 62, 62, 15, 14, 94, 89, 86},
		{66, 56, 68, 84, 96, 21, 34, 34, 34, 81, 62, 40, 65, 54, 62, 5, 98, 3, 2, 60},
		{38, 89, 46, 37, 99, 54, 34, 53, 36, 14, 70, 26, 2, 90, 45, 13, 31, 61, 83, 73, 47},
		{36, 10, 63, 96, 60, 49, 41, 5, 37, 42, 14, 58, 84, 93, 96, 17, 9, 43, 5, 43, 6, 59},
		{66, 57, 87, 57, 61, 28, 37, 51, 84, 73, 79, 15, 39, 95, 88, 87, 43, 39, 11, 86, 77, 74, 18},
		{54, 42, 5, 79, 30, 49, 99, 73, 46, 37, 50, 2, 45, 9, 54, 52, 27, 95, 27, 65, 19, 45, 26, 45},
		{71, 39, 17, 78, 76, 29, 52, 90, 18, 99, 78, 19, 35, 62, 71, 19, 23, 65, 93, 85, 49, 33, 75, 9, 2},
		{33, 24, 47, 61, 60, 55, 32, 88, 57, 55, 91, 54, 46, 57, 7, 77, 98, 52, 80, 99, 24, 25, 46, 78, 79, 5},
		{92, 9, 13, 55, 10, 67, 26, 78, 76, 82, 63, 49, 51, 31, 24, 68, 5, 57, 7, 54, 69, 21, 67, 43, 17, 63, 12},
		{24, 59, 6, 8, 98, 74, 66, 26, 61, 60, 13, 3, 9, 9, 24, 30, 71, 8, 88, 70, 72, 70, 29, 90, 11, 82, 41, 34},
		{66, 82, 67, 4, 36, 60, 92, 77, 91, 85, 62, 49, 59, 61, 30, 90, 29, 94, 26, 41, 89, 4, 53, 22, 83, 41, 9, 74, 90},
		{48, 28, 26, 37, 28, 52, 77, 26, 51, 32, 18, 98, 79, 36, 62, 13, 17, 8, 19, 54, 89, 29, 73, 68, 42, 14, 8, 16, 70, 37},
		{37, 60, 69, 70, 72, 71, 9, 59, 13, 60, 38, 13, 57, 36, 9, 30, 43, 89, 30, 39, 15, 2, 44, 73, 5, 73, 26, 63, 56, 86, 12},
		{55, 55, 85, 50, 62, 99, 84, 77, 28, 85, 3, 21, 27, 22, 19, 26, 82, 69, 54, 4, 13, 7, 85, 14, 1, 15, 70, 59, 89, 95, 10, 19},
		{4, 9, 31, 92, 91, 38, 92, 86, 98, 75, 21, 5, 64, 42, 62, 84, 36, 20, 73, 42, 21, 23, 22, 51, 51, 79, 25, 45, 85, 53, 3, 43, 22},
		{75, 63, 2, 49, 14, 12, 89, 14, 60, 78, 92, 16, 44, 82, 38, 30, 72, 11, 46, 52, 90, 27, 8, 65, 78, 3, 85, 41, 57, 79, 39, 52, 33, 48},
		{78, 27, 56, 56, 39, 13, 19, 43, 86, 72, 58, 95, 39, 7, 4, 34, 21, 98, 39, 15, 39, 84, 89, 69, 84, 46, 37, 57, 59, 35, 59, 50, 26, 15, 93},
		{42, 89, 36, 27, 78, 91, 24, 11, 17, 41, 5, 94, 7, 69, 51, 96, 3, 96, 47, 90, 90, 45, 91, 20, 50, 56, 10, 32, 36, 49, 4, 53, 85, 92, 25, 65},
		{52, 9, 61, 30, 61, 97, 66, 21, 96, 92, 98, 90, 6, 34, 96, 60, 32, 69, 68, 33, 75, 84, 18, 31, 71, 50, 84, 63, 3, 3, 19, 11, 28, 42, 75, 45, 45},
		{61, 31, 61, 68, 96, 34, 49, 39, 5, 71, 76, 59, 62, 67, 6, 47, 96, 99, 34, 21, 32, 47, 52, 7, 71, 60, 42, 72, 94, 56, 82, 83, 84, 40, 94, 87, 82, 46},
		{1, 20, 60, 14, 17, 38, 26, 78, 66, 81, 45, 95, 18, 51, 98, 81, 48, 16, 53, 88, 37, 52, 69, 95, 72, 93, 22, 34, 98, 20, 54, 27, 73, 61, 56, 63, 60, 34, 63},
		{93, 42, 94, 83, 47, 61, 27, 51, 79, 79, 45, 1, 44, 73, 31, 70, 83, 42, 88, 25, 53, 51, 30, 15, 65, 94, 80, 44, 61, 84, 12, 77, 2, 62, 2, 65, 94, 42, 14, 94},
		{32, 73, 9, 67, 68, 29, 74, 98, 10, 19, 85, 48, 38, 31, 85, 67, 53, 93, 93, 77, 47, 67, 39, 72, 94, 53, 18, 43, 77, 40, 78, 32, 29, 59, 24, 6, 2, 83, 50, 60, 66},
		{32, 1, 44, 30, 16, 51, 15, 81, 98, 15, 10, 62, 86, 79, 50, 62, 45, 60, 70, 38, 31, 85, 65, 61, 64, 6, 69, 84, 14, 22, 56, 43, 9, 48, 66, 69, 83, 91, 60, 40, 36, 61},
		{92, 48, 22, 99, 15, 95, 64, 43, 1, 16, 94, 2, 99, 19, 17, 69, 11, 58, 97, 56, 89, 31, 77, 45, 67, 96, 12, 73, 8, 20, 36, 47, 81, 44, 50, 64, 68, 85, 40, 81, 85, 52, 9},
		{91, 35, 92, 45, 32, 84, 62, 15, 19, 64, 21, 66, 6, 1, 52, 80, 62, 59, 12, 25, 88, 28, 91, 50, 40, 16, 22, 99, 92, 79, 87, 51, 21, 77, 74, 77, 7, 42, 38, 42, 74, 83, 2, 5},
		{46, 19, 77, 66, 24, 18, 5, 32, 2, 84, 31, 99, 92, 58, 96, 72, 91, 36, 62, 99, 55, 29, 53, 42, 12, 37, 26, 58, 89, 50, 66, 19, 82, 75, 12, 48, 24, 87, 91, 85, 2, 7, 3, 76, 86},
		{99, 98, 84, 93, 7, 17, 33, 61, 92, 20, 66, 60, 24, 66, 40, 30, 67, 5, 37, 29, 24, 96, 3, 27, 70, 62, 13, 4, 45, 47, 59, 88, 43, 20, 66, 15, 46, 92, 30, 4, 71, 66, 78, 70, 53, 99},
		{67, 60, 38, 6, 88, 4, 17, 72, 10, 99, 71, 7, 42, 25, 54, 5, 26, 64, 91, 50, 45, 71, 6, 30, 67, 48, 69, 82, 8, 56, 80, 67, 18, 46, 66, 63, 1, 20, 8, 80, 47, 7, 91, 16, 3, 79, 87},
		{18, 54, 78, 49, 80, 48, 77, 40, 68, 23, 60, 88, 58, 80, 33, 57, 11, 69, 55, 53, 64, 2, 94, 49, 60, 92, 16, 35, 81, 21, 82, 96, 25, 24, 96, 18, 2, 5, 49, 3, 50, 77, 6, 32, 84, 27, 18, 38},
		{68, 1, 50, 4, 3, 21, 42, 94, 53, 24, 89, 5, 92, 26, 52, 36, 68, 11, 85, 1, 4, 42, 2, 45, 15, 6, 50, 4, 53, 73, 25, 74, 81, 88, 98, 21, 67, 84, 79, 97, 99, 20, 95, 4, 40, 46, 2, 58, 87},
		{94, 10, 2, 78, 88, 52, 21, 3, 88, 60, 6, 53, 49, 71, 20, 91, 12, 65, 7, 49, 21, 22, 11, 41, 58, 99, 36, 16, 9, 48, 17, 24, 52, 36, 23, 15, 72, 16, 84, 56, 2, 99, 43, 76, 81, 71, 29, 39, 49, 17},
		{64, 39, 59, 84, 86, 16, 17, 66, 3, 9, 43, 6, 64, 18, 63, 29, 68, 6, 23, 7, 87, 14, 26, 35, 17, 12, 98, 41, 53, 64, 78, 18, 98, 27, 28, 84, 80, 67, 75, 62, 10, 11, 76, 90, 54, 10, 5, 54, 41, 39, 66},
		{43, 83, 18, 37, 32, 31, 52, 29, 95, 47, 8, 76, 35, 11, 4, 53, 35, 43, 34, 10, 52, 57, 12, 36, 20, 39, 40, 55, 78, 44, 7, 31, 38, 26, 8, 15, 56, 88, 86, 1, 52, 62, 10, 24, 32, 5, 60, 65, 53, 28, 57, 99},
		{3, 50, 3, 52, 7, 73, 49, 92, 66, 80, 1, 46, 8, 67, 25, 36, 73, 93, 7, 42, 25, 53, 13, 96, 76, 83, 87, 90, 54, 89, 78, 22, 78, 91, 73, 51, 69, 9, 79, 94, 83, 53, 9, 40, 69, 62, 10, 79, 49, 47, 3, 81, 30},
		{71, 54, 73, 33, 51, 76, 59, 54, 79, 37, 56, 45, 84, 17, 62, 21, 98, 69, 41, 95, 65, 24, 39, 37, 62, 3, 24, 48, 54, 64, 46, 82, 71, 78, 33, 67, 9, 16, 96, 68, 52, 74, 79, 68, 32, 21, 13, 78, 96, 60, 9, 69, 20, 36},
		{73, 26, 21, 44, 46, 38, 17, 83, 65, 98, 7, 23, 52, 46, 61, 97, 33, 13, 60, 31, 70, 15, 36, 77, 31, 58, 56, 93, 75, 68, 21, 36, 69, 53, 90, 75, 25, 82, 39, 50, 65, 94, 29, 30, 11, 33, 11, 13, 96, 2, 56, 47, 7, 49, 2},
		{76, 46, 73, 30, 10, 20, 60, 70, 14, 56, 34, 26, 37, 39, 48, 24, 55, 76, 84, 91, 39, 86, 95, 61, 50, 14, 53, 93, 64, 67, 37, 31, 10, 84, 42, 70, 48, 20, 10, 72, 60, 61, 84, 79, 69, 65, 99, 73, 89, 25, 85, 48, 92, 56, 97, 16},
		{3, 14, 80, 27, 22, 30, 44, 27, 67, 75, 79, 32, 51, 54, 81, 29, 65, 14, 19, 4, 13, 82, 4, 91, 43, 40, 12, 52, 29, 99, 7, 76, 60, 25, 1, 7, 61, 71, 37, 92, 40, 47, 99, 66, 57, 1, 43, 44, 22, 40, 53, 53, 9, 69, 26, 81, 7},
		{49, 80, 56, 90, 93, 87, 47, 13, 75, 28, 87, 23, 72, 79, 32, 18, 27, 20, 28, 10, 37, 59, 21, 18, 70, 4, 79, 96, 3, 31, 45, 71, 81, 6, 14, 18, 17, 5, 31, 50, 92, 79, 23, 47, 9, 39, 47, 91, 43, 54, 69, 47, 42, 95, 62, 46, 32, 85},
		{37, 18, 62, 85, 87, 28, 64, 5, 77, 51, 47, 26, 30, 65, 5, 70, 65, 75, 59, 80, 42, 52, 25, 20, 44, 10, 92, 17, 71, 95, 52, 14, 77, 13, 24, 55, 11, 65, 26, 91, 1, 30, 63, 15, 49, 48, 41, 17, 67, 47, 3, 68, 20, 90, 98, 32, 4, 40, 68},
		{90, 51, 58, 60, 6, 55, 23, 68, 5, 19, 76, 94, 82, 36, 96, 43, 38, 90, 87, 28, 33, 83, 5, 17, 70, 83, 96, 93, 6, 4, 78, 47, 80, 6, 23, 84, 75, 23, 87, 72, 99, 14, 50, 98, 92, 38, 90, 64, 61, 58, 76, 94, 36, 66, 87, 80, 51, 35, 61, 38},
		{57, 95, 64, 6, 53, 36, 82, 51, 40, 33, 47, 14, 7, 98, 78, 65, 39, 58, 53, 6, 50, 53, 4, 69, 40, 68, 36, 69, 75, 78, 75, 60, 3, 32, 39, 24, 74, 47, 26, 90, 13, 40, 44, 71, 90, 76, 51, 24, 36, 50, 25, 45, 70, 80, 61, 80, 61, 43, 90, 64, 11},
		{18, 29, 86, 56, 68, 42, 79, 10, 42, 44, 30, 12, 96, 18, 23, 18, 52, 59, 2, 99, 67, 46, 60, 86, 43, 38, 55, 17, 44, 93, 42, 21, 55, 14, 47, 34, 55, 16, 49, 24, 23, 29, 96, 51, 55, 10, 46, 53, 27, 92, 27, 46, 63, 57, 30, 65, 43, 27, 21, 20, 24, 83},
		{81, 72, 93, 19, 69, 52, 48, 1, 13, 83, 92, 69, 20, 48, 69, 59, 20, 62, 5, 42, 28, 89, 90, 99, 32, 72, 84, 17, 8, 87, 36, 3, 60, 31, 36, 36, 81, 26, 97, 36, 48, 54, 56, 56, 27, 16, 91, 8, 23, 11, 87, 99, 33, 47, 2, 14, 44, 73, 70, 99, 43, 35, 33},
		{90, 56, 61, 86, 56, 12, 70, 59, 63, 32, 1, 15, 81, 47, 71, 76, 95, 32, 65, 80, 54, 70, 34, 51, 40, 45, 33, 4, 64, 55, 78, 68, 88, 47, 31, 47, 68, 87, 3, 84, 23, 44, 89, 72, 35, 8, 31, 76, 63, 26, 90, 85, 96, 67, 65, 91, 19, 14, 17, 86, 4, 71, 32, 95},
		{37, 13, 4, 22, 64, 37, 37, 28, 56, 62, 86, 33, 7, 37, 10, 44, 52, 82, 52, 6, 19, 52, 57, 75, 90, 26, 91, 24, 6, 21, 14, 67, 76, 30, 46, 14, 35, 89, 89, 41, 3, 64, 56, 97, 87, 63, 22, 34, 3, 79, 17, 45, 11, 53, 25, 56, 96, 61, 23, 18, 63, 31, 37, 37, 47},
		{77, 23, 26, 70, 72, 76, 77, 4, 28, 64, 71, 69, 14, 85, 96, 54, 95, 48, 6, 62, 99, 83, 86, 77, 97, 75, 71, 66, 30, 19, 57, 90, 33, 1, 60, 61, 14, 12, 90, 99, 32, 77, 56, 41, 18, 14, 87, 49, 10, 14, 90, 64, 18, 50, 21, 74, 14, 16, 88, 5, 45, 73, 82, 47, 74, 44},
		{22, 97, 41, 13, 34, 31, 54, 61, 56, 94, 3, 24, 59, 27, 98, 77, 4, 9, 37, 40, 12, 26, 87, 9, 71, 70, 7, 18, 64, 57, 80, 21, 12, 71, 83, 94, 60, 39, 73, 79, 73, 19, 97, 32, 64, 29, 41, 7, 48, 84, 85, 67, 12, 74, 95, 20, 24, 52, 41, 67, 56, 61, 29, 93, 35, 72, 69},
		{72, 23, 63, 66, 1, 11, 7, 30, 52, 56, 95, 16, 65, 26, 83, 90, 50, 74, 60, 18, 16, 48, 43, 77, 37, 11, 99, 98, 30, 94, 91, 26, 62, 73, 45, 12, 87, 73, 47, 27, 1, 88, 66, 99, 21, 41, 95, 80, 2, 53, 23, 32, 61, 48, 32, 43, 43, 83, 14, 66, 95, 91, 19, 81, 80, 67, 25, 88},
		{8, 62, 32, 18, 92, 14, 83, 71, 37, 96, 11, 83, 39, 99, 5, 16, 23, 27, 10, 67, 2, 25, 44, 11, 55, 31, 46, 64, 41, 56, 44, 74, 26, 81, 51, 31, 45, 85, 87, 9, 81, 95, 22, 28, 76, 69, 46, 48, 64, 87, 67, 76, 27, 89, 31, 11, 74, 16, 62, 3, 60, 94, 42, 47, 9, 34, 94, 93, 72},
		{56, 18, 90, 18, 42, 17, 42, 32, 14, 86, 6, 53, 33, 95, 99, 35, 29, 15, 44, 20, 49, 59, 25, 54, 34, 59, 84, 21, 23, 54, 35, 90, 78, 16, 93, 13, 37, 88, 54, 19, 86, 67, 68, 55, 66, 84, 65, 42, 98, 37, 87, 56, 33, 28, 58, 38, 28, 38, 66, 27, 52, 21, 81, 15, 8, 22, 97, 32, 85, 27},
		{91, 53, 40, 28, 13, 34, 91, 25, 1, 63, 50, 37, 22, 49, 71, 58, 32, 28, 30, 18, 68, 94, 23, 83, 63, 62, 94, 76, 80, 41, 90, 22, 82, 52, 29, 12, 18, 56, 10, 8, 35, 14, 37, 57, 23, 65, 67, 40, 72, 39, 93, 39, 70, 89, 40, 34, 7, 46, 94, 22, 20, 5, 53, 64, 56, 30, 5, 56, 61, 88, 27},
		{23, 95, 11, 12, 37, 69, 68, 24, 66, 10, 87, 70, 43, 50, 75, 7, 62, 41, 83, 58, 95, 93, 89, 79, 45, 39, 2, 22, 5, 22, 95, 43, 62, 11, 68, 29, 17, 40, 26, 44, 25, 71, 87, 16, 70, 85, 19, 25, 59, 94, 90, 41, 41, 80, 61, 70, 55, 60, 84, 33, 95, 76, 42, 63, 15, 9, 3, 40, 38, 12, 3, 32},
		{9, 84, 56, 80, 61, 55, 85, 97, 16, 94, 82, 94, 98, 57, 84, 30, 84, 48, 93, 90, 71, 5, 95, 90, 73, 17, 30, 98, 40, 64, 65, 89, 7, 79, 9, 19, 56, 36, 42, 30, 23, 69, 73, 72, 7, 5, 27, 61, 24, 31, 43, 48, 71, 84, 21, 28, 26, 65, 65, 59, 65, 74, 77, 20, 10, 81, 61, 84, 95, 8, 52, 23, 70},
		{47, 81, 28, 9, 98, 51, 67, 64, 35, 51, 59, 36, 92, 82, 77, 65, 80, 24, 72, 53, 22, 7, 27, 10, 21, 28, 30, 22, 48, 82, 80, 48, 56, 20, 14, 43, 18, 25, 50, 95, 90, 31, 77, 8, 9, 48, 44, 80, 90, 22, 93, 45, 82, 17, 13, 96, 25, 26, 8, 73, 34, 99, 6, 49, 24, 6, 83, 51, 40, 14, 15, 10, 25, 1},
		{54, 25, 10, 81, 30, 64, 24, 74, 75, 80, 36, 75, 82, 60, 22, 69, 72, 91, 45, 67, 3, 62, 79, 54, 89, 74, 44, 83, 64, 96, 66, 73, 44, 30, 74, 50, 37, 5, 9, 97, 70, 1, 60, 46, 37, 91, 39, 75, 75, 18, 58, 52, 72, 78, 51, 81, 86, 52, 8, 97, 1, 46, 43, 66, 98, 62, 81, 18, 70, 93, 73, 8, 32, 46, 34},
		{96, 80, 82, 7, 59, 71, 92, 53, 19, 20, 88, 66, 3, 26, 26, 10, 24, 27, 50, 82, 94, 73, 63, 8, 51, 33, 22, 45, 19, 13, 58, 33, 90, 15, 22, 50, 36, 13, 55, 6, 35, 47, 82, 52, 33, 61, 36, 27, 28, 46, 98, 14, 73, 20, 73, 32, 16, 26, 80, 53, 47, 66, 76, 38, 94, 45, 2, 1, 22, 52, 47, 96, 64, 58, 52, 39},
		{88, 46, 23, 39, 74, 63, 81, 64, 20, 90, 33, 33, 76, 55, 58, 26, 10, 46, 42, 26, 74, 74, 12, 83, 32, 43, 9, 2, 73, 55, 86, 54, 85, 34, 28, 23, 29, 79, 91, 62, 47, 41, 82, 87, 99, 22, 48, 90, 20, 5, 96, 75, 95, 4, 43, 28, 81, 39, 81, 1, 28, 42, 78, 25, 39, 77, 90, 57, 58, 98, 17, 36, 73, 22, 63, 74, 51},
		{29, 39, 74, 94, 95, 78, 64, 24, 38, 86, 63, 87, 93, 6, 70, 92, 22, 16, 80, 64, 29, 52, 20, 27, 23, 50, 14, 13, 87, 15, 72, 96, 81, 22, 8, 49, 72, 30, 70, 24, 79, 31, 16, 64, 59, 21, 89, 34, 96, 91, 48, 76, 43, 53, 88, 1, 57, 80, 23, 81, 90, 79, 58, 1, 80, 87, 17, 99, 86, 90, 72, 63, 32, 69, 14, 28, 88, 69},
		{37, 17, 71, 95, 56, 93, 71, 35, 43, 45, 4, 98, 92, 94, 84, 96, 11, 30, 31, 27, 31, 60, 92, 3, 48, 5, 98, 91, 86, 94, 35, 90, 90, 8, 48, 19, 33, 28, 68, 37, 59, 26, 65, 96, 50, 68, 22, 7, 9, 49, 34, 31, 77, 49, 43, 6, 75, 17, 81, 87, 61, 79, 52, 26, 27, 72, 29, 50, 7, 98, 86, 1, 17, 10, 46, 64, 24, 18, 56},
		{51, 30, 25, 94, 88, 85, 79, 91, 40, 33, 63, 84, 49, 67, 98, 92, 15, 26, 75, 19, 82, 5, 18, 78, 65, 93, 61, 48, 91, 43, 59, 41, 70, 51, 22, 15, 92, 81, 67, 91, 46, 98, 11, 11, 65, 31, 66, 10, 98, 65, 83, 21, 5, 56, 5, 98, 73, 67, 46, 74, 69, 34, 8, 30, 5, 52, 7, 98, 32, 95, 30, 94, 65, 50, 24, 63, 28, 81, 99, 57},
		{19, 23, 61, 36, 9, 89, 71, 98, 65, 17, 30, 29, 89, 26, 79, 74, 94, 11, 44, 48, 97, 54, 81, 55, 39, 66, 69, 45, 28, 47, 13, 86, 15, 76, 74, 70, 84, 32, 36, 33, 79, 20, 78, 14, 41, 47, 89, 28, 81, 5, 99, 66, 81, 86, 38, 26, 6, 25, 13, 60, 54, 55, 23, 53, 27, 5, 89, 25, 23, 11, 13, 54, 59, 54, 56, 34, 16, 24, 53, 44, 6},
		{13, 40, 57, 72, 21, 15, 60, 8, 4, 19, 11, 98, 34, 45, 9, 97, 86, 71, 3, 15, 56, 19, 15, 44, 97, 31, 90, 4, 87, 87, 76, 8, 12, 30, 24, 62, 84, 28, 12, 85, 82, 53, 99, 52, 13, 94, 6, 65, 97, 86, 9, 50, 94, 68, 69, 74, 30, 67, 87, 94, 63, 7, 78, 27, 80, 36, 69, 41, 6, 92, 32, 78, 37, 82, 30, 5, 18, 87, 99, 72, 19, 99},
		{44, 20, 55, 77, 69, 91, 27, 31, 28, 81, 80, 27, 2, 7, 97, 23, 95, 98, 12, 25, 75, 29, 47, 71, 7, 47, 78, 39, 41, 59, 27, 76, 13, 15, 66, 61, 68, 35, 69, 86, 16, 53, 67, 63, 99, 85, 41, 56, 8, 28, 33, 40, 94, 76, 90, 85, 31, 70, 24, 65, 84, 65, 99, 82, 19, 25, 54, 37, 21, 46, 33, 2, 52, 99, 51, 33, 26, 4, 87, 2, 8, 18, 96},
		{54, 42, 61, 45, 91, 6, 64, 79, 80, 82, 32, 16, 83, 63, 42, 49, 19, 78, 65, 97, 40, 42, 14, 61, 49, 34, 4, 18, 25, 98, 59, 30, 82, 72, 26, 88, 54, 36, 21, 75, 3, 88, 99, 53, 46, 51, 55, 78, 22, 94, 34, 40, 68, 87, 84, 25, 30, 76, 25, 8, 92, 84, 42, 61, 40, 38, 9, 99, 40, 23, 29, 39, 46, 55, 10, 90, 35, 84, 56, 70, 63, 23, 91, 39},
		{52, 92, 3, 71, 89, 7, 9, 37, 68, 66, 58, 20, 44, 92, 51, 56, 13, 71, 79, 99, 26, 37, 2, 6, 16, 67, 36, 52, 58, 16, 79, 73, 56, 60, 59, 27, 44, 77, 94, 82, 20, 50, 98, 33, 9, 87, 94, 37, 40, 83, 64, 83, 58, 85, 17, 76, 53, 2, 83, 52, 22, 27, 39, 20, 48, 92, 45, 21, 9, 42, 24, 23, 12, 37, 52, 28, 50, 78, 79, 20, 86, 62, 73, 20, 59},
		{54, 96, 80, 15, 91, 90, 99, 70, 10, 9, 58, 90, 93, 50, 81, 99, 54, 38, 36, 10, 30, 11, 35, 84, 16, 45, 82, 18, 11, 97, 36, 43, 96, 79, 97, 65, 40, 48, 23, 19, 17, 31, 64, 52, 65, 65, 37, 32, 65, 76, 99, 79, 34, 65, 79, 27, 55, 33, 3, 1, 33, 27, 61, 28, 66, 8, 4, 70, 49, 46, 48, 83, 1, 45, 19, 96, 13, 81, 14, 21, 31, 79, 93, 85, 50, 5},
		{92, 92, 48, 84, 59, 98, 31, 53, 23, 27, 15, 22, 79, 95, 24, 76, 5, 79, 16, 93, 97, 89, 38, 89, 42, 83, 2, 88, 94, 95, 82, 21, 1, 97, 48, 39, 31, 78, 9, 65, 50, 56, 97, 61, 1, 7, 65, 27, 21, 23, 14, 15, 80, 97, 44, 78, 49, 35, 33, 45, 81, 74, 34, 5, 31, 57, 9, 38, 94, 7, 69, 54, 69, 32, 65, 68, 46, 68, 78, 90, 24, 28, 49, 51, 45, 86, 35},
		{41, 63, 89, 76, 87, 31, 86, 9, 46, 14, 87, 82, 22, 29, 47, 16, 13, 10, 70, 72, 82, 95, 48, 64, 58, 43, 13, 75, 42, 69, 21, 12, 67, 13, 64, 85, 58, 23, 98, 9, 37, 76, 5, 22, 31, 12, 66, 50, 29, 99, 86, 72, 45, 25, 10, 28, 19, 6, 90, 43, 29, 31, 67, 79, 46, 25, 74, 14, 97, 35, 76, 37, 65, 46, 23, 82, 6, 22, 30, 76, 93, 66, 94, 17, 96, 13, 20, 72},
		{63, 40, 78, 8, 52, 9, 90, 41, 70, 28, 36, 14, 46, 44, 85, 96, 24, 52, 58, 15, 87, 37, 5, 98, 99, 39, 13, 61, 76, 38, 44, 99, 83, 74, 90, 22, 53, 80, 56, 98, 30, 51, 63, 39, 44, 30, 91, 91, 4, 22, 27, 73, 17, 35, 53, 18, 35, 45, 54, 56, 27, 78, 48, 13, 69, 36, 44, 38, 71, 25, 30, 56, 15, 22, 73, 43, 32, 69, 59, 25, 93, 83, 45, 11, 34, 94, 44, 39, 92},
		{12, 36, 56, 88, 13, 96, 16, 12, 55, 54, 11, 47, 19, 78, 17, 17, 68, 81, 77, 51, 42, 55, 99, 85, 66, 27, 81, 79, 93, 42, 65, 61, 69, 74, 14, 1, 18, 56, 12, 1, 58, 37, 91, 22, 42, 66, 83, 25, 19, 4, 96, 41, 25, 45, 18, 69, 96, 88, 36, 93, 10, 12, 98, 32, 44, 83, 83, 4, 72, 91, 4, 27, 73, 7, 34, 37, 71, 60, 59, 31, 1, 54, 54, 44, 96, 93, 83, 36, 4, 45},
		{30, 18, 22, 20, 42, 96, 65, 79, 17, 41, 55, 69, 94, 81, 29, 80, 91, 31, 85, 25, 47, 26, 43, 49, 2, 99, 34, 67, 99, 76, 16, 14, 15, 93, 8, 32, 99, 44, 61, 77, 67, 50, 43, 55, 87, 55, 53, 72, 17, 46, 62, 25, 50, 99, 73, 5, 93, 48, 17, 31, 70, 80, 59, 9, 44, 59, 45, 13, 74, 66, 58, 94, 87, 73, 16, 14, 85, 38, 74, 99, 64, 23, 79, 28, 71, 42, 20, 37, 82, 31, 23},
		{51, 96, 39, 65, 46, 71, 56, 13, 29, 68, 53, 86, 45, 33, 51, 49, 12, 91, 21, 21, 76, 85, 2, 17, 98, 15, 46, 12, 60, 21, 88, 30, 92, 83, 44, 59, 42, 50, 27, 88, 46, 86, 94, 73, 45, 54, 23, 24, 14, 10, 94, 21, 20, 34, 23, 51, 4, 83, 99, 75, 90, 63, 60, 16, 22, 33, 83, 70, 11, 32, 10, 50, 29, 30, 83, 46, 11, 5, 31, 17, 86, 42, 49, 1, 44, 63, 28, 60, 7, 78, 95, 40},
		{44, 61, 89, 59, 4, 49, 51, 27, 69, 71, 46, 76, 44, 4, 9, 34, 56, 39, 15, 6, 94, 91, 75, 90, 65, 27, 56, 23, 74, 6, 23, 33, 36, 69, 14, 39, 5, 34, 35, 57, 33, 22, 76, 46, 56, 10, 61, 65, 98, 9, 16, 69, 4, 62, 65, 18, 99, 76, 49, 18, 72, 66, 73, 83, 82, 40, 76, 31, 89, 91, 27, 88, 17, 35, 41, 35, 32, 51, 32, 67, 52, 68, 74, 85, 80, 57, 7, 11, 62, 66, 47, 22, 67},
		{65, 37, 19, 97, 26, 17, 16, 24, 24, 17, 50, 37, 64, 82, 24, 36, 32, 11, 68, 34, 69, 31, 32, 89, 79, 93, 96, 68, 49, 90, 14, 23, 4, 4, 67, 99, 81, 74, 70, 74, 36, 96, 68, 9, 64, 39, 88, 35, 54, 89, 96, 58, 66, 27, 88, 97, 32, 14, 6, 35, 78, 20, 71, 6, 85, 66, 57, 2, 58, 91, 72, 5, 29, 56, 73, 48, 86, 52, 9, 93, 22, 57, 79, 42, 12, 1, 31, 68, 17, 59, 63, 76, 7, 77},
		{73, 81, 14, 13, 17, 20, 11, 9, 1, 83, 8, 85, 91, 70, 84, 63, 62, 77, 37, 7, 47, 1, 59, 95, 39, 69, 39, 21, 99, 9, 87, 2, 97, 16, 92, 36, 74, 71, 90, 66, 33, 73, 73, 75, 52, 91, 11, 12, 26, 53, 5, 26, 26, 48, 61, 50, 90, 65, 1, 87, 42, 47, 74, 35, 22, 73, 24, 26, 56, 70, 52, 5, 48, 41, 31, 18, 83, 27, 21, 39, 80, 85, 26, 8, 44, 2, 71, 7, 63, 22, 5, 52, 19, 8, 20},
		{17, 25, 21, 11, 72, 93, 33, 49, 64, 23, 53, 82, 3, 13, 91, 65, 85, 2, 40, 5, 42, 31, 77, 42, 5, 36, 6, 54, 4, 58, 7, 76, 87, 83, 25, 57, 66, 12, 74, 33, 85, 37, 74, 32, 20, 69, 3, 97, 91, 68, 82, 44, 19, 14, 89, 28, 85, 85, 80, 53, 34, 87, 58, 98, 88, 78, 48, 65, 98, 40, 11, 57, 10, 67, 70, 81, 60, 79, 74, 72, 97, 59, 79, 47, 30, 20, 54, 80, 89, 91, 14, 5, 33, 36, 79, 39},
		{60, 85, 59, 39, 60, 7, 57, 76, 77, 92, 6, 35, 15, 72, 23, 41, 45, 52, 95, 18, 64, 79, 86, 53, 56, 31, 69, 11, 91, 31, 84, 50, 44, 82, 22, 81, 41, 40, 30, 42, 30, 91, 48, 94, 74, 76, 64, 58, 74, 25, 96, 57, 14, 19, 3, 99, 28, 83, 15, 75, 99, 1, 89, 85, 79, 50, 3, 95, 32, 67, 44, 8, 7, 41, 62, 64, 29, 20, 14, 76, 26, 55, 48, 71, 69, 66, 19, 72, 44, 25, 14, 1, 48, 74, 12, 98, 7},
		{64, 66, 84, 24, 18, 16, 27, 48, 20, 14, 47, 69, 30, 86, 48, 40, 23, 16, 61, 21, 51, 50, 26, 47, 35, 33, 91, 28, 78, 64, 43, 68, 4, 79, 51, 8, 19, 60, 52, 95, 6, 68, 46, 86, 35, 97, 27, 58, 4, 65, 30, 58, 99, 12, 12, 75, 91, 39, 50, 31, 42, 64, 70, 4, 46, 7, 98, 73, 98, 93, 37, 89, 77, 91, 64, 71, 64, 65, 66, 21, 78, 62, 81, 74, 42, 20, 83, 70, 73, 95, 78, 45, 92, 27, 34, 53, 71, 15},
		{30, 11, 85, 31, 34, 71, 13, 48, 5, 14, 44, 3, 19, 67, 23, 73, 19, 57, 6, 90, 94, 72, 57, 69, 81, 62, 59, 68, 88, 57, 55, 69, 49, 13, 7, 87, 97, 80, 89, 5, 71, 5, 5, 26, 38, 40, 16, 62, 45, 99, 18, 38, 98, 24, 21, 26, 62, 74, 69, 4, 85, 57, 77, 35, 58, 67, 91, 79, 79, 57, 86, 28, 66, 34, 72, 51, 76, 78, 36, 95, 63, 90, 8, 78, 47, 63, 45, 31, 22, 70, 52, 48, 79, 94, 15, 77, 61, 67, 68},
		{23, 33, 44, 81, 80, 92, 93, 75, 94, 88, 23, 61, 39, 76, 22, 3, 28, 94, 32, 6, 49, 65, 41, 34, 18, 23, 8, 47, 62, 60, 3, 63, 33, 13, 80, 52, 31, 54, 73, 43, 70, 26, 16, 69, 57, 87, 83, 31, 3, 93, 70, 81, 47, 95, 77, 44, 29, 68, 39, 51, 56, 59, 63, 7, 25, 70, 7, 77, 43, 53, 64, 3, 94, 42, 95, 39, 18, 1, 66, 21, 16, 97, 20, 50, 90, 16, 70, 10, 95, 69, 29, 6, 25, 61, 41, 26, 15, 59, 63, 35}
	};

	vector<vector<int>> tric = tri;

	for (int i = (int)tri.size() - 2; i >= 0; i--) {
		for (UINT j = 0; j < tri[i].size(); j++) {
			tri[i][j] += tri[i + 1][j] > tri[i + 1][j + 1] ? tri[i + 1][j] : tri[i + 1][j + 1];
		}
	}

	/*int d = 0;
	vector<int> solution = {tric[0][0]};
	for (int i = 0; i < tri.size() - 1; i++) {
		if (tri[i + 1][d] > tri[i + 1][d + 1]) {
			solution.push_back(tric[i + 1][d]);
		}
		else {
			solution.push_back(tric[i + 1][++d]);
		}
	}

	for (int i = 0; i < solution.size(); i++) {
		cout << solution[i] << " ";
	}
	cout << tri[0][0] << '\n';*/

	return tri[0][0];
}

ull Problem_71() {
	//TODO problem 71
	ull ret;

	POINT s{0,1}, e{3,7};
	std::list<POINT> fracs = { s, e };
	
	int d = 1;
	while (d < 1000000) {
		POINT c;
		for (auto it = fracs.begin(); it != fracs.end() && it != std::prev(fracs.end()); ) {
			auto l = it;
			auto r = ++it;
			
			POINT c = {(*l).x + (*r).x, (*l).y + (*r).y};
			d = d < c.y ? c.y : d;

			if (c.y <= 1000000)
				fracs.insert(r, c);
		}

		cout << d << '\n';
		/*	for (auto a : fracs) {
			cout << a.x << "/" << a.y << ",";
		}
		cout << '\n';
		_getch();*/
	}

	auto p = *std::prev(std::prev(fracs.end()));
	cout << p.x << " " << p.y;
	return p.x;
	//return ret;
}

ull Problem_76() {
	ull answer = 0;

	int N = 100;

	vector<int> n;
	n.push_back(N);

	int c = N;

	while (!n.empty()) {
		if (n[n.size() - 1] != 1) {
			n[n.size() - 1]--;
			c--;
		}
		else if (c == N) {
			while (n[n.size() - 1] == 1) {
				n.pop_back();
				c--;
			}
			continue;
		}	

		while (c < N) {
			int r = N - c;
			if (r > n[n.size() - 1])
				r = n[n.size() - 1];

			n.push_back(r);
			c += r;
		}
		answer++;
	}

	return answer;
}

ull Problem_81() {
	vector<vector<vector<int>>> tris(2);

	vector<vector<int>> g = {
		{4445, 2697, 5115, 718, 2209, 2212, 654, 4348, 3079, 6821, 7668, 3276, 8874, 4190, 3785, 2752, 9473, 7817, 9137, 496, 7338, 3434, 7152, 4355, 4552, 7917, 7827, 2460, 2350, 691, 3514, 5880, 3145, 7633, 7199, 3783, 5066, 7487, 3285, 1084, 8985, 760, 872, 8609, 8051, 1134, 9536, 5750, 9716, 9371, 7619, 5617, 275, 9721, 2997, 2698, 1887, 8825, 6372, 3014, 2113, 7122, 7050, 6775, 5948, 2758, 1219, 3539, 348, 7989, 2735, 9862, 1263, 8089, 6401, 9462, 3168, 2758, 3748, 5870},
		{1096, 20, 1318, 7586, 5167, 2642, 1443, 5741, 7621, 7030, 5526, 4244, 2348, 4641, 9827, 2448, 6918, 5883, 3737, 300, 7116, 6531, 567, 5997, 3971, 6623, 820, 6148, 3287, 1874, 7981, 8424, 7672, 7575, 6797, 6717, 1078, 5008, 4051, 8795, 5820, 346, 1851, 6463, 2117, 6058, 3407, 8211, 117, 4822, 1317, 4377, 4434, 5925, 8341, 4800, 1175, 4173, 690, 8978, 7470, 1295, 3799, 8724, 3509, 9849, 618, 3320, 7068, 9633, 2384, 7175, 544, 6583, 1908, 9983, 481, 4187, 9353, 9377},
		{9607, 7385, 521, 6084, 1364, 8983, 7623, 1585, 6935, 8551, 2574, 8267, 4781, 3834, 2764, 2084, 2669, 4656, 9343, 7709, 2203, 9328, 8004, 6192, 5856, 3555, 2260, 5118, 6504, 1839, 9227, 1259, 9451, 1388, 7909, 5733, 6968, 8519, 9973, 1663, 5315, 7571, 3035, 4325, 4283, 2304, 6438, 3815, 9213, 9806, 9536, 196, 5542, 6907, 2475, 1159, 5820, 9075, 9470, 2179, 9248, 1828, 4592, 9167, 3713, 4640, 47, 3637, 309, 7344, 6955, 346, 378, 9044, 8635, 7466, 5036, 9515, 6385, 9230},
		{7206, 3114, 7760, 1094, 6150, 5182, 7358, 7387, 4497, 955, 101, 1478, 7777, 6966, 7010, 8417, 6453, 4955, 3496, 107, 449, 8271, 131, 2948, 6185, 784, 5937, 8001, 6104, 8282, 4165, 3642, 710, 2390, 575, 715, 3089, 6964, 4217, 192, 5949, 7006, 715, 3328, 1152, 66, 8044, 4319, 1735, 146, 4818, 5456, 6451, 4113, 1063, 4781, 6799, 602, 1504, 6245, 6550, 1417, 1343, 2363, 3785, 5448, 4545, 9371, 5420, 5068, 4613, 4882, 4241, 5043, 7873, 8042, 8434, 3939, 9256, 2187},
		{3620, 8024, 577, 9997, 7377, 7682, 1314, 1158, 6282, 6310, 1896, 2509, 5436, 1732, 9480, 706, 496, 101, 6232, 7375, 2207, 2306, 110, 6772, 3433, 2878, 8140, 5933, 8688, 1399, 2210, 7332, 6172, 6403, 7333, 4044, 2291, 1790, 2446, 7390, 8698, 5723, 3678, 7104, 1825, 2040, 140, 3982, 4905, 4160, 2200, 5041, 2512, 1488, 2268, 1175, 7588, 8321, 8078, 7312, 977, 5257, 8465, 5068, 3453, 3096, 1651, 7906, 253, 9250, 6021, 8791, 8109, 6651, 3412, 345, 4778, 5152, 4883, 7505},
		{1074, 5438, 9008, 2679, 5397, 5429, 2652, 3403, 770, 9188, 4248, 2493, 4361, 8327, 9587, 707, 9525, 5913, 93, 1899, 328, 2876, 3604, 673, 8576, 6908, 7659, 2544, 3359, 3883, 5273, 6587, 3065, 1749, 3223, 604, 9925, 6941, 2823, 8767, 7039, 3290, 3214, 1787, 7904, 3421, 7137, 9560, 8451, 2669, 9219, 6332, 1576, 5477, 6755, 8348, 4164, 4307, 2984, 4012, 6629, 1044, 2874, 6541, 4942, 903, 1404, 9125, 5160, 8836, 4345, 2581, 460, 8438, 1538, 5507, 668, 3352, 2678, 6942},
		{4295, 1176, 5596, 1521, 3061, 9868, 7037, 7129, 8933, 6659, 5947, 5063, 3653, 9447, 9245, 2679, 767, 714, 116, 8558, 163, 3927, 8779, 158, 5093, 2447, 5782, 3967, 1716, 931, 7772, 8164, 1117, 9244, 5783, 7776, 3846, 8862, 6014, 2330, 6947, 1777, 3112, 6008, 3491, 1906, 5952, 314, 4602, 8994, 5919, 9214, 3995, 5026, 7688, 6809, 5003, 3128, 2509, 7477, 110, 8971, 3982, 8539, 2980, 4689, 6343, 5411, 2992, 5270, 5247, 9260, 2269, 7474, 1042, 7162, 5206, 1232, 4556, 4757},
		{510, 3556, 5377, 1406, 5721, 4946, 2635, 7847, 4251, 8293, 8281, 6351, 4912, 287, 2870, 3380, 3948, 5322, 3840, 4738, 9563, 1906, 6298, 3234, 8959, 1562, 6297, 8835, 7861, 239, 6618, 1322, 2553, 2213, 5053, 5446, 4402, 6500, 5182, 8585, 6900, 5756, 9661, 903, 5186, 7687, 5998, 7997, 8081, 8955, 4835, 6069, 2621, 1581, 732, 9564, 1082, 1853, 5442, 1342, 520, 1737, 3703, 5321, 4793, 2776, 1508, 1647, 9101, 2499, 6891, 4336, 7012, 3329, 3212, 1442, 9993, 3988, 4930, 7706},
		{9444, 3401, 5891, 9716, 1228, 7107, 109, 3563, 2700, 6161, 5039, 4992, 2242, 8541, 7372, 2067, 1294, 3058, 1306, 320, 8881, 5756, 9326, 411, 8650, 8824, 5495, 8282, 8397, 2000, 1228, 7817, 2099, 6473, 3571, 5994, 4447, 1299, 5991, 543, 7874, 2297, 1651, 101, 2093, 3463, 9189, 6872, 6118, 872, 1008, 1779, 2805, 9084, 4048, 2123, 5877, 55, 3075, 1737, 9459, 4535, 6453, 3644, 108, 5982, 4437, 5213, 1340, 6967, 9943, 5815, 669, 8074, 1838, 6979, 9132, 9315, 715, 5048},
		{3327, 4030, 7177, 6336, 9933, 5296, 2621, 4785, 2755, 4832, 2512, 2118, 2244, 4407, 2170, 499, 7532, 9742, 5051, 7687, 970, 6924, 3527, 4694, 5145, 1306, 2165, 5940, 2425, 8910, 3513, 1909, 6983, 346, 6377, 4304, 9330, 7203, 6605, 3709, 3346, 970, 369, 9737, 5811, 4427, 9939, 3693, 8436, 5566, 1977, 3728, 2399, 3985, 8303, 2492, 5366, 9802, 9193, 7296, 1033, 5060, 9144, 2766, 1151, 7629, 5169, 5995, 58, 7619, 7565, 4208, 1713, 6279, 3209, 4908, 9224, 7409, 1325, 8540},
		{6882, 1265, 1775, 3648, 4690, 959, 5837, 4520, 5394, 1378, 9485, 1360, 4018, 578, 9174, 2932, 9890, 3696, 116, 1723, 1178, 9355, 7063, 1594, 1918, 8574, 7594, 7942, 1547, 6166, 7888, 354, 6932, 4651, 1010, 7759, 6905, 661, 7689, 6092, 9292, 3845, 9605, 8443, 443, 8275, 5163, 7720, 7265, 6356, 7779, 1798, 1754, 5225, 6661, 1180, 8024, 5666, 88, 9153, 1840, 3508, 1193, 4445, 2648, 3538, 6243, 6375, 8107, 5902, 5423, 2520, 1122, 5015, 6113, 8859, 9370, 966, 8673, 2442},
		{7338, 3423, 4723, 6533, 848, 8041, 7921, 8277, 4094, 5368, 7252, 8852, 9166, 2250, 2801, 6125, 8093, 5738, 4038, 9808, 7359, 9494, 601, 9116, 4946, 2702, 5573, 2921, 9862, 1462, 1269, 2410, 4171, 2709, 7508, 6241, 7522, 615, 2407, 8200, 4189, 5492, 5649, 7353, 2590, 5203, 4274, 710, 7329, 9063, 956, 8371, 3722, 4253, 4785, 1194, 4828, 4717, 4548, 940, 983, 2575, 4511, 2938, 1827, 2027, 2700, 1236, 841, 5760, 1680, 6260, 2373, 3851, 1841, 4968, 1172, 5179, 7175, 3509},
		{4420, 1327, 3560, 2376, 6260, 2988, 9537, 4064, 4829, 8872, 9598, 3228, 1792, 7118, 9962, 9336, 4368, 9189, 6857, 1829, 9863, 6287, 7303, 7769, 2707, 8257, 2391, 2009, 3975, 4993, 3068, 9835, 3427, 341, 8412, 2134, 4034, 8511, 6421, 3041, 9012, 2983, 7289, 100, 1355, 7904, 9186, 6920, 5856, 2008, 6545, 8331, 3655, 5011, 839, 8041, 9255, 6524, 3862, 8788, 62, 7455, 3513, 5003, 8413, 3918, 2076, 7960, 6108, 3638, 6999, 3436, 1441, 4858, 4181, 1866, 8731, 7745, 3744, 1000},
		{356, 8296, 8325, 1058, 1277, 4743, 3850, 2388, 6079, 6462, 2815, 5620, 8495, 5378, 75, 4324, 3441, 9870, 1113, 165, 1544, 1179, 2834, 562, 6176, 2313, 6836, 8839, 2986, 9454, 5199, 6888, 1927, 5866, 8760, 320, 1792, 8296, 7898, 6121, 7241, 5886, 5814, 2815, 8336, 1576, 4314, 3109, 2572, 6011, 2086, 9061, 9403, 3947, 5487, 9731, 7281, 3159, 1819, 1334, 3181, 5844, 5114, 9898, 4634, 2531, 4412, 6430, 4262, 8482, 4546, 4555, 6804, 2607, 9421, 686, 8649, 8860, 7794, 6672},
		{9870, 152, 1558, 4963, 8750, 4754, 6521, 6256, 8818, 5208, 5691, 9659, 8377, 9725, 5050, 5343, 2539, 6101, 1844, 9700, 7750, 8114, 5357, 3001, 8830, 4438, 199, 9545, 8496, 43, 2078, 327, 9397, 106, 6090, 8181, 8646, 6414, 7499, 5450, 4850, 6273, 5014, 4131, 7639, 3913, 6571, 8534, 9703, 4391, 7618, 445, 1320, 5, 1894, 6771, 7383, 9191, 4708, 9706, 6939, 7937, 8726, 9382, 5216, 3685, 2247, 9029, 8154, 1738, 9984, 2626, 9438, 4167, 6351, 5060, 29, 1218, 1239, 4785},
		{192, 5213, 8297, 8974, 4032, 6966, 5717, 1179, 6523, 4679, 9513, 1481, 3041, 5355, 9303, 9154, 1389, 8702, 6589, 7818, 6336, 3539, 5538, 3094, 6646, 6702, 6266, 2759, 4608, 4452, 617, 9406, 8064, 6379, 444, 5602, 4950, 1810, 8391, 1536, 316, 8714, 1178, 5182, 5863, 5110, 5372, 4954, 1978, 2971, 5680, 4863, 2255, 4630, 5723, 2168, 538, 1692, 1319, 7540, 440, 6430, 6266, 7712, 7385, 5702, 620, 641, 3136, 7350, 1478, 3155, 2820, 9109, 6261, 1122, 4470, 14, 8493, 2095},
		{1046, 4301, 6082, 474, 4974, 7822, 2102, 5161, 5172, 6946, 8074, 9716, 6586, 9962, 9749, 5015, 2217, 995, 5388, 4402, 7652, 6399, 6539, 1349, 8101, 3677, 1328, 9612, 7922, 2879, 231, 5887, 2655, 508, 4357, 4964, 3554, 5930, 6236, 7384, 4614, 280, 3093, 9600, 2110, 7863, 2631, 6626, 6620, 68, 1311, 7198, 7561, 1768, 5139, 1431, 221, 230, 2940, 968, 5283, 6517, 2146, 1646, 869, 9402, 7068, 8645, 7058, 1765, 9690, 4152, 2926, 9504, 2939, 7504, 6074, 2944, 6470, 7859},
		{4659, 736, 4951, 9344, 1927, 6271, 8837, 8711, 3241, 6579, 7660, 5499, 5616, 3743, 5801, 4682, 9748, 8796, 779, 1833, 4549, 8138, 4026, 775, 4170, 2432, 4174, 3741, 7540, 8017, 2833, 4027, 396, 811, 2871, 1150, 9809, 2719, 9199, 8504, 1224, 540, 2051, 3519, 7982, 7367, 2761, 308, 3358, 6505, 2050, 4836, 5090, 7864, 805, 2566, 2409, 6876, 3361, 8622, 5572, 5895, 3280, 441, 7893, 8105, 1634, 2929, 274, 3926, 7786, 6123, 8233, 9921, 2674, 5340, 1445, 203, 4585, 3837},
		{5759, 338, 7444, 7968, 7742, 3755, 1591, 4839, 1705, 650, 7061, 2461, 9230, 9391, 9373, 2413, 1213, 431, 7801, 4994, 2380, 2703, 6161, 6878, 8331, 2538, 6093, 1275, 5065, 5062, 2839, 582, 1014, 8109, 3525, 1544, 1569, 8622, 7944, 2905, 6120, 1564, 1839, 5570, 7579, 1318, 2677, 5257, 4418, 5601, 7935, 7656, 5192, 1864, 5886, 6083, 5580, 6202, 8869, 1636, 7907, 4759, 9082, 5854, 3185, 7631, 6854, 5872, 5632, 5280, 1431, 2077, 9717, 7431, 4256, 8261, 9680, 4487, 4752, 4286},
		{1571, 1428, 8599, 1230, 7772, 4221, 8523, 9049, 4042, 8726, 7567, 6736, 9033, 2104, 4879, 4967, 6334, 6716, 3994, 1269, 8995, 6539, 3610, 7667, 6560, 6065, 874, 848, 4597, 1711, 7161, 4811, 6734, 5723, 6356, 6026, 9183, 2586, 5636, 1092, 7779, 7923, 8747, 6887, 7505, 9909, 1792, 3233, 4526, 3176, 1508, 8043, 720, 5212, 6046, 4988, 709, 5277, 8256, 3642, 1391, 5803, 1468, 2145, 3970, 6301, 7767, 2359, 8487, 9771, 8785, 7520, 856, 1605, 8972, 2402, 2386, 991, 1383, 5963},
		{1822, 4824, 5957, 6511, 9868, 4113, 301, 9353, 6228, 2881, 2966, 6956, 9124, 9574, 9233, 1601, 7340, 973, 9396, 540, 4747, 8590, 9535, 3650, 7333, 7583, 4806, 3593, 2738, 8157, 5215, 8472, 2284, 9473, 3906, 6982, 5505, 6053, 7936, 6074, 7179, 6688, 1564, 1103, 6860, 5839, 2022, 8490, 910, 7551, 7805, 881, 7024, 1855, 9448, 4790, 1274, 3672, 2810, 774, 7623, 4223, 4850, 6071, 9975, 4935, 1915, 9771, 6690, 3846, 517, 463, 7624, 4511, 614, 6394, 3661, 7409, 1395, 8127},
		{8738, 3850, 9555, 3695, 4383, 2378, 87, 6256, 6740, 7682, 9546, 4255, 6105, 2000, 1851, 4073, 8957, 9022, 6547, 5189, 2487, 303, 9602, 7833, 1628, 4163, 6678, 3144, 8589, 7096, 8913, 5823, 4890, 7679, 1212, 9294, 5884, 2972, 3012, 3359, 7794, 7428, 1579, 4350, 7246, 4301, 7779, 7790, 3294, 9547, 4367, 3549, 1958, 8237, 6758, 3497, 3250, 3456, 6318, 1663, 708, 7714, 6143, 6890, 3428, 6853, 9334, 7992, 591, 6449, 9786, 1412, 8500, 722, 5468, 1371, 108, 3939, 4199, 2535},
		{7047, 4323, 1934, 5163, 4166, 461, 3544, 2767, 6554, 203, 6098, 2265, 9078, 2075, 4644, 6641, 8412, 9183, 487, 101, 7566, 5622, 1975, 5726, 2920, 5374, 7779, 5631, 3753, 3725, 2672, 3621, 4280, 1162, 5812, 345, 8173, 9785, 1525, 955, 5603, 2215, 2580, 5261, 2765, 2990, 5979, 389, 3907, 2484, 1232, 5933, 5871, 3304, 1138, 1616, 5114, 9199, 5072, 7442, 7245, 6472, 4760, 6359, 9053, 7876, 2564, 9404, 3043, 9026, 2261, 3374, 4460, 7306, 2326, 966, 828, 3274, 1712, 3446},
		{3975, 4565, 8131, 5800, 4570, 2306, 8838, 4392, 9147, 11, 3911, 7118, 9645, 4994, 2028, 6062, 5431, 2279, 8752, 2658, 7836, 994, 7316, 5336, 7185, 3289, 1898, 9689, 2331, 5737, 3403, 1124, 2679, 3241, 7748, 16, 2724, 5441, 6640, 9368, 9081, 5618, 858, 4969, 17, 2103, 6035, 8043, 7475, 2181, 939, 415, 1617, 8500, 8253, 2155, 7843, 7974, 7859, 1746, 6336, 3193, 2617, 8736, 4079, 6324, 6645, 8891, 9396, 5522, 6103, 1857, 8979, 3835, 2475, 1310, 7422, 610, 8345, 7615},
		{9248, 5397, 5686, 2988, 3446, 4359, 6634, 9141, 497, 9176, 6773, 7448, 1907, 8454, 916, 1596, 2241, 1626, 1384, 2741, 3649, 5362, 8791, 7170, 2903, 2475, 5325, 6451, 924, 3328, 522, 90, 4813, 9737, 9557, 691, 2388, 1383, 4021, 1609, 9206, 4707, 5200, 7107, 8104, 4333, 9860, 5013, 1224, 6959, 8527, 1877, 4545, 7772, 6268, 621, 4915, 9349, 5970, 706, 9583, 3071, 4127, 780, 8231, 3017, 9114, 3836, 7503, 2383, 1977, 4870, 8035, 2379, 9704, 1037, 3992, 3642, 1016, 4303},
		{5093, 138, 4639, 6609, 1146, 5565, 95, 7521, 9077, 2272, 974, 4388, 2465, 2650, 722, 4998, 3567, 3047, 921, 2736, 7855, 173, 2065, 4238, 1048, 5, 6847, 9548, 8632, 9194, 5942, 4777, 7910, 8971, 6279, 7253, 2516, 1555, 1833, 3184, 9453, 9053, 6897, 7808, 8629, 4877, 1871, 8055, 4881, 7639, 1537, 7701, 2508, 7564, 5845, 5023, 2304, 5396, 3193, 2955, 1088, 3801, 6203, 1748, 3737, 1276, 13, 4120, 7715, 8552, 3047, 2921, 106, 7508, 304, 1280, 7140, 2567, 9135, 5266},
		{6237, 4607, 7527, 9047, 522, 7371, 4883, 2540, 5867, 6366, 5301, 1570, 421, 276, 3361, 527, 6637, 4861, 2401, 7522, 5808, 9371, 5298, 2045, 5096, 5447, 7755, 5115, 7060, 8529, 4078, 1943, 1697, 1764, 5453, 7085, 960, 2405, 739, 2100, 5800, 728, 9737, 5704, 5693, 1431, 8979, 6428, 673, 7540, 6, 7773, 5857, 6823, 150, 5869, 8486, 684, 5816, 9626, 7451, 5579, 8260, 3397, 5322, 6920, 1879, 2127, 2884, 5478, 4977, 9016, 6165, 6292, 3062, 5671, 5968, 78, 4619, 4763},
		{9905, 7127, 9390, 5185, 6923, 3721, 9164, 9705, 4341, 1031, 1046, 5127, 7376, 6528, 3248, 4941, 1178, 7889, 3364, 4486, 5358, 9402, 9158, 8600, 1025, 874, 1839, 1783, 309, 9030, 1843, 845, 8398, 1433, 7118, 70, 8071, 2877, 3904, 8866, 6722, 4299, 10, 1929, 5897, 4188, 600, 1889, 3325, 2485, 6473, 4474, 7444, 6992, 4846, 6166, 4441, 2283, 2629, 4352, 7775, 1101, 2214, 9985, 215, 8270, 9750, 2740, 8361, 7103, 5930, 8664, 9690, 8302, 9267, 344, 2077, 1372, 1880, 9550},
		{5825, 8517, 7769, 2405, 8204, 1060, 3603, 7025, 478, 8334, 1997, 3692, 7433, 9101, 7294, 7498, 9415, 5452, 3850, 3508, 6857, 9213, 6807, 4412, 7310, 854, 5384, 686, 4978, 892, 8651, 3241, 2743, 3801, 3813, 8588, 6701, 4416, 6990, 6490, 3197, 6838, 6503, 114, 8343, 5844, 8646, 8694, 65, 791, 5979, 2687, 2621, 2019, 8097, 1423, 3644, 9764, 4921, 3266, 3662, 5561, 2476, 8271, 8138, 6147, 1168, 3340, 1998, 9874, 6572, 9873, 6659, 5609, 2711, 3931, 9567, 4143, 7833, 8887},
		{6223, 2099, 2700, 589, 4716, 8333, 1362, 5007, 2753, 2848, 4441, 8397, 7192, 8191, 4916, 9955, 6076, 3370, 6396, 6971, 3156, 248, 3911, 2488, 4930, 2458, 7183, 5455, 170, 6809, 6417, 3390, 1956, 7188, 577, 7526, 2203, 968, 8164, 479, 8699, 7915, 507, 6393, 4632, 1597, 7534, 3604, 618, 3280, 6061, 9793, 9238, 8347, 568, 9645, 2070, 5198, 6482, 5000, 9212, 6655, 5961, 7513, 1323, 3872, 6170, 3812, 4146, 2736, 67, 3151, 5548, 2781, 9679, 7564, 5043, 8587, 1893, 4531},
		{5826, 3690, 6724, 2121, 9308, 6986, 8106, 6659, 2142, 1642, 7170, 2877, 5757, 6494, 8026, 6571, 8387, 9961, 6043, 9758, 9607, 6450, 8631, 8334, 7359, 5256, 8523, 2225, 7487, 1977, 9555, 8048, 5763, 2414, 4948, 4265, 2427, 8978, 8088, 8841, 9208, 9601, 5810, 9398, 8866, 9138, 4176, 5875, 7212, 3272, 6759, 5678, 7649, 4922, 5422, 1343, 8197, 3154, 3600, 687, 1028, 4579, 2084, 9467, 4492, 7262, 7296, 6538, 7657, 7134, 2077, 1505, 7332, 6890, 8964, 4879, 7603, 7400, 5973, 739},
		{1861, 1613, 4879, 1884, 7334, 966, 2000, 7489, 2123, 4287, 1472, 3263, 4726, 9203, 1040, 4103, 6075, 6049, 330, 9253, 4062, 4268, 1635, 9960, 577, 1320, 3195, 9628, 1030, 4092, 4979, 6474, 6393, 2799, 6967, 8687, 7724, 7392, 9927, 2085, 3200, 6466, 8702, 265, 7646, 8665, 7986, 7266, 4574, 6587, 612, 2724, 704, 3191, 8323, 9523, 3002, 704, 5064, 3960, 8209, 2027, 2758, 8393, 4875, 4641, 9584, 6401, 7883, 7014, 768, 443, 5490, 7506, 1852, 2005, 8850, 5776, 4487, 4269},
		{4052, 6687, 4705, 7260, 6645, 6715, 3706, 5504, 8672, 2853, 1136, 8187, 8203, 4016, 871, 1809, 1366, 4952, 9294, 5339, 6872, 2645, 6083, 7874, 3056, 5218, 7485, 8796, 7401, 3348, 2103, 426, 8572, 4163, 9171, 3176, 948, 7654, 9344, 3217, 1650, 5580, 7971, 2622, 76, 2874, 880, 2034, 9929, 1546, 2659, 5811, 3754, 7096, 7436, 9694, 9960, 7415, 2164, 953, 2360, 4194, 2397, 1047, 2196, 6827, 575, 784, 2675, 8821, 6802, 7972, 5996, 6699, 2134, 7577, 2887, 1412, 4349, 4380},
		{4629, 2234, 6240, 8132, 7592, 3181, 6389, 1214, 266, 1910, 2451, 8784, 2790, 1127, 6932, 1447, 8986, 2492, 5476, 397, 889, 3027, 7641, 5083, 5776, 4022, 185, 3364, 5701, 2442, 2840, 4160, 9525, 4828, 6602, 2614, 7447, 3711, 4505, 7745, 8034, 6514, 4907, 2605, 7753, 6958, 7270, 6936, 3006, 8968, 439, 2326, 4652, 3085, 3425, 9863, 5049, 5361, 8688, 297, 7580, 8777, 7916, 6687, 8683, 7141, 306, 9569, 2384, 1500, 3346, 4601, 7329, 9040, 6097, 2727, 6314, 4501, 4974, 2829},
		{8316, 4072, 2025, 6884, 3027, 1808, 5714, 7624, 7880, 8528, 4205, 8686, 7587, 3230, 1139, 7273, 6163, 6986, 3914, 9309, 1464, 9359, 4474, 7095, 2212, 7302, 2583, 9462, 7532, 6567, 1606, 4436, 8981, 5612, 6796, 4385, 5076, 2007, 6072, 3678, 8331, 1338, 3299, 8845, 4783, 8613, 4071, 1232, 6028, 2176, 3990, 2148, 3748, 103, 9453, 538, 6745, 9110, 926, 3125, 473, 5970, 8728, 7072, 9062, 1404, 1317, 5139, 9862, 6496, 6062, 3338, 464, 1600, 2532, 1088, 8232, 7739, 8274, 3873},
		{2341, 523, 7096, 8397, 8301, 6541, 9844, 244, 4993, 2280, 7689, 4025, 4196, 5522, 7904, 6048, 2623, 9258, 2149, 9461, 6448, 8087, 7245, 1917, 8340, 7127, 8466, 5725, 6996, 3421, 5313, 512, 9164, 9837, 9794, 8369, 4185, 1488, 7210, 1524, 1016, 4620, 9435, 2478, 7765, 8035, 697, 6677, 3724, 6988, 5853, 7662, 3895, 9593, 1185, 4727, 6025, 5734, 7665, 3070, 138, 8469, 6748, 6459, 561, 7935, 8646, 2378, 462, 7755, 3115, 9690, 8877, 3946, 2728, 8793, 244, 6323, 8666, 4271},
		{6430, 2406, 8994, 56, 1267, 3826, 9443, 7079, 7579, 5232, 6691, 3435, 6718, 5698, 4144, 7028, 592, 2627, 217, 734, 6194, 8156, 9118, 58, 2640, 8069, 4127, 3285, 694, 3197, 3377, 4143, 4802, 3324, 8134, 6953, 7625, 3598, 3584, 4289, 7065, 3434, 2106, 7132, 5802, 7920, 9060, 7531, 3321, 1725, 1067, 3751, 444, 5503, 6785, 7937, 6365, 4803, 198, 6266, 8177, 1470, 6390, 1606, 2904, 7555, 9834, 8667, 2033, 1723, 5167, 1666, 8546, 8152, 473, 4475, 6451, 7947, 3062, 3281},
		{2810, 3042, 7759, 1741, 2275, 2609, 7676, 8640, 4117, 1958, 7500, 8048, 1757, 3954, 9270, 1971, 4796, 2912, 660, 5511, 3553, 1012, 5757, 4525, 6084, 7198, 8352, 5775, 7726, 8591, 7710, 9589, 3122, 4392, 6856, 5016, 749, 2285, 3356, 7482, 9956, 7348, 2599, 8944, 495, 3462, 3578, 551, 4543, 7207, 7169, 7796, 1247, 4278, 6916, 8176, 3742, 8385, 2310, 1345, 8692, 2667, 4568, 1770, 8319, 3585, 4920, 3890, 4928, 7343, 5385, 9772, 7947, 8786, 2056, 9266, 3454, 2807, 877, 2660},
		{6206, 8252, 5928, 5837, 4177, 4333, 207, 7934, 5581, 9526, 8906, 1498, 8411, 2984, 5198, 5134, 2464, 8435, 8514, 8674, 3876, 599, 5327, 826, 2152, 4084, 2433, 9327, 9697, 4800, 2728, 3608, 3849, 3861, 3498, 9943, 1407, 3991, 7191, 9110, 5666, 8434, 4704, 6545, 5944, 2357, 1163, 4995, 9619, 6754, 4200, 9682, 6654, 4862, 4744, 5953, 6632, 1054, 293, 9439, 8286, 2255, 696, 8709, 1533, 1844, 6441, 430, 1999, 6063, 9431, 7018, 8057, 2920, 6266, 6799, 356, 3597, 4024, 6665},
		{3847, 6356, 8541, 7225, 2325, 2946, 5199, 469, 5450, 7508, 2197, 9915, 8284, 7983, 6341, 3276, 3321, 16, 1321, 7608, 5015, 3362, 8491, 6968, 6818, 797, 156, 2575, 706, 9516, 5344, 5457, 9210, 5051, 8099, 1617, 9951, 7663, 8253, 9683, 2670, 1261, 4710, 1068, 8753, 4799, 1228, 2621, 3275, 6188, 4699, 1791, 9518, 8701, 5932, 4275, 6011, 9877, 2933, 4182, 6059, 2930, 6687, 6682, 9771, 654, 9437, 3169, 8596, 1827, 5471, 8909, 2352, 123, 4394, 3208, 8756, 5513, 6917, 2056},
		{5458, 8173, 3138, 3290, 4570, 4892, 3317, 4251, 9699, 7973, 1163, 1935, 5477, 6648, 9614, 5655, 9592, 975, 9118, 2194, 7322, 8248, 8413, 3462, 8560, 1907, 7810, 6650, 7355, 2939, 4973, 6894, 3933, 3784, 3200, 2419, 9234, 4747, 2208, 2207, 1945, 2899, 1407, 6145, 8023, 3484, 5688, 7686, 2737, 3828, 3704, 9004, 5190, 9740, 8643, 8650, 5358, 4426, 1522, 1707, 3613, 9887, 6956, 2447, 2762, 833, 1449, 9489, 2573, 1080, 4167, 3456, 6809, 2466, 227, 7125, 2759, 6250, 6472, 8089},
		{3266, 7025, 9756, 3914, 1265, 9116, 7723, 9788, 6805, 5493, 2092, 8688, 6592, 9173, 4431, 4028, 6007, 7131, 4446, 4815, 3648, 6701, 759, 3312, 8355, 4485, 4187, 5188, 8746, 7759, 3528, 2177, 5243, 8379, 3838, 7233, 4607, 9187, 7216, 2190, 6967, 2920, 6082, 7910, 5354, 3609, 8958, 6949, 7731, 494, 8753, 8707, 1523, 4426, 3543, 7085, 647, 6771, 9847, 646, 5049, 824, 8417, 5260, 2730, 5702, 2513, 9275, 4279, 2767, 8684, 1165, 9903, 4518, 55, 9682, 8963, 6005, 2102, 6523},
		{1998, 8731, 936, 1479, 5259, 7064, 4085, 91, 7745, 7136, 3773, 3810, 730, 8255, 2705, 2653, 9790, 6807, 2342, 355, 9344, 2668, 3690, 2028, 9679, 8102, 574, 4318, 6481, 9175, 5423, 8062, 2867, 9657, 7553, 3442, 3920, 7430, 3945, 7639, 3714, 3392, 2525, 4995, 4850, 2867, 7951, 9667, 486, 9506, 9888, 781, 8866, 1702, 3795, 90, 356, 1483, 4200, 2131, 6969, 5931, 486, 6880, 4404, 1084, 5169, 4910, 6567, 8335, 4686, 5043, 2614, 3352, 2667, 4513, 6472, 7471, 5720, 1616},
		{8878, 1613, 1716, 868, 1906, 2681, 564, 665, 5995, 2474, 7496, 3432, 9491, 9087, 8850, 8287, 669, 823, 347, 6194, 2264, 2592, 7871, 7616, 8508, 4827, 760, 2676, 4660, 4881, 7572, 3811, 9032, 939, 4384, 929, 7525, 8419, 5556, 9063, 662, 8887, 7026, 8534, 3111, 1454, 2082, 7598, 5726, 6687, 9647, 7608, 73, 3014, 5063, 670, 5461, 5631, 3367, 9796, 8475, 7908, 5073, 1565, 5008, 5295, 4457, 1274, 4788, 1728, 338, 600, 8415, 8535, 9351, 7750, 6887, 5845, 1741, 125},
		{3637, 6489, 9634, 9464, 9055, 2413, 7824, 9517, 7532, 3577, 7050, 6186, 6980, 9365, 9782, 191, 870, 2497, 8498, 2218, 2757, 5420, 6468, 586, 3320, 9230, 1034, 1393, 9886, 5072, 9391, 1178, 8464, 8042, 6869, 2075, 8275, 3601, 7715, 9470, 8786, 6475, 8373, 2159, 9237, 2066, 3264, 5000, 679, 355, 3069, 4073, 494, 2308, 5512, 4334, 9438, 8786, 8637, 9774, 1169, 1949, 6594, 6072, 4270, 9158, 7916, 5752, 6794, 9391, 6301, 5842, 3285, 2141, 3898, 8027, 4310, 8821, 7079, 1307},
		{8497, 6681, 4732, 7151, 7060, 5204, 9030, 7157, 833, 5014, 8723, 3207, 9796, 9286, 4913, 119, 5118, 7650, 9335, 809, 3675, 2597, 5144, 3945, 5090, 8384, 187, 4102, 1260, 2445, 2792, 4422, 8389, 9290, 50, 1765, 1521, 6921, 8586, 4368, 1565, 5727, 7855, 2003, 4834, 9897, 5911, 8630, 5070, 1330, 7692, 7557, 7980, 6028, 5805, 9090, 8265, 3019, 3802, 698, 9149, 5748, 1965, 9658, 4417, 5994, 5584, 8226, 2937, 272, 5743, 1278, 5698, 8736, 2595, 6475, 5342, 6596, 1149, 6920},
		{8188, 8009, 9546, 6310, 8772, 2500, 9846, 6592, 6872, 3857, 1307, 8125, 7042, 1544, 6159, 2330, 643, 4604, 7899, 6848, 371, 8067, 2062, 3200, 7295, 1857, 9505, 6936, 384, 2193, 2190, 301, 8535, 5503, 1462, 7380, 5114, 4824, 8833, 1763, 4974, 8711, 9262, 6698, 3999, 2645, 6937, 7747, 1128, 2933, 3556, 7943, 2885, 3122, 9105, 5447, 418, 2899, 5148, 3699, 9021, 9501, 597, 4084, 175, 1621, 1, 1079, 6067, 5812, 4326, 9914, 6633, 5394, 4233, 6728, 9084, 1864, 5863, 1225},
		{9935, 8793, 9117, 1825, 9542, 8246, 8437, 3331, 9128, 9675, 6086, 7075, 319, 1334, 7932, 3583, 7167, 4178, 1726, 7720, 695, 8277, 7887, 6359, 5912, 1719, 2780, 8529, 1359, 2013, 4498, 8072, 1129, 9998, 1147, 8804, 9405, 6255, 1619, 2165, 7491, 1, 8882, 7378, 3337, 503, 5758, 4109, 3577, 985, 3200, 7615, 8058, 5032, 1080, 6410, 6873, 5496, 1466, 2412, 9885, 5904, 4406, 3605, 8770, 4361, 6205, 9193, 1537, 9959, 214, 7260, 9566, 1685, 100, 4920, 7138, 9819, 5637, 976},
		{3466, 9854, 985, 1078, 7222, 8888, 5466, 5379, 3578, 4540, 6853, 8690, 3728, 6351, 7147, 3134, 6921, 9692, 857, 3307, 4998, 2172, 5783, 3931, 9417, 2541, 6299, 13, 787, 2099, 9131, 9494, 896, 8600, 1643, 8419, 7248, 2660, 2609, 8579, 91, 6663, 5506, 7675, 1947, 6165, 4286, 1972, 9645, 3805, 1663, 1456, 8853, 5705, 9889, 7489, 1107, 383, 4044, 2969, 3343, 152, 7805, 4980, 9929, 5033, 1737, 9953, 7197, 9158, 4071, 1324, 473, 9676, 3984, 9680, 3606, 8160, 7384, 5432},
		{1005, 4512, 5186, 3953, 2164, 3372, 4097, 3247, 8697, 3022, 9896, 4101, 3871, 6791, 3219, 2742, 4630, 6967, 7829, 5991, 6134, 1197, 1414, 8923, 8787, 1394, 8852, 5019, 7768, 5147, 8004, 8825, 5062, 9625, 7988, 1110, 3992, 7984, 9966, 6516, 6251, 8270, 421, 3723, 1432, 4830, 6935, 8095, 9059, 2214, 6483, 6846, 3120, 1587, 6201, 6691, 9096, 9627, 6671, 4002, 3495, 9939, 7708, 7465, 5879, 6959, 6634, 3241, 3401, 2355, 9061, 2611, 7830, 3941, 2177, 2146, 5089, 7079, 519, 6351},
		{7280, 8586, 4261, 2831, 7217, 3141, 9994, 9940, 5462, 2189, 4005, 6942, 9848, 5350, 8060, 6665, 7519, 4324, 7684, 657, 9453, 9296, 2944, 6843, 7499, 7847, 1728, 9681, 3906, 6353, 5529, 2822, 3355, 3897, 7724, 4257, 7489, 8672, 4356, 3983, 1948, 6892, 7415, 4153, 5893, 4190, 621, 1736, 4045, 9532, 7701, 3671, 1211, 1622, 3176, 4524, 9317, 7800, 5638, 6644, 6943, 5463, 3531, 2821, 1347, 5958, 3436, 1438, 2999, 994, 850, 4131, 2616, 1549, 3465, 5946, 690, 9273, 6954, 7991},
		{9517, 399, 3249, 2596, 7736, 2142, 1322, 968, 7350, 1614, 468, 3346, 3265, 7222, 6086, 1661, 5317, 2582, 7959, 4685, 2807, 2917, 1037, 5698, 1529, 3972, 8716, 2634, 3301, 3412, 8621, 743, 8001, 4734, 888, 7744, 8092, 3671, 8941, 1487, 5658, 7099, 2781, 99, 1932, 4443, 4756, 4652, 9328, 1581, 7855, 4312, 5976, 7255, 6480, 3996, 2748, 1973, 9731, 4530, 2790, 9417, 7186, 5303, 3557, 351, 7182, 9428, 1342, 9020, 7599, 1392, 8304, 2070, 9138, 7215, 2008, 9937, 1106, 7110},
		{7444, 769, 9688, 632, 1571, 6820, 8743, 4338, 337, 3366, 3073, 1946, 8219, 104, 4210, 6986, 249, 5061, 8693, 7960, 6546, 1004, 8857, 5997, 9352, 4338, 6105, 5008, 2556, 6518, 6694, 4345, 3727, 7956, 20, 3954, 8652, 4424, 9387, 2035, 8358, 5962, 5304, 5194, 8650, 8282, 1256, 1103, 2138, 6679, 1985, 3653, 2770, 2433, 4278, 615, 2863, 1715, 242, 3790, 2636, 6998, 3088, 1671, 2239, 957, 5411, 4595, 6282, 2881, 9974, 2401, 875, 7574, 2987, 4587, 3147, 6766, 9885, 2965},
		{3287, 3016, 3619, 6818, 9073, 6120, 5423, 557, 2900, 2015, 8111, 3873, 1314, 4189, 1846, 4399, 7041, 7583, 2427, 2864, 3525, 5002, 2069, 748, 1948, 6015, 2684, 438, 770, 8367, 1663, 7887, 7759, 1885, 157, 7770, 4520, 4878, 3857, 1137, 3525, 3050, 6276, 5569, 7649, 904, 4533, 7843, 2199, 5648, 7628, 9075, 9441, 3600, 7231, 2388, 5640, 9096, 958, 3058, 584, 5899, 8150, 1181, 9616, 1098, 8162, 6819, 8171, 1519, 1140, 7665, 8801, 2632, 1299, 9192, 707, 9955, 2710, 7314},
		{1772, 2963, 7578, 3541, 3095, 1488, 7026, 2634, 6015, 4633, 4370, 2762, 1650, 2174, 909, 8158, 2922, 8467, 4198, 4280, 9092, 8856, 8835, 5457, 2790, 8574, 9742, 5054, 9547, 4156, 7940, 8126, 9824, 7340, 8840, 6574, 3547, 1477, 3014, 6798, 7134, 435, 9484, 9859, 3031, 4, 1502, 4133, 1738, 1807, 4825, 463, 6343, 9701, 8506, 9822, 9555, 8688, 8168, 3467, 3234, 6318, 1787, 5591, 419, 6593, 7974, 8486, 9861, 6381, 6758, 194, 3061, 4315, 2863, 4665, 3789, 2201, 1492, 4416},
		{126, 8927, 6608, 5682, 8986, 6867, 1715, 6076, 3159, 788, 3140, 4744, 830, 9253, 5812, 5021, 7616, 8534, 1546, 9590, 1101, 9012, 9821, 8132, 7857, 4086, 1069, 7491, 2988, 1579, 2442, 4321, 2149, 7642, 6108, 250, 6086, 3167, 24, 9528, 7663, 2685, 1220, 9196, 1397, 5776, 1577, 1730, 5481, 977, 6115, 199, 6326, 2183, 3767, 5928, 5586, 7561, 663, 8649, 9688, 949, 5913, 9160, 1870, 5764, 9887, 4477, 6703, 1413, 4995, 5494, 7131, 2192, 8969, 7138, 3997, 8697, 646, 1028},
		{8074, 1731, 8245, 624, 4601, 8706, 155, 8891, 309, 2552, 8208, 8452, 2954, 3124, 3469, 4246, 3352, 1105, 4509, 8677, 9901, 4416, 8191, 9283, 5625, 7120, 2952, 8881, 7693, 830, 4580, 8228, 9459, 8611, 4499, 1179, 4988, 1394, 550, 2336, 6089, 6872, 269, 7213, 1848, 917, 6672, 4890, 656, 1478, 6536, 3165, 4743, 4990, 1176, 6211, 7207, 5284, 9730, 4738, 1549, 4986, 4942, 8645, 3698, 9429, 1439, 2175, 6549, 3058, 6513, 1574, 6988, 8333, 3406, 5245, 5431, 7140, 7085, 6407},
		{7845, 4694, 2530, 8249, 290, 5948, 5509, 1588, 5940, 4495, 5866, 5021, 4626, 3979, 3296, 7589, 4854, 1998, 5627, 3926, 8346, 6512, 9608, 1918, 7070, 4747, 4182, 2858, 2766, 4606, 6269, 4107, 8982, 8568, 9053, 4244, 5604, 102, 2756, 727, 5887, 2566, 7922, 44, 5986, 621, 1202, 374, 6988, 4130, 3627, 6744, 9443, 4568, 1398, 8679, 397, 3928, 9159, 367, 2917, 6127, 5788, 3304, 8129, 911, 2669, 1463, 9749, 264, 4478, 8940, 1109, 7309, 2462, 117, 4692, 7724, 225, 2312},
		{4164, 3637, 2000, 941, 8903, 39, 3443, 7172, 1031, 3687, 4901, 8082, 4945, 4515, 7204, 9310, 9349, 9535, 9940, 218, 1788, 9245, 2237, 1541, 5670, 6538, 6047, 5553, 9807, 8101, 1925, 8714, 445, 8332, 7309, 6830, 5786, 5736, 7306, 2710, 3034, 1838, 7969, 6318, 7912, 2584, 2080, 7437, 6705, 2254, 7428, 820, 782, 9861, 7596, 3842, 3631, 8063, 5240, 6666, 394, 4565, 7865, 4895, 9890, 6028, 6117, 4724, 9156, 4473, 4552, 602, 470, 6191, 4927, 5387, 884, 3146, 1978, 3000},
		{4258, 6880, 1696, 3582, 5793, 4923, 2119, 1155, 9056, 9698, 6603, 3768, 5514, 9927, 9609, 6166, 6566, 4536, 4985, 4934, 8076, 9062, 6741, 6163, 7399, 4562, 2337, 5600, 2919, 9012, 8459, 1308, 6072, 1225, 9306, 8818, 5886, 7243, 7365, 8792, 6007, 9256, 6699, 7171, 4230, 7002, 8720, 7839, 4533, 1671, 478, 7774, 1607, 2317, 5437, 4705, 7886, 4760, 6760, 7271, 3081, 2997, 3088, 7675, 6208, 3101, 6821, 6840, 122, 9633, 4900, 2067, 8546, 4549, 2091, 7188, 5605, 8599, 6758, 5229},
		{7854, 5243, 9155, 3556, 8812, 7047, 2202, 1541, 5993, 4600, 4760, 713, 434, 7911, 7426, 7414, 8729, 322, 803, 7960, 7563, 4908, 6285, 6291, 736, 3389, 9339, 4132, 8701, 7534, 5287, 3646, 592, 3065, 7582, 2592, 8755, 6068, 8597, 1982, 5782, 1894, 2900, 6236, 4039, 6569, 3037, 5837, 7698, 700, 7815, 2491, 7272, 5878, 3083, 6778, 6639, 3589, 5010, 8313, 2581, 6617, 5869, 8402, 6808, 2951, 2321, 5195, 497, 2190, 6187, 1342, 1316, 4453, 7740, 4154, 2959, 1781, 1482, 8256},
		{7178, 2046, 4419, 744, 8312, 5356, 6855, 8839, 319, 2962, 5662, 47, 6307, 8662, 68, 4813, 567, 2712, 9931, 1678, 3101, 8227, 6533, 4933, 6656, 92, 5846, 4780, 6256, 6361, 4323, 9985, 1231, 2175, 7178, 3034, 9744, 6155, 9165, 7787, 5836, 9318, 7860, 9644, 8941, 6480, 9443, 8188, 5928, 161, 6979, 2352, 5628, 6991, 1198, 8067, 5867, 6620, 3778, 8426, 2994, 3122, 3124, 6335, 3918, 8897, 2655, 9670, 634, 1088, 1576, 8935, 7255, 474, 8166, 7417, 9547, 2886, 5560, 3842},
		{6957, 3111, 26, 7530, 7143, 1295, 1744, 6057, 3009, 1854, 8098, 5405, 2234, 4874, 9447, 2620, 9303, 27, 7410, 969, 40, 2966, 5648, 7596, 8637, 4238, 3143, 3679, 7187, 690, 9980, 7085, 7714, 9373, 5632, 7526, 6707, 3951, 9734, 4216, 2146, 3602, 5371, 6029, 3039, 4433, 4855, 4151, 1449, 3376, 8009, 7240, 7027, 4602, 2947, 9081, 4045, 8424, 9352, 8742, 923, 2705, 4266, 3232, 2264, 6761, 363, 2651, 3383, 7770, 6730, 7856, 7340, 9679, 2158, 610, 4471, 4608, 910, 6241},
		{4417, 6756, 1013, 8797, 658, 8809, 5032, 8703, 7541, 846, 3357, 2920, 9817, 1745, 9980, 7593, 4667, 3087, 779, 3218, 6233, 5568, 4296, 2289, 2654, 7898, 5021, 9461, 5593, 8214, 9173, 4203, 2271, 7980, 2983, 5952, 9992, 8399, 3468, 1776, 3188, 9314, 1720, 6523, 2933, 621, 8685, 5483, 8986, 6163, 3444, 9539, 4320, 155, 3992, 2828, 2150, 6071, 524, 2895, 5468, 8063, 1210, 3348, 9071, 4862, 483, 9017, 4097, 6186, 9815, 3610, 5048, 1644, 1003, 9865, 9332, 2145, 1944, 2213},
		{9284, 3803, 4920, 1927, 6706, 4344, 7383, 4786, 9890, 2010, 5228, 1224, 3158, 6967, 8580, 8990, 8883, 5213, 76, 8306, 2031, 4980, 5639, 9519, 7184, 5645, 7769, 3259, 8077, 9130, 1317, 3096, 9624, 3818, 1770, 695, 2454, 947, 6029, 3474, 9938, 3527, 5696, 4760, 7724, 7738, 2848, 6442, 5767, 6845, 8323, 4131, 2859, 7595, 2500, 4815, 3660, 9130, 8580, 7016, 8231, 4391, 8369, 3444, 4069, 4021, 556, 6154, 627, 2778, 1496, 4206, 6356, 8434, 8491, 3816, 8231, 3190, 5575, 1015},
		{3787, 7572, 1788, 6803, 5641, 6844, 1961, 4811, 8535, 9914, 9999, 1450, 8857, 738, 4662, 8569, 6679, 2225, 7839, 8618, 286, 2648, 5342, 2294, 3205, 4546, 176, 8705, 3741, 6134, 8324, 8021, 7004, 5205, 7032, 6637, 9442, 5539, 5584, 4819, 5874, 5807, 8589, 6871, 9016, 983, 1758, 3786, 1519, 6241, 185, 8398, 495, 3370, 9133, 3051, 4549, 9674, 7311, 9738, 3316, 9383, 2658, 2776, 9481, 7558, 619, 3943, 3324, 6491, 4933, 153, 9738, 4623, 912, 3595, 7771, 7939, 1219, 4405},
		{2650, 3883, 4154, 5809, 315, 7756, 4430, 1788, 4451, 1631, 6461, 7230, 6017, 5751, 138, 588, 5282, 2442, 9110, 9035, 6349, 2515, 1570, 6122, 4192, 4174, 3530, 1933, 4186, 4420, 4609, 5739, 4135, 2963, 6308, 1161, 8809, 8619, 2796, 3819, 6971, 8228, 4188, 1492, 909, 8048, 2328, 6772, 8467, 7671, 9068, 2226, 7579, 6422, 7056, 8042, 3296, 2272, 3006, 2196, 7320, 3238, 3490, 3102, 37, 1293, 3212, 4767, 5041, 8773, 5794, 4456, 6174, 7279, 7054, 2835, 7053, 9088, 790, 6640},
		{3101, 1057, 7057, 3826, 6077, 1025, 2955, 1224, 1114, 6729, 5902, 4698, 6239, 7203, 9423, 1804, 4417, 6686, 1426, 6941, 8071, 1029, 4985, 9010, 6122, 6597, 1622, 1574, 3513, 1684, 7086, 5505, 3244, 411, 9638, 4150, 907, 9135, 829, 981, 1707, 5359, 8781, 9751, 5, 9131, 3973, 7159, 1340, 6955, 7514, 7993, 6964, 8198, 1933, 2797, 877, 3993, 4453, 8020, 9349, 8646, 2779, 8679, 2961, 3547, 3374, 3510, 1129, 3568, 2241, 2625, 9138, 5974, 8206, 7669, 7678, 1833, 8700, 4480},
		{4865, 9912, 8038, 8238, 782, 3095, 8199, 1127, 4501, 7280, 2112, 2487, 3626, 2790, 9432, 1475, 6312, 8277, 4827, 2218, 5806, 7132, 8752, 1468, 7471, 6386, 739, 8762, 8323, 8120, 5169, 9078, 9058, 3370, 9560, 7987, 8585, 8531, 5347, 9312, 1058, 4271, 1159, 5286, 5404, 6925, 8606, 9204, 7361, 2415, 560, 586, 4002, 2644, 1927, 2824, 768, 4409, 2942, 3345, 1002, 808, 4941, 6267, 7979, 5140, 8643, 7553, 9438, 7320, 4938, 2666, 4609, 2778, 8158, 6730, 3748, 3867, 1866, 7181},
		{171, 3771, 7134, 8927, 4778, 2913, 3326, 2004, 3089, 7853, 1378, 1729, 4777, 2706, 9578, 1360, 5693, 3036, 1851, 7248, 2403, 2273, 8536, 6501, 9216, 613, 9671, 7131, 7719, 6425, 773, 717, 8803, 160, 1114, 7554, 7197, 753, 4513, 4322, 8499, 4533, 2609, 4226, 8710, 6627, 644, 9666, 6260, 4870, 5744, 7385, 6542, 6203, 7703, 6130, 8944, 5589, 2262, 6803, 6381, 7414, 6888, 5123, 7320, 9392, 9061, 6780, 322, 8975, 7050, 5089, 1061, 2260, 3199, 1150, 1865, 5386, 9699, 6501},
		{3744, 8454, 6885, 8277, 919, 1923, 4001, 6864, 7854, 5519, 2491, 6057, 8794, 9645, 1776, 5714, 9786, 9281, 7538, 6916, 3215, 395, 2501, 9618, 4835, 8846, 9708, 2813, 3303, 1794, 8309, 7176, 2206, 1602, 1838, 236, 4593, 2245, 8993, 4017, 10, 8215, 6921, 5206, 4023, 5932, 6997, 7801, 262, 7640, 3107, 8275, 4938, 7822, 2425, 3223, 3886, 2105, 8700, 9526, 2088, 8662, 8034, 7004, 5710, 2124, 7164, 3574, 6630, 9980, 4242, 2901, 9471, 1491, 2117, 4562, 1130, 9086, 4117, 6698},
		{2810, 2280, 2331, 1170, 4554, 4071, 8387, 1215, 2274, 9848, 6738, 1604, 7281, 8805, 439, 1298, 8318, 7834, 9426, 8603, 6092, 7944, 1309, 8828, 303, 3157, 4638, 4439, 9175, 1921, 4695, 7716, 1494, 1015, 1772, 5913, 1127, 1952, 1950, 8905, 4064, 9890, 385, 9357, 7945, 5035, 7082, 5369, 4093, 6546, 5187, 5637, 2041, 8946, 1758, 7111, 6566, 1027, 1049, 5148, 7224, 7248, 296, 6169, 375, 1656, 7993, 2816, 3717, 4279, 4675, 1609, 3317, 42, 6201, 3100, 3144, 163, 9530, 4531},
		{7096, 6070, 1009, 4988, 3538, 5801, 7149, 3063, 2324, 2912, 7911, 7002, 4338, 7880, 2481, 7368, 3516, 2016, 7556, 2193, 1388, 3865, 8125, 4637, 4096, 8114, 750, 3144, 1938, 7002, 9343, 4095, 1392, 4220, 3455, 6969, 9647, 1321, 9048, 1996, 1640, 6626, 1788, 314, 9578, 6630, 2813, 6626, 4981, 9908, 7024, 4355, 3201, 3521, 3864, 3303, 464, 1923, 595, 9801, 3391, 8366, 8084, 9374, 1041, 8807, 9085, 1892, 9431, 8317, 9016, 9221, 8574, 9981, 9240, 5395, 2009, 6310, 2854, 9255},
		{8830, 3145, 2960, 9615, 8220, 6061, 3452, 2918, 6481, 9278, 2297, 3385, 6565, 7066, 7316, 5682, 107, 7646, 4466, 68, 1952, 9603, 8615, 54, 7191, 791, 6833, 2560, 693, 9733, 4168, 570, 9127, 9537, 1925, 8287, 5508, 4297, 8452, 8795, 6213, 7994, 2420, 4208, 524, 5915, 8602, 8330, 2651, 8547, 6156, 1812, 6271, 7991, 9407, 9804, 1553, 6866, 1128, 2119, 4691, 9711, 8315, 5879, 9935, 6900, 482, 682, 4126, 1041, 428, 6247, 3720, 5882, 7526, 2582, 4327, 7725, 3503, 2631},
		{2738, 9323, 721, 7434, 1453, 6294, 2957, 3786, 5722, 6019, 8685, 4386, 3066, 9057, 6860, 499, 5315, 3045, 5194, 7111, 3137, 9104, 941, 586, 3066, 755, 4177, 8819, 7040, 5309, 3583, 3897, 4428, 7788, 4721, 7249, 6559, 7324, 825, 7311, 3760, 6064, 6070, 9672, 4882, 584, 1365, 9739, 9331, 5783, 2624, 7889, 1604, 1303, 1555, 7125, 8312, 425, 8936, 3233, 7724, 1480, 403, 7440, 1784, 1754, 4721, 1569, 652, 3893, 4574, 5692, 9730, 4813, 9844, 8291, 9199, 7101, 3391, 8914},
		{6044, 2928, 9332, 3328, 8588, 447, 3830, 1176, 3523, 2705, 8365, 6136, 5442, 9049, 5526, 8575, 8869, 9031, 7280, 706, 2794, 8814, 5767, 4241, 7696, 78, 6570, 556, 5083, 1426, 4502, 3336, 9518, 2292, 1885, 3740, 3153, 9348, 9331, 8051, 2759, 5407, 9028, 7840, 9255, 831, 515, 2612, 9747, 7435, 8964, 4971, 2048, 4900, 5967, 8271, 1719, 9670, 2810, 6777, 1594, 6367, 6259, 8316, 3815, 1689, 6840, 9437, 4361, 822, 9619, 3065, 83, 6344, 7486, 8657, 8228, 9635, 6932, 4864},
		{8478, 4777, 6334, 4678, 7476, 4963, 6735, 3096, 5860, 1405, 5127, 7269, 7793, 4738, 227, 9168, 2996, 8928, 765, 733, 1276, 7677, 6258, 1528, 9558, 3329, 302, 8901, 1422, 8277, 6340, 645, 9125, 8869, 5952, 141, 8141, 1816, 9635, 4025, 4184, 3093, 83, 2344, 2747, 9352, 7966, 1206, 1126, 1826, 218, 7939, 2957, 2729, 810, 8752, 5247, 4174, 4038, 8884, 7899, 9567, 301, 5265, 5752, 7524, 4381, 1669, 3106, 8270, 6228, 6373, 754, 2547, 4240, 2313, 5514, 3022, 1040, 9738},
		{2265, 8192, 1763, 1369, 8469, 8789, 4836, 52, 1212, 6690, 5257, 8918, 6723, 6319, 378, 4039, 2421, 8555, 8184, 9577, 1432, 7139, 8078, 5452, 9628, 7579, 4161, 7490, 5159, 8559, 1011, 81, 478, 5840, 1964, 1334, 6875, 8670, 9900, 739, 1514, 8692, 522, 9316, 6955, 1345, 8132, 2277, 3193, 9773, 3923, 4177, 2183, 1236, 6747, 6575, 4874, 6003, 6409, 8187, 745, 8776, 9440, 7543, 9825, 2582, 7381, 8147, 7236, 5185, 7564, 6125, 218, 7991, 6394, 391, 7659, 7456, 5128, 5294},
		{2132, 8992, 8160, 5782, 4420, 3371, 3798, 5054, 552, 5631, 7546, 4716, 1332, 6486, 7892, 7441, 4370, 6231, 4579, 2121, 8615, 1145, 9391, 1524, 1385, 2400, 9437, 2454, 7896, 7467, 2928, 8400, 3299, 4025, 7458, 4703, 7206, 6358, 792, 6200, 725, 4275, 4136, 7390, 5984, 4502, 7929, 5085, 8176, 4600, 119, 3568, 76, 9363, 6943, 2248, 9077, 9731, 6213, 5817, 6729, 4190, 3092, 6910, 759, 2682, 8380, 1254, 9604, 3011, 9291, 5329, 9453, 9746, 2739, 6522, 3765, 5634, 1113, 5789},
		{5304, 5499, 564, 2801, 679, 2653, 1783, 3608, 7359, 7797, 3284, 796, 3222, 437, 7185, 6135, 8571, 2778, 7488, 5746, 678, 6140, 861, 7750, 803, 9859, 9918, 2425, 3734, 2698, 9005, 4864, 9818, 6743, 2475, 132, 9486, 3825, 5472, 919, 292, 4411, 7213, 7699, 6435, 9019, 6769, 1388, 802, 2124, 1345, 8493, 9487, 8558, 7061, 8777, 8833, 2427, 2238, 5409, 4957, 8503, 3171, 7622, 5779, 6145, 2417, 5873, 5563, 5693, 9574, 9491, 1937, 7384, 4563, 6842, 5432, 2751, 3406, 7981},
	};

	for (int i = 0; i < (int)g.size(); i++) {
		vector<int> t;
		vector<int> t2;
		for (int j = 0; j < i + 1; j++) {
			t.push_back(g[i - j][j]);
			t2.insert(t2.begin(), (g[(g.size() - 1) - (i - j)][(g.size() - 1) - j]));
		}
		tris[0].push_back(t);
		tris[1].push_back(t2);
	}	

	vector<vector<vector<int>>> trisc = tris;

	vector<int> res;

	for (int g = 0; g < (int)tris.size(); g++) {
		vector<vector<int>> tric = tris[g];
		for (int h = 0; h < (int)tris[g][tris[g].size() - 1].size(); h++) {
			for (int i = 0; i < (int)tris[g][tris[g].size() - 1].size(); i++)
				tris[g][tris[g].size() - 1][i] = i == h ? tric[tris[g].size() - 1][i] : 10000000;
			for (int i = (int)tris[g].size() - 2; i >= 0; i--) {
				for (UINT j = 0; j < tris[g][i].size(); j++) {
					tris[g][i][j] += tris[g][i + 1][j] < tris[g][i + 1][j + 1] ? tris[g][i + 1][j] : tris[g][i + 1][j + 1];
				}
			}
			res.push_back(tris[g][0][0]);

			/*
			int d = 0;
			vector<int> solution = {tric[0][0]};
			for (int i = 0; i < tris[g].size() - 1; i++) {
				if (tris[g][i + 1][d] < tris[g][i + 1][d + 1]) {
					solution.push_back(tric[i + 1][d]);
				}
				else {
					solution.push_back(tric[i + 1][++d]);
				}
			}

			for (int i = 0; i < solution.size(); i++) {
				cout << solution[i] << " ";
			}
			cout << tris[g][0][0] << '\n';

			for (int i = 0; i < tris[g].size(); i++) {
				for (int j = 0; j < tris[g][i].size(); j++) {
					cout << tris[g][i][j] << " ";
				}
				cout << '\n';
			}
			cout << '\n';*/

			tris[g] = tric;
		}
	}

	int lowest = MAXINT32;
	for (int i = 0; i < (int)res.size() / 2; i++) {
		int a = res[i], b = res[(res.size() / 2) + i], c = trisc[1][trisc[1].size() - 1][i];
		lowest = a + b - c < lowest ? a + b - c : lowest;		
	}

	return lowest;
}

ull Problem_206() {
	ull lb = 1010101030; //sqrt(1020304050607080900) 3 and 7 are only nums whose square ends with 9
	ull ub = 1389026670; //sqrt(1929394959697989990)
	
	auto check_num = [](string n) -> bool {
		for (int j = 0; j < (int)n.size() - 1; j += 2) {
			if (n[j] != (char)((j / 2) + 49))
				return false;
		}
		return true;
	};

	for (ull i = lb, c = 1; i <= ub; ++c, i += (c % 2 == 0 ? 40 : 60)) {
		if (check_num(ull_to_str(i * i)))
			return i;
	}

	return 0;
}

ull Problem_243() {
	//TODO Problem_243

	ull answer = 0;

	return answer;
}

ull Problem_601() {
	//TODO Problem_601
	ull answer = 0;

	unordered_map<int, int> m;

	auto streak = [&](ull n) {
		if (m.find(n) != m.end())
			return m[n];
		for (ull i = n + 1, j = 2;; i++, j++) {
			if (i % j != 0)
				return m[n] = j - 1;
		}
	};

	auto P = [&](ull s, ull N) {
		ull ret = 0;
		for (ull n = 2; n < N; n++) {
			ret += streak(n) == s ? 1 : 0;
		}
		return ret;
	};

	for (ull i = 1; i <= 31; i++) {
		answer += P(i, (ull)pow(4, i));
		cout << i << " " << answer << '\n';
	}

	return answer;
}

ull Problem_Ant() {
	enum colors {
		WHITE,
		BLACK
	};
	enum directions {
		UP,
		RIGHT,
		DOWN,
		LEFT
	};

	class Ant {
		public:
		vector<vector<bool>> grid;
		int direction = UP;
		POINT pos;

		Ant(int M) {
			grid.resize(M * 2);
			for (UINT i = 0; i < grid.size(); i++) {
				grid[i].resize(M * 2);
			}
			pos = {M, M};
		}

		void rotate_clockwise() {
			direction++;
			if (direction > LEFT)
				direction = UP;
		}

		void rotate_counterclockwise() {
			direction--;
			if (direction < UP)
				direction = LEFT;
		}

		void MoveForward() {
			pos.x += direction == RIGHT ? 1 : direction == LEFT ? -1 : 0;
			pos.y += direction == UP ? -1 : direction == DOWN ? 1 : 0;
		}

		void Rotate() {
			if (grid[pos.x][pos.y] == WHITE) {
				grid[pos.x][pos.y] = BLACK;
				rotate_clockwise();
			}
			else {
				grid[pos.x][pos.y] = WHITE;
				rotate_counterclockwise();
			}
		}

		void Move() {
			Rotate();
			MoveForward();
		}

		ull countBlack() {
			int count = 0;
			for (UINT i = 0; i < grid.size(); i++) {
				for (UINT j = 0; j < grid[i].size(); j++) {
					if (grid[i][j] == BLACK)
						count++;
				}
			}
			return count;
		}
	};

	int M = 5;
	Ant a(M);

	for (int i = 0; i < M; i++) {
		a.Move();
	}

	return a.countBlack();
}
ull Problem_Prime() {

	int min, max;
	min = 200;
	max = 222222;

	auto rotate = []() -> int {

	};

	int count = 0;
	for (int i = min; i < max; i++) {
		string s = int_to_str(i);
		UINT j = 0;
		for (; j < s.size(); j++) {
			s.insert(0, 1, s[s.size() - 1]);
			s.pop_back();
			if (!is_prime(str_to_int(s)))
				break;
		}
		if (j == s.size())
			count++;
	}
	return count;
}

ull Problem_n() {
	vector<vector<int>> grid = {
		{100, 0, 80, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 50, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	};

	auto overlap = [&](vector<POINT>& pt, int i, int j) -> bool {
		if (grid[i][j] == -1) return false;
		if (grid[i + 1][j] == -1) return false;
		if (grid[i + 1][j] == -1) return false;
		if (grid[i + 1][j + 1] == -1) return false;

		return true;
	};
	int first = 0;
	vector<POINT> pt(3);
	for (UINT c = 0; c < 3; c++) {
		for (UINT i = 0; i < grid.size() - 1; i++) {
			for (UINT j = 0; j < grid[i].size() - 1; j++) {
				int sum = grid[i][j] + grid[i][j + 1] + grid[i + 1][j] + grid[i + 1][j + 1];
				if (sum > first) {
					if (overlap(pt, i, j)) {
						pt[c] = {(LONG)j, (LONG)(i + 1)};
						cout << pt[c].x << " " << pt[c].y << '\n';
						first = sum;
					}
				}
			}
		}
		first = 0;
		
		grid[pt[c].y][pt[c].x] = -1;//bl
		grid[pt[c].y - 1][pt[c].x] = -1; //tl
		grid[pt[c].y][pt[c].x + 1] = -1; //br
		grid[pt[c].y - 1][pt[c].x + 1] = -1; //tr
		for (UINT i = 0; i < grid.size(); i++) {
			for (UINT j = 0; j < grid[i].size(); j++) {
				cout << grid[i][j] << ", ";
			}
			cout << '\n';
		}
		cout << '\n';
	}
	for (UINT i = 0; i < pt.size(); i++) {
		cout << pt[i].x << " " << pt[i].y << '\n';
	}

	return 0;
}

ull Problem_Compression_2002() {
	string s = "The cat in the hat wasn't a bad cat at that.";  

	//1 2 3 1 4 5 6 7 2 8 9

	transform(s.begin(), s.end(), s.begin(), ::toupper);

	string t = "";
	for (int i = 0; i < (int)s.size(); i++) {
		if (s[i] >= 'A' && s[i] <= 'Z' || s[i] == ' ') {
			t += s[i];
		}
	}

	int p = 1;
	std::map<string, int> a;

	vector<string> words = split_str(t, " ");
	vector<string> words_c = words;

	for (int i = 0; i < (int)words.size(); i++) {
		if (a.count(words[i]) == 0) {
			a[words[i]] = p++;
		}
	}

	for (int i = 0; i < (int)words_c.size(); i++) {
		if (a.count(words_c[i]) == 1) {
			cout << a[words_c[i]] << " ";
		}
	}
	cout << '\n';

	return 0;
}

ull AmazonProblem_numSteps() {
	function<int(int, vector<int>&)> num_steps = [&](int n, vector<int>& s) -> int {
		if (n <= 1) return 1;

		int total = 0;
		for (int i = 0; i < s.size(); i++) {
			total += num_steps(n - s[i], s);
		}

		return total;

	//	return num_steps(n - 2, s) + num_steps(n - 1, s);
	};

	return num_steps(4, vector<int>{1, 3, 5});
}

ull FacebookProblem_susbets() {
	auto add1 = [](vector<bool>& s) {
		int c = 0;
		vector<bool> res;
		for (int i = s.size() - 1; i >= 0; i--) {
			int n = s[i] + (s.size() - 1 == i ? 1 : 0);
			int m = n % 2 + c;
			c = (n / 2) + (m / 2);
			m %= 2;
			res.insert(res.begin(), (char)m);
		}
		if (c > 0)
			res.insert(res.begin(), (char)c);
		s = res;
	};

	vector<int> set = {1, 2, 3, 4, 5,6,7,8,9};

	ull m = pow(2, set.size());

	vector<bool> sset;
	sset.resize(set.size());

	for (ull i = 0; i < m; i++) {
		for (ull j = 0; j < sset.size(); j++) {
			if (sset[j] == 1)
				cout << set[j] << ", ";
		}
		cout << '\n';

		add1(sset);
	}

	return 0;
}

ull Problem_BarnsleyFern() {
	srand(clock());

	int w = 800, h = 600;

	BYTE* img = new BYTE[w * h * 3];

	struct f { 
		double xa, xb, xc, ya, yb, yc; 
		void calc(double x1, double y1, double*x2, double*y2) {
			*x2 = x1 * xa + y1 * xb + xc; 
			*y2 = x1 * ya + y1 * yb + yc;
		}
	};

	vector<f> cfs = {
		{0,0,0,0,.16,0},
		{.85,.04,0,-.04,.85,1.6},
		{.2, -.26, 0,.23,.22,1.6},
		{-.15,.28,0,.26,.24,.44}
	};

	double xmin = -2.1820, xmax = 2.6558,
		   ymin = 0, ymax = 9.9983;  

	double x = 0, y = 0;

	for (int i = 0; i < 3000000; i++) {
		int sx = (x - xmin) / (xmax - xmin) * (w - 0) + 0;
		int sy = (y - ymin) / (ymax - ymin) * (0 - h) + h;

		COLORREF col = getRainbowColor(sy, 600);
		int p = sy * w * 3 + sx * 3;
		img[p + 0] = GetRValue(col);
		img[p + 1] = GetGValue(col);
		img[p + 2] = GetBValue(col);

		int r = rand() % 100;
		cfs[r < 1 ? 0 : r < 86 ? 1 : r < 93 ? 2 : 3].calc(x, y, &x, &y);		
	}

	array_to_bmp("fern.bmp", img, w, h);

	return 0;
}

int main() {	
	SOLVE(Problem_71)

	_getch();
	return 0;
}